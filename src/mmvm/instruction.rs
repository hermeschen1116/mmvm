use std::fmt::{Display, Formatter};

use crate::mmvm::addressing::Addressing;
use crate::mmvm::mnemonic::Mnemonic;
use crate::mmvm::mnemonic::Mnemonic::*;
use crate::mmvm::register::Register;
use crate::mmvm::register::WordRegister::{AX, DX};

#[derive(Debug, Copy, Clone)]
pub enum Instruction {
    Standalone(Mnemonic),
    WithInstruction(Mnemonic, Mnemonic),
    WithAddress(Mnemonic, Addressing),
    AddressToAddress(Mnemonic, bool, Addressing, Addressing),
    WithImmediate(Mnemonic, u16),
    ImmediateToAddress(Mnemonic, Addressing, u16),
    Undefined,
}

impl Instruction {
    pub fn decode_data(word_mode: bool, binary_data: &[u8]) -> (usize, Option<u16>) {
        if binary_data.is_empty() {
            return (0, None);
        }
        if !word_mode {
            (1, Some(u16::from(binary_data[0])))
        } else {
            (
                2,
                Some(u16::from(
                    ((binary_data[1] as u16) << 8) + (binary_data[0] as u16),
                )),
            )
        }
    }

    pub fn decode_move_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Register/Memory to/from Register
            0b10001000..=0b10001011 => {
                let d = (binary_data[0] & 0b00000010) >> 1;
                let w = binary_data[0] & 0b00000001;
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(MOV, d == 0b0, reg, r_m)),
                    )
                } else {
                    (0, None)
                }
            }
            // Immediate to Register/Memory
            0b11000110 | 0b11000111 if ((binary_data[1] & 0b00111000) >> 3) == 0b000 => {
                let w = binary_data[0] & 0b00000001;
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data(w == 0b1, &binary_data[(2 + rl)..])
                    {
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(MOV, r_m, displacement)),
                        )
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            // Immediate to Register
            0b10110000..=0b10111111 => {
                let w = (binary_data[0] & 0b00001000) >> 3;
                if let (_, Some(reg), None) = Addressing::decode(w, binary_data, 0b00000111) {
                    if let (dl, Some(displacement)) = Self::decode_data(w == 0b1, &binary_data[1..])
                    {
                        (
                            1 + dl,
                            Some(Instruction::ImmediateToAddress(MOV, reg, displacement)),
                        )
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            // Memory <-> Accumulator
            0b10100000 | 0b10100001 | 0b10100010 | 0b10100011 => {
                let d = (binary_data[0] & 0b00000010) >> 1;
                let w = binary_data[0] & 0b00000001;
                if let (_, Some(address)) = Self::decode_data(true, &binary_data[1..]) {
                    (
                        3,
                        Some(Instruction::AddressToAddress(
                            MOV,
                            d == 0b0,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            Addressing::DirectAddressing(address),
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            // Register/Memory <-> Segment Register
            0b10001110 | 0b10001100 if (binary_data[1] & 0b00100000) == 0b00000000 => {
                let d = (binary_data[0] & 0b00000010) >> 1;
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(0, &binary_data[1..], 0b11011111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(MOV, d == 0b0, reg, r_m)),
                    )
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_push_pop_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // PUSH (Register/Memory)
            0b11111111 if (binary_data[1] & 0b00111000) == 0b00110000 => {
                if let (l, None, Some(r_m)) = Addressing::decode(0, &binary_data[1..], 0b11000111) {
                    (2 + l, Some(Instruction::WithAddress(PUSH, r_m)))
                } else {
                    (0, None)
                }
            }
            // PUSH (Register)
            0b01010000..=0b01010111 => {
                if let (l, Some(reg), None) = Addressing::decode(0, binary_data, 0b00000111) {
                    (1 + l, Some(Instruction::WithAddress(PUSH, reg)))
                } else {
                    (0, None)
                }
            }
            // POP (Register/Memory)
            0b10001111 if (binary_data[1] & 0b00111000) == 0b00000000 => {
                if let (l, None, Some(r_m)) = Addressing::decode(0, &binary_data[1..], 0b11000111) {
                    (2 + l, Some(Instruction::WithAddress(POP, r_m)))
                } else {
                    (0, None)
                }
            }
            // POP (Register)
            0b01011000..=0b01011111 => {
                if let (l, Some(reg), None) = Addressing::decode(0, binary_data, 0b00000111) {
                    (1 + l, Some(Instruction::WithAddress(POP, reg)))
                } else {
                    (0, None)
                }
            }
            // PUSH / POP (Segment Register)
            _ => {
                let instruction = if (binary_data[0] & 0b11100111) == 0b00000110 {
                    PUSH
                } else if (binary_data[0] & 0b11100111) == 0b00000111 {
                    POP
                } else {
                    return (0, None);
                };
                if let (l, Some(reg), None) = Addressing::decode(0, &binary_data[1..], 0b00011000) {
                    (1 + l, Some(Instruction::WithAddress(instruction, reg)))
                } else {
                    (0, None)
                }
            }
        }
    }

    pub fn decode_exchange_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Register/Memory with Register
            0b10000110 | 0b10000111 => {
                let w = binary_data[0] & 0b00000001;
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(XCHG, true, reg, r_m)),
                    )
                } else {
                    (0, None)
                }
            }
            // Register with Accumulator
            0b10010000..=0b10010111 => {
                if let (l, Some(reg), None) = Addressing::decode(0, binary_data, 0b00000111) {
                    (
                        1 + l,
                        Some(Instruction::AddressToAddress(
                            XCHG,
                            true,
                            Addressing::RegisterAddressing(Register::WordReg(AX)),
                            reg,
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_in_out_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        let instruction = match binary_data[0] & 0b00000010 {
            0b00 => IN,
            0b10 => OUT,
            _ => return (0, None),
        };
        match binary_data[0] {
            // Fixed Port
            0b11100100 | 0b11100101 => (
                2,
                Some(Instruction::ImmediateToAddress(
                    instruction,
                    Addressing::RegisterAddressing(
                        Register::decode(w == 0b1, true, 0b000).unwrap(),
                    ),
                    binary_data[1] as u16,
                )),
            ),
            // Variable Port
            0b11101100 | 0b11101101 => (
                1,
                Some(Instruction::AddressToAddress(
                    instruction,
                    true,
                    Addressing::RegisterAddressing(Register::WordReg(DX)),
                    Addressing::RegisterAddressing(
                        Register::decode(w == 0b1, true, 0b000).unwrap(),
                    ),
                )),
            ),
            _ => (0, None),
        }
    }

    pub fn decode_load_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let instruction = match binary_data[0] {
            0b10001101 => LEA,
            0b11000101 => LDS,
            0b11000100 => LES,
            _ => return (0, None),
        };
        if let (l, Some(reg), Some(r_m)) = Addressing::decode(0b1, &binary_data[1..], 0b11111111) {
            (
                2 + l,
                Some(Instruction::AddressToAddress(instruction, false, reg, r_m)),
            )
        } else {
            (0, None)
        }
    }

    pub fn decode_arithmic_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        match binary_data[0] {
            // Reg./Memory with Register to Either
            0b00000000..=0b00000011
            | 0b00010000..=0b00010011
            | 0b00101000..=0b00101011
            | 0b00011000..=0b00011011
            | 0b00111000..=0b00111011 => {
                let instruction = match (binary_data[0] & 0b00111000) >> 3 {
                    0b000 => ADD,
                    0b010 => ADC,
                    0b101 => SUB,
                    0b011 => SSB,
                    0b111 => CMP,
                    _ => return (0, None),
                };
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(
                            instruction,
                            (binary_data[0] & 0b00000010) == 0b00,
                            reg,
                            r_m,
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            // Immediate to Accumulator
            0b00000100 | 0b00000101 | 0b00010100 | 0b00010101 | 0b00101100 | 0b00101101
            | 0b00011100 | 0b00011101 | 0b00111100 | 0b00111101 => {
                let instruction = match (binary_data[0] & 0b00111100) >> 2 {
                    0b0001 => ADD,
                    0b0101 => ADC,
                    0b1011 => SUB,
                    0b0111 => SSB,
                    0b1111 => CMP,
                    _ => return (0, None),
                };
                if let (l, Some(displacement)) = Self::decode_data(w == 0b1, &binary_data[1..]) {
                    (
                        1 + l,
                        Some(Instruction::ImmediateToAddress(
                            instruction,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            displacement,
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            // Immediate to Register/Memory
            0b10000000..=0b10000011 => {
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data((binary_data[0] & 0b11) == 0b01, &binary_data[(2 + rl)..])
                    {
                        let instruction = match binary_data[1] & 0b00111000 {
                            0b00000000 => ADD,
                            0b00010000 => ADC,
                            0b00101000 => SUB,
                            0b00011000 => SSB,
                            0b00111000 => {
                                if w == 0b1 {
                                    CMP
                                } else {
                                    CMP_BYTE
                                }
                            }
                            _ => return (0, None),
                        };
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(
                                instruction,
                                r_m,
                                displacement,
                            )),
                        )
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_increase_decrease_instruction(
        binary_data: &[u8],
    ) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Register/Memory
            0b11111110 | 0b11111111 => {
                let w = binary_data[0] & 0b00000001;
                if let (l, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111) {
                    match binary_data[1] & 0b00111000 {
                        0b00000000 => (2 + l, Some(Instruction::WithAddress(INC, r_m))),
                        0b00001000 => (2 + l, Some(Instruction::WithAddress(DEC, r_m))),
                        _ => (0, None),
                    }
                } else {
                    (0, None)
                }
            }
            // Register
            0b01000000 | 0b01000111 | 0b01001000 | 0b01001111 => {
                let instruction = if (binary_data[0] & 0b11111000) == 0b01000000 {
                    INC
                } else {
                    DEC
                };
                if let (l, Some(reg), None) = Addressing::decode(0b1, binary_data, 0b00000111) {
                    (1 + l, Some(Instruction::WithAddress(instruction, reg)))
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_negation_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if let (l, None, Some(r_m)) =
            Addressing::decode(binary_data[0] & 0b1, &binary_data[1..], 0b11000111)
        {
            (2 + l, Some(Instruction::WithAddress(NEG, r_m)))
        } else {
            (0, None)
        }
    }

    pub fn decode_multiply_divide_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if binary_data[0] == 0b11110110 | 0b11110111 {
            if let (l, None, Some(r_m)) =
                Addressing::decode(binary_data[0] & 0b1, &binary_data[1..], 0b11000111)
            {
                match binary_data[1] & 0b00111000 {
                    0b00100000 => (2 + l, Some(Instruction::WithAddress(MUL, r_m))),
                    0b00101000 => (2 + l, Some(Instruction::WithAddress(IMUL, r_m))),
                    0b00110000 => (2 + l, Some(Instruction::WithAddress(DIV, r_m))),
                    0b00111000 => (2 + l, Some(Instruction::WithAddress(IDIV, r_m))),
                    _ => (0, None),
                }
            } else {
                (0, None)
            }
        } else {
            (0, None)
        }
    }

    pub fn decode_not_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if binary_data[0] == 0b11110110 | 0b11110111 {
            if let (l, None, Some(r_m)) =
                Addressing::decode(binary_data[0] & 0b1, &binary_data[1..], 0b11000111)
            {
                if (binary_data[1] & 0b00111000) == 0b00011000 {
                    (2 + l, Some(Instruction::WithAddress(NOT, r_m)))
                } else {
                    (0, None)
                }
            } else {
                (0, None)
            }
        } else {
            (0, None)
        }
    }

    pub fn decode_shift_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let v = (binary_data[0] & 0b00000010) >> 1;
        let w = binary_data[0] & 0b00000001;

        let instruction = match (v, binary_data[1] & 0b00111000) {
            (0b0, 0b00100000) => SHL_S,
            (0b1, 0b00100000) => SHL_C,
            (0b0, 0b00101000) => SHR_S,
            (0b1, 0b00101000) => SHR_C,
            (0b0, 0b00111000) => SAR_S,
            (0b1, 0b00111000) => SAR_C,
            (0b0, 0b00000000) => ROL_S,
            (0b1, 0b00000000) => ROL_C,
            (0b0, 0b00001000) => ROR_S,
            (0b1, 0b00001000) => ROR_C,
            (0b0, 0b00010000) => RCL_S,
            (0b1, 0b00010000) => RCL_C,
            (0b0, 0b00011000) => RCR_S,
            (0b1, 0b00011000) => RCR_C,
            _ => return (0, None),
        };

        if let (l, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111) {
            (
                2 + l,
                Some(Instruction::ImmediateToAddress(instruction, r_m, 0b1)),
            )
        } else {
            (0, None)
        }
    }

    pub fn decode_logic_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        match binary_data[0] {
            // Reg./Memory and Register to Either
            0b00100000..=0b00100011 | 0b00001000..=0b00001011 | 0b00110000..=0b00110011 => {
                let instruction = match binary_data[0] & 0b11111100 {
                    0b00100000 => AND,
                    0b00001000 => OR,
                    0b00110000 => XOR,
                    _ => return (0, None),
                };
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(
                            instruction,
                            (binary_data[0] & 0b00000010) == 0b00,
                            reg,
                            r_m,
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            // Immediate to Accumulator
            0b00100100 | 0b00100101 | 0b00001100 | 0b00001101 | 0b00110100 | 0b00110101 => {
                let instruction = match binary_data[0] & 0b11111110 {
                    0b00100100 => AND,
                    0b00001100 => OR,
                    0b00110100 => XOR,
                    _ => return (0, None),
                };
                if let (l, Some(displacement)) = Self::decode_data(w == 0b1, &binary_data[1..]) {
                    (
                        2 + l,
                        Some(Instruction::ImmediateToAddress(
                            instruction,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            displacement,
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            // Immediate to Register/Memory
            0b10000000..=0b10000011 => {
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data(w == 0b1, &binary_data[(2 + rl)..])
                    {
                        let instruction = match binary_data[1] & 0b00111000 {
                            0b00100000 => AND,
                            0b00001000 => OR,
                            0b00110000 => XOR,
                            _ => return (0, None),
                        };
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(
                                instruction,
                                r_m,
                                displacement,
                            )),
                        )
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_test_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        match binary_data[0] & 0b11111110 {
            // Register/Memory and Register
            0b10000100 | 0b10000101 => {
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(TEST, true, reg, r_m)),
                    )
                } else {
                    (0, None)
                }
            }
            // Immediate Data and Register/Memory
            0b11110110 | 0b11110111 if (binary_data[1] & 0b00111000) == 0b0 => {
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data(w == 0b1, &binary_data[(2 + rl)..])
                    {
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(TEST, r_m, displacement)),
                        )
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            // Immediate Data and Accumulator
            0b10101000 | 0b10101001 => {
                if let (l, Some(displacement)) = Self::decode_data(w == 0b1, &binary_data[1..]) {
                    (
                        1 + l,
                        Some(Instruction::ImmediateToAddress(
                            TEST,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            displacement,
                        )),
                    )
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_string_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // MOVS (Byte)
            0b10100100 => (1, Some(Instruction::Standalone(MOVSB))),
            // MOVS (Word)
            0b10100101 => (1, Some(Instruction::Standalone(MOVSW))),
            // CMPS (Byte)
            0b10100110 => (1, Some(Instruction::Standalone(CMPSB))),
            // CMPS (Word)
            0b10100111 => (1, Some(Instruction::Standalone(CMPSW))),
            // SCAS (Byte)
            0b10101110 => (1, Some(Instruction::Standalone(SCASB))),
            // SCAS (Word)
            0b10101111 => (1, Some(Instruction::Standalone(SCASW))),
            // LODS (Byte)
            0b10101100 => (1, Some(Instruction::Standalone(LODSB))),
            // LODS (Word)
            0b10101101 => (1, Some(Instruction::Standalone(LODSW))),
            // STOS (Byte)
            0b10101010 => (1, Some(Instruction::Standalone(STOSB))),
            // STOS (Word)
            0b10101011 => (1, Some(Instruction::Standalone(STOSW))),
            _ => (0, None),
        }
    }

    pub fn decode_repeat_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let instruction = match binary_data[0] {
            0b11110010 => REP_U,
            0b11110011 => REP_C,
            _ => return (0, None),
        };
        if let (l, Some(Instruction::Standalone(sub_instruction))) =
            Self::decode_string_instruction(&binary_data[1..])
        {
            (
                1 + l,
                Some(Instruction::WithInstruction(instruction, sub_instruction)),
            )
        } else {
            (0, None)
        }
    }

    pub fn decode_jump_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // CALL (Direct within Segment)
            0b11101000 => {
                if let (_, Some(displacement)) = Self::decode_data(true, &binary_data[1..]) {
                    (3, Some(Instruction::WithImmediate(CALL, displacement)))
                } else {
                    (0, None)
                }
            }
            // JMP (Direct within Segment / Direct within Segment-Short)
            0b11101001 | 0b11101011 => {
                if let (_, Some(displacement)) =
                    Self::decode_data(!((binary_data[0] & 0b10) >> 1) == 0b1, &binary_data[1..])
                {
                    (3, Some(Instruction::WithImmediate(JMP, displacement)))
                } else {
                    (0, None)
                }
            }
            0b11111111 => {
                // CALL (Indirect within Segment / Indirect Intersegment )
                if (binary_data[1] & 0b00111000) == 0b00010000 | 0b00011000 {
                    if let (l, None, Some(r_m)) =
                        Addressing::decode(0b1, &binary_data[1..], 0b11000111)
                    {
                        (2 + l, Some(Instruction::WithAddress(CALL, r_m)))
                    } else {
                        (0, None)
                    }
                }
                // JMP (Indirect within Segment / Indirect Intersegment )
                else if (binary_data[1] & 0b00111000) == 0b00100000 | 0b00101000 {
                    if let (l, None, Some(r_m)) =
                        Addressing::decode(0b1, &binary_data[1..], 0b11000111)
                    {
                        (2 + l, Some(Instruction::WithAddress(JMP, r_m)))
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            // Direct Intersegment
            0b10011010 | 0b11101010 => {
                let instruction = if binary_data[0] == 0b10011010 {
                    CALL
                } else {
                    JMP
                };
                if let (_, Some(offset)) = Self::decode_data(true, &binary_data[1..]) {
                    if let (_, Some(segment)) = Self::decode_data(true, &binary_data[3..]) {
                        (
                            5,
                            Some(Instruction::WithAddress(
                                instruction,
                                Addressing::DirectIndexAddressing(offset, segment),
                            )),
                        )
                    } else {
                        (0, None)
                    }
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_return_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Within Segment
            0b11000011 => (1, Some(Instruction::Standalone(RET_I))),
            // Within Seg Adding Immed to SP
            0b11000010 => {
                if let (_, Some(data)) = Self::decode_data(true, &binary_data[1..]) {
                    (3, Some(Instruction::WithImmediate(RET_I, data)))
                } else {
                    (0, None)
                }
            }
            // Intersegment
            0b11001011 => (1, Some(Instruction::Standalone(RET_C))),
            // Intersegment Adding Immediate to SP
            0b11001010 => {
                if let (_, Some(data)) = Self::decode_data(true, &binary_data[1..]) {
                    (3, Some(Instruction::WithImmediate(RET_C, data)))
                } else {
                    (0, None)
                }
            }
            _ => (0, None),
        }
    }

    pub fn decode_conditional_jump_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            0b01110100 => (
                2,
                Some(Instruction::WithImmediate(JZ, binary_data[1] as u16)),
            ),
            0b01111100 => (
                2,
                Some(Instruction::WithImmediate(JL, binary_data[1] as u16)),
            ),
            0b01111110 => (
                2,
                Some(Instruction::WithImmediate(JLE, binary_data[1] as u16)),
            ),
            0b01110010 => (
                2,
                Some(Instruction::WithImmediate(JB, binary_data[1] as u16)),
            ),
            0b01110110 => (
                2,
                Some(Instruction::WithImmediate(JBE, binary_data[1] as u16)),
            ),
            0b01111010 => (
                2,
                Some(Instruction::WithImmediate(JP, binary_data[1] as u16)),
            ),
            0b01110000 => (
                2,
                Some(Instruction::WithImmediate(JO, binary_data[1] as u16)),
            ),
            0b01111000 => (
                2,
                Some(Instruction::WithImmediate(JS, binary_data[1] as u16)),
            ),
            0b01110101 => (
                2,
                Some(Instruction::WithImmediate(JNZ, binary_data[1] as u16)),
            ),
            0b01111101 => (
                2,
                Some(Instruction::WithImmediate(JNL, binary_data[1] as u16)),
            ),
            0b01111111 => (
                2,
                Some(Instruction::WithImmediate(JNLE, binary_data[1] as u16)),
            ),
            0b01110011 => (
                2,
                Some(Instruction::WithImmediate(JNB, binary_data[1] as u16)),
            ),
            0b01110111 => (
                2,
                Some(Instruction::WithImmediate(JNBE, binary_data[1] as u16)),
            ),
            0b01111011 => (
                2,
                Some(Instruction::WithImmediate(JNP, binary_data[1] as u16)),
            ),
            0b01110001 => (
                2,
                Some(Instruction::WithImmediate(JNO, binary_data[1] as u16)),
            ),
            0b01111001 => (
                2,
                Some(Instruction::WithImmediate(JNS, binary_data[1] as u16)),
            ),
            0b11100010 => (
                2,
                Some(Instruction::WithImmediate(LOOP, binary_data[1] as u16)),
            ),
            0b11100001 => (
                2,
                Some(Instruction::WithImmediate(LOOPZ, binary_data[1] as u16)),
            ),
            0b11100000 => (
                2,
                Some(Instruction::WithImmediate(LOOPNZ, binary_data[1] as u16)),
            ),
            0b11100011 => (
                2,
                Some(Instruction::WithImmediate(JCXZ, binary_data[1] as u16)),
            ),
            _ => (0, None),
        }
    }

    pub fn decode_interrupt_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Type Specified
            0b11001101 => (
                2,
                Some(Instruction::WithImmediate(INT, binary_data[1] as u16)),
            ),
            // Type 3
            0b11001100 => (1, Some(Instruction::Standalone(INT))),
            _ => (0, None),
        }
    }

    pub fn decode_escape_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if let (l, None, Some(r_m)) = Addressing::decode(0b1, &binary_data[1..], 0b11000111) {
            (2 + l, Some(Instruction::WithAddress(ESC, r_m)))
        } else {
            (0, None)
        }
    }

    pub fn decode(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            0b11010111 => (1, Some(Instruction::Standalone(XLAT))),
            0b10011111 => (1, Some(Instruction::Standalone(LAHF))),
            0b10011110 => (1, Some(Instruction::Standalone(SAHF))),
            0b10011100 => (1, Some(Instruction::Standalone(PUSHF))),
            0b10011101 => (1, Some(Instruction::Standalone(POPF))),
            0b00110111 => (1, Some(Instruction::Standalone(AAA))),
            0b00100111 => (1, Some(Instruction::Standalone(BAA))),
            0b00111111 => (1, Some(Instruction::Standalone(AAS))),
            0b00101111 => (1, Some(Instruction::Standalone(DAS))),
            0b10011000 => (1, Some(Instruction::Standalone(CBW))),
            0b10011001 => (1, Some(Instruction::Standalone(CWD))),
            // RET (Within Segment / Intersegment)
            0b11000011 | 0b11001011 => Self::decode_return_instruction(binary_data),
            // INT (Type 3)
            0b11001100 => Self::decode_interrupt_instruction(binary_data),
            0b11001110 => (1, Some(Instruction::Standalone(INTO))),
            0b11001111 => (1, Some(Instruction::Standalone(IRET))),
            0b11111000 => (1, Some(Instruction::Standalone(CLC))),
            0b11110101 => (1, Some(Instruction::Standalone(CMC))),
            0b11111001 => (1, Some(Instruction::Standalone(STC))),
            0b11111100 => (1, Some(Instruction::Standalone(CLD))),
            0b11111101 => (1, Some(Instruction::Standalone(STD))),
            0b11111010 => (1, Some(Instruction::Standalone(CLI))),
            0b11111011 => (1, Some(Instruction::Standalone(STI))),
            0b11110100 => (1, Some(Instruction::Standalone(HLT))),
            0b10011011 => (1, Some(Instruction::Standalone(WAIT))),
            0b11110000 => (1, Some(Instruction::Standalone(LOCK))),
            0b11010101 if binary_data[1] == 0b00001010 => (2, Some(Instruction::Standalone(AAD))),
            0b11010100 if binary_data[1] == 0b00001010 => (2, Some(Instruction::Standalone(AAM))),
            // MOV (Register/Memory to Segment Register / Segment Register to Register/Memory)
            0b10001110 | 0b10001100 if (binary_data[1] & 0b00100000) == 0b0 => {
                Self::decode_move_instruction(binary_data)
            }
            // PUSH (Register/Memory), CALL / JMP (Indirect within Segment / Indirect Intersegment)
            0b11111111 => match (binary_data[1] & 0b00111000) >> 3 {
                0b110 => Self::decode_push_pop_instruction(binary_data),
                0b010 | 0b011 | 0b100 | 0b101 => Self::decode_jump_instruction(binary_data),
                0b000 | 0b001 => Self::decode_increase_decrease_instruction(binary_data),
                _ => (0, None),
            },
            // POP (Register/Memory)
            0b10001111 if (binary_data[1] & 0b00111000) == 0b0 => {
                Self::decode_push_pop_instruction(binary_data)
            }
            // LEA, LDS, LES
            0b10001101 | 0b11000101 | 0b11000100 => Self::decode_load_instruction(binary_data),
            // CALL (Direct within Segment / Direct Intersegment), JMP (Direct within Segment-Short / Direct within Segment / Direct Intersegment)
            0b11101000 | 0b10011010 | 0b11101001 | 0b11101011 | 0b11101010 => {
                Self::decode_jump_instruction(binary_data)
            }
            // RET (Within Segment Adding Immediate to SP / Intersegment Adding Immediate to SP)
            0b11000010 | 0b11001010 => Self::decode_return_instruction(binary_data),
            // conditional jump and loop
            0b01110000..=0b01111111 | 0b11100000..=0b11100011 => {
                Self::decode_conditional_jump_instruction(binary_data)
            }
            // INT (Type Specified)
            0b11001101 => Self::decode_interrupt_instruction(binary_data),
            // MOV (Immediate to Register/Memory)
            0b11000110 | 0b11000111 if (binary_data[1] & 0b00111000) == 0b0 => {
                Self::decode_move_instruction(binary_data)
            }
            // MOV (Register/Memory to/from Register, Immediate to Register, Memory <-> Accumulator )
            0b10001000..=0b10001011
            | 0b10110000..=0b10110111
            | 0b10111000..=0b10111111
            | 0b10100000
            | 0b10100001
            | 0b10100010
            | 0b10100011 => Self::decode_move_instruction(binary_data),
            // PUSH / POP (Register, Segment Register )
            0b01010000..=0b01010111
            | 0b00000110
            | 0b00001110
            | 0b00010110
            | 0b00011110
            | 0b01011000..=0b01011111
            | 0b00000111
            | 0b00001111
            | 0b00010111
            | 0b00011111 => Self::decode_push_pop_instruction(binary_data),
            // XCHG
            0b10000110 | 0b10000111 | 0b10010000..=0b10010111 => {
                Self::decode_exchange_instruction(binary_data)
            }
            // IN / OUT
            0b11100100 | 0b11100101 | 0b11101100 | 0b11101101 | 0b11100110 | 0b11100111
            | 0b11101110 | 0b11101111 => Self::decode_in_out_instruction(binary_data),
            // ADD / ADC / SUB / SSB / CMP (Reg./Memory with Register to Either)
            0b00000000..=0b00000011
            | 0b00010000..=0b00010011
            | 0b00101000..=0b00101011
            | 0b00011000..=0b00011011
            | 0b00111000..=0b00111011 => Self::decode_arithmic_instruction(binary_data),
            // ADD / ADC / SUB / SSB / CMP (Immediate from Register/Memory)
            0b10000000..=0b10000011
                if ((binary_data[1] & 0b00111000) >> 3)
                    == 0b000 | 0b010 | 0b101 | 0b011 | 0b111 =>
            {
                Self::decode_arithmic_instruction(binary_data)
            }
            // ADD / ADC / SUB / SSB / CMP (Immediate to Accumulator)
            0b00000100 | 0b00000101 | 0b00010100 | 0b00010101 | 0b00101100 | 0b00101101
            | 0b00011100 | 0b00011101 | 0b00111100 | 0b00111101 => {
                Self::decode_arithmic_instruction(binary_data)
            }
            // INC / DEC (Register/Memory)
            0b11111110 if ((binary_data[1] & 0b00111000) >> 3) == 0b000 | 0b001 => {
                Self::decode_increase_decrease_instruction(binary_data)
            }
            // INC / DEC (Register)
            0b01000000..=0b01000111 | 0b01001000..=0b01001111 => {
                Self::decode_increase_decrease_instruction(binary_data)
            }
            0b11110110 | 0b11110111 => match (binary_data[1] & 0b00111000) >> 3 {
                // NEG
                0b011 => Self::decode_negation_instruction(binary_data),
                // MUL, IMUL, DIV, IDIV
                0b100 | 0b101 | 0b110 | 0b111 => {
                    Self::decode_multiply_divide_instruction(binary_data)
                }
                // NOT
                0b010 => Self::decode_not_instruction(binary_data),
                // TEST (Immediate Data and Register/Memory)
                0b000 => Self::decode_test_instruction(binary_data),
                _ => (0, None),
            },
            // shift
            0b11010000..=0b11010011
                if ((binary_data[1] & 0b00111000) >> 3)
                    == 0b100 | 0b101 | 0b111 | 0b000 | 0b001 | 0b010 | 0b011 =>
            {
                Self::decode_shift_instruction(binary_data)
            }
            // AND / OR / XOR (Reg./Memory and Register to Either, Immediate to Accumulator )
            0b00100000..=0b00100011
            | 0b00100100
            | 0b00100101
            | 0b00001000..=0b00001011
            | 0b00001100
            | 0b00001101
            | 0b00110000..=0b00110011
            | 0b00110100
            | 0b00110101 => Self::decode_logic_instruction(binary_data),
            // AND / OR / XOR (Immediate to Register/Memory)
            0b10000000 | 0b10000001
                if ((binary_data[1] & 0b00111000) >> 3) == 0b100 | 0b001 | 0b110 =>
            {
                Self::decode_logic_instruction(binary_data)
            }
            // TEST (Register/Memory and Register, Immediate Data and Accumulator)
            0b10000100 | 0b10000101 | 0b10101000 | 0b10101001 => {
                Self::decode_test_instruction(binary_data)
            }
            // string manipulation
            0b10100100 | 0b10100101 | 0b10100110 | 0b10100111 | 0b10101110 | 0b10101111
            | 0b10101100 | 0b10101101 | 0b10101010 | 0b10101011 => {
                Self::decode_string_instruction(binary_data)
            }
            // REP
            0b11110010 | 0b11110011 => Self::decode_repeat_instruction(binary_data),
            // ESC
            0b11011000 | 0b11011111 => Self::decode_escape_instruction(binary_data),
            _ => (0, Some(Instruction::Undefined)),
        })
    }
}

impl Display for Instruction {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            &Instruction::Standalone(mnemonic) => write!(f, "{}", mnemonic),
            &Instruction::WithInstruction(mnemonic, sub_mnemonic) => {
                write!(f, "{}\t{}", mnemonic, sub_mnemonic)
            }
            &Instruction::WithAddress(mnemonic, target) => write!(f, "{}\t{}", mnemonic, target),
            &Instruction::AddressToAddress(mnemonic, direction, reg, r_m) => match direction {
                true => write!(f, "{}\t{}, {}", mnemonic, r_m, reg),
                false => write!(f, "{}\t{}, {}", mnemonic, reg, r_m),
            },
            &Instruction::WithImmediate(mnemonic, immediate) => {
                write!(f, "{}\t{:04x}", mnemonic, immediate)
            }
            &Instruction::ImmediateToAddress(mnemonic, target, immediate) => match mnemonic {
                IN | OUT | ADD | ADC | SUB | SSB | CMP => {
                    write!(f, "{}\t{}, {:x}", mnemonic, target, immediate)
                }
                _ => write!(f, "{}\t{}, {:04x}", mnemonic, target, immediate),
            },
            &Instruction::Undefined => write!(f, "(undefined)"),
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::mmvm::instruction::Instruction;

    #[test]
    fn test_decode_move_instruction() {
        let testcases = [
            (&[0x89, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\t[0002], bx"),
            (&[0x89, 0x16, 0x0a, 0x00, 0x00, 0x00], 4, "mov\t[000a], dx"),
            (
                &[0xc7, 0x06, 0x0c, 0x00, 0x40, 0x10],
                6,
                "mov\t[000c], 1040",
            ),
            (
                &[0xc7, 0x06, 0x0e, 0x00, 0x37, 0x10],
                6,
                "mov\t[000e], 1037",
            ),
            (&[0x89, 0x16, 0x12, 0x00, 0x00, 0x00], 4, "mov\t[0012], dx"),
            (
                &[0xc7, 0x06, 0x14, 0x00, 0x4e, 0x10],
                6,
                "mov\t[0014], 104e",
            ),
            (
                &[0xc7, 0x06, 0x24, 0x01, 0x0c, 0x00],
                6,
                "mov\t[0124], 000c",
            ),
            (&[0x89, 0x16, 0x24, 0x01, 0x00, 0x00], 4, "mov\t[0124], dx"),
            (
                &[0xc7, 0x06, 0x26, 0x01, 0x0c, 0x00],
                6,
                "mov\t[0126], 000c",
            ),
            (&[0x89, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\t[0126], dx"),
            (&[0x89, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\t[0128], dx"),
            (
                &[0xc7, 0x06, 0x2c, 0x01, 0x0c, 0x00],
                6,
                "mov\t[012c], 000c",
            ),
            (&[0x89, 0x16, 0x2c, 0x01, 0x00, 0x00], 4, "mov\t[012c], dx"),
            (&[0x89, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\t[012e], dx"),
            (&[0x89, 0x36, 0x12, 0x02, 0x00, 0x00], 4, "mov\t[0212], si"),
            (&[0x89, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "mov\t[0214], si"),
            (&[0x89, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], dx"),
            (&[0x89, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], si"),
            (&[0x89, 0x16, 0x18, 0x02, 0x00, 0x00], 4, "mov\t[0218], dx"),
            (
                &[0xc7, 0x06, 0x1a, 0x02, 0x04, 0x00],
                6,
                "mov\t[021a], 0004",
            ),
            (&[0x89, 0x36, 0x1a, 0x02, 0x00, 0x00], 4, "mov\t[021a], si"),
            (
                &[0xc7, 0x06, 0x1c, 0x02, 0x04, 0x00],
                6,
                "mov\t[021c], 0004",
            ),
            (&[0x89, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], bx"),
            (&[0x89, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], si"),
            (&[0x89, 0x1e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], bx"),
            (&[0x89, 0x16, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], dx"),
            (&[0x89, 0x1e, 0x20, 0x02, 0x00, 0x00], 4, "mov\t[0220], bx"),
            (
                &[0xc7, 0x06, 0x22, 0x02, 0x04, 0x00],
                6,
                "mov\t[0222], 0004",
            ),
            (&[0x89, 0x1e, 0x22, 0x02, 0x00, 0x00], 4, "mov\t[0222], bx"),
            (&[0x89, 0x1e, 0x24, 0x02, 0x00, 0x00], 4, "mov\t[0224], bx"),
            (&[0x89, 0x1e, 0x26, 0x02, 0x00, 0x00], 4, "mov\t[0226], bx"),
            (&[0x89, 0x1e, 0x2a, 0x02, 0x00, 0x00], 4, "mov\t[022a], bx"),
            (&[0x89, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], ax"),
            (&[0x89, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], dx"),
            (&[0x89, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], bx"),
            (&[0x89, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], dx"),
            (&[0x89, 0x56, 0xf0, 0x00, 0x00, 0x00], 3, "mov\t[bp-10], dx"),
            (
                &[0xc7, 0x46, 0xee, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-12], 0000",
            ),
            (&[0x89, 0x56, 0xee, 0x00, 0x00, 0x00], 3, "mov\t[bp-12], dx"),
            (
                &[0xc7, 0x46, 0xec, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-14], 0000",
            ),
            (&[0x89, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\t[bp-14], dx"),
            (&[0x89, 0x56, 0xea, 0x00, 0x00, 0x00], 3, "mov\t[bp-16], dx"),
            (
                &[0xc7, 0x46, 0xe8, 0xfc, 0x00, 0x00],
                5,
                "mov\t[bp-18], 00fc",
            ),
            (
                &[0xc7, 0x46, 0xe8, 0xfe, 0x00, 0x00],
                5,
                "mov\t[bp-18], 00fe",
            ),
            (
                &[0xc7, 0x46, 0xe8, 0x04, 0x01, 0x00],
                5,
                "mov\t[bp-18], 0104",
            ),
            (&[0x89, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], bx"),
            (&[0x89, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], dx"),
            (&[0x88, 0x56, 0xff, 0x00, 0x00, 0x00], 3, "mov\t[bp-1], dl"),
            (
                &[0xc7, 0x46, 0xfe, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-2], 0000",
            ),
            (&[0x89, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], ax"),
            (&[0x89, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], bx"),
            (&[0x89, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], cx"),
            (&[0x89, 0x7e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], di"),
            (&[0x89, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], dx"),
            (&[0x89, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], si"),
            (&[0x89, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], ax"),
            (&[0x89, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], dx"),
            (
                &[0xc7, 0x46, 0xfa, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-6], 0000",
            ),
            (&[0x89, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], cx"),
            (&[0x89, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], dx"),
            (
                &[0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-8], 0000",
            ),
            (&[0x89, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], ax"),
            (&[0x89, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], dx"),
            (
                &[0xc7, 0x46, 0xf8, 0xff, 0xff, 0x00],
                5,
                "mov\t[bp-8], ffff",
            ),
            (
                &[0xc7, 0x46, 0xf6, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-a], 0000",
            ),
            (&[0x89, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], dx"),
            (&[0x89, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], si"),
            (
                &[0xc7, 0x46, 0xf4, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0000",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x01, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0001",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x02, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0002",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x06, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0006",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x08, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0008",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x0a, 0x00, 0x00],
                5,
                "mov\t[bp-c], 000a",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x10, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0010",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x00, 0x04, 0x00],
                5,
                "mov\t[bp-c], 0400",
            ),
            (&[0x89, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], cx"),
            (&[0x89, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], dx"),
            (
                &[0xc7, 0x46, 0xf2, 0x20, 0x00, 0x00],
                5,
                "mov\t[bp-e], 0020",
            ),
            (
                &[0xc7, 0x46, 0xf2, 0x30, 0x00, 0x00],
                5,
                "mov\t[bp-e], 0030",
            ),
            (&[0x89, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\t[bp-e], dx"),
            (&[0x89, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[bx+2], dx"),
            (&[0x89, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], dx"),
            (&[0x89, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], si"),
            (&[0x88, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], al"),
            (&[0x89, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], ax"),
            (&[0x89, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], cx"),
            (&[0x89, 0x3f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], di"),
            (&[0x88, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dl"),
            (&[0x89, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dx"),
            (&[0x89, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], si"),
            (&[0x89, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[di-2], dx"),
            (&[0x89, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[di], dx"),
            (&[0x89, 0x7c, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], di"),
            (&[0x89, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], dx"),
            (
                &[0xc7, 0x44, 0x06, 0x00, 0x04, 0x00],
                5,
                "mov\t[si+6], 0400",
            ),
            (&[0x89, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\t[si+8], ax"),
            (&[0x89, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], bx"),
            (&[0x89, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], dx"),
            (
                &[0xc7, 0x44, 0xfe, 0x00, 0x00, 0x00],
                5,
                "mov\t[si-2], 0000",
            ),
            (&[0x89, 0x7c, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], di"),
            (&[0x89, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], dx"),
            (&[0xc7, 0x04, 0x00, 0x00, 0x00, 0x00], 4, "mov\t[si], 0000"),
            (&[0xc7, 0x04, 0xff, 0x03, 0x00, 0x00], 4, "mov\t[si], 03ff"),
            (&[0x88, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], al"),
            (&[0x89, 0x3c, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], di"),
            (&[0x89, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], dx"),
            (&[0xc7, 0x04, 0xff, 0xff, 0x00, 0x00], 4, "mov\t[si], ffff"),
            (&[0x8a, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+4]"),
            (&[0x8a, 0x46, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+a]"),
            (&[0x8a, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [bx]"),
            (&[0x8a, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [si]"),
            (&[0xb8, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0001"),
            (&[0xb8, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0002"),
            (&[0xb8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0004"),
            (&[0xb8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0006"),
            (&[0xb8, 0x0a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 000a"),
            (&[0xb8, 0x11, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0011"),
            (&[0xb8, 0x12, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0012"),
            (&[0xb8, 0x13, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0013"),
            (&[0xb8, 0x14, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0014"),
            (&[0xb8, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001c"),
            (&[0xb8, 0x1e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001e"),
            (&[0xb8, 0x24, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0024"),
            (&[0xb8, 0x28, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0028"),
            (&[0xb8, 0x2a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 002a"),
            (&[0xb8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0030"),
            (&[0xb8, 0x31, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0031"),
            (&[0xb8, 0x36, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0036"),
            (&[0xb8, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0058"),
            (&[0xb8, 0x61, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0061"),
            (&[0xb8, 0x78, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0078"),
            (&[0xb8, 0x06, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0106"),
            (&[0xb8, 0x08, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0108"),
            (&[0xb8, 0x0e, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 010e"),
            (&[0xb8, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0218"),
            (&[0xb8, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 021a"),
            (&[0xb8, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0220"),
            (&[0xb8, 0x00, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, 0400"),
            (&[0xb8, 0xe5, 0x14, 0x00, 0x00, 0x00], 3, "mov\tax, 14e5"),
            (&[0xb8, 0x08, 0x54, 0x00, 0x00, 0x00], 3, "mov\tax, 5408"),
            (&[0x8b, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+4]"),
            (&[0x8b, 0x46, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+8]"),
            (&[0x8b, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-14]"),
            (&[0x8b, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-8]"),
            (&[0x8b, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-a]"),
            (&[0x8b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, [bx]"),
            (&[0x8b, 0x44, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, [si+2]"),
            (&[0x8b, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [si+8]"),
            (&[0x8b, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tax, [si+a]"),
            (&[0x8b, 0x44, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tax, [si+c]"),
            (&[0x89, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, bx"),
            (&[0x89, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, di"),
            (&[0x89, 0xd0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, dx"),
            (&[0xb8, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "mov\tax, ffff"),
            (&[0x89, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, si"),
            (&[0x89, 0xe5, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbp, sp"),
            (&[0xbb, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0001"),
            (&[0xbb, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0002"),
            (&[0xbb, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0008"),
            (&[0xbb, 0x0e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 000e"),
            (&[0xbb, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0010"),
            (&[0xbb, 0x16, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0016"),
            (&[0xbb, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005c"),
            (&[0xbb, 0x5e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005e"),
            (&[0xbb, 0x64, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0064"),
            (&[0xbb, 0x68, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0068"),
            (&[0xbb, 0x6a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 006a"),
            (&[0xbb, 0x70, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0070"),
            (&[0xbb, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008c"),
            (&[0xbb, 0x8e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008e"),
            (&[0xbb, 0x94, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0094"),
            (&[0xbb, 0xa4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a4"),
            (&[0xbb, 0xa6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a6"),
            (&[0xbb, 0xac, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00ac"),
            (&[0xbb, 0xb4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b4"),
            (&[0xbb, 0xb6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b6"),
            (&[0xbb, 0xbc, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00bc"),
            (&[0xbb, 0x28, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0128"),
            (&[0xbb, 0x2a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 012a"),
            (&[0xbb, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0130"),
            (&[0xbb, 0x01, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0201"),
            (&[0xbb, 0x03, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0203"),
            (&[0xbb, 0x09, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0209"),
            (&[0xbb, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0218"),
            (&[0xbb, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 021a"),
            (&[0xbb, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0220"),
            (&[0x8b, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\tbx, [0002]"),
            (&[0x8b, 0x1e, 0x06, 0x00, 0x00, 0x00], 4, "mov\tbx, [0006]"),
            (&[0x8b, 0x1e, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tbx, [000c]"),
            (&[0x8b, 0x1e, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [000e]"),
            (&[0x8b, 0x1e, 0x14, 0x00, 0x00, 0x00], 4, "mov\tbx, [0014]"),
            (&[0x8b, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "mov\tbx, [0214]"),
            (&[0x8b, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tbx, [0216]"),
            (&[0x8b, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\tbx, [021c]"),
            (&[0x8b, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+4]"),
            (&[0x8b, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+6]"),
            (&[0x8b, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+8]"),
            (&[0x8b, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-18]"),
            (&[0x8b, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-2]"),
            (&[0x8b, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-6]"),
            (&[0x8b, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-a]"),
            (&[0x8b, 0x9f, 0x16, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+16]"),
            (
                &[0x8b, 0x9f, 0x32, 0x02, 0x00, 0x00],
                4,
                "mov\tbx, [bx+232]",
            ),
            (
                &[0x8b, 0x9f, 0x34, 0x02, 0x00, 0x00],
                4,
                "mov\tbx, [bx+234]",
            ),
            (
                &[0x8b, 0x9f, 0x3a, 0x02, 0x00, 0x00],
                4,
                "mov\tbx, [bx+23a]",
            ),
            (&[0x8b, 0x5f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx+2]"),
            (&[0x8b, 0x9f, 0x34, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+34]"),
            (&[0x8b, 0x9f, 0x36, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+36]"),
            (&[0x8b, 0x9f, 0x3c, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+3c]"),
            (&[0x8b, 0x9f, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+e]"),
            (&[0x8b, 0x5f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx-2]"),
            (&[0x8b, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [bx]"),
            (&[0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [di]"),
            (&[0x8b, 0x5c, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+6]"),
            (&[0x8b, 0x5c, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+8]"),
            (&[0x8b, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+a]"),
            (&[0x89, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, di"),
            (&[0x89, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, dx"),
            (&[0x89, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, si"),
            (&[0x89, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, sp"),
            (
                &[0xc6, 0x04, 0x20, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 20",
            ),
            (
                &[0xc6, 0x04, 0x2b, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 2b",
            ),
            (
                &[0xc6, 0x04, 0x2d, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 2d",
            ),
            (
                &[0xc6, 0x04, 0x30, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 30",
            ),
            (&[0xb9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0001"),
            (&[0xb9, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0002"),
            (&[0xb9, 0x03, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0003"),
            (&[0xb9, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0006"),
            (&[0xb9, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 000c"),
            (&[0xb9, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0010"),
            (&[0x8b, 0x4e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp+8]"),
            (&[0x8b, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp-2]"),
            (&[0x8b, 0x4f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx+2]"),
            (&[0x8b, 0x4f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx-2]"),
            (&[0x8b, 0x4c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tcx, [si+a]"),
            (&[0x89, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "mov\tcx, dx"),
            (&[0x8b, 0x3e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tdi, [0216]"),
            (&[0x8b, 0x3e, 0x18, 0x02, 0x00, 0x00], 4, "mov\tdi, [0218]"),
            (&[0x8b, 0x3e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tdi, [021e]"),
            (&[0x8b, 0x7e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+4]"),
            (&[0x8b, 0x7e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+8]"),
            (&[0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, [di]"),
            (&[0x89, 0xc7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, ax"),
            (&[0x89, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, dx"),
            (&[0x89, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, si"),
            (&[0x8a, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdl, [bx]"),
            (&[0xba, 0x60, 0x00, 0x00, 0x00, 0x00], 3, "mov\tdx, 0060"),
            (&[0xba, 0x52, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0152"),
            (&[0xba, 0x54, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0154"),
            (&[0xba, 0x5a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 015a"),
            (&[0xba, 0x69, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0169"),
            (&[0xba, 0x6b, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 016b"),
            (&[0xba, 0x71, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0171"),
            (&[0xba, 0x80, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0180"),
            (&[0xba, 0x82, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0182"),
            (&[0xba, 0x88, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0188"),
            (&[0xba, 0x97, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0197"),
            (&[0xba, 0x99, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0199"),
            (&[0xba, 0x9f, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 019f"),
            (&[0xba, 0xae, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01ae"),
            (&[0xba, 0xb0, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b0"),
            (&[0xba, 0xb6, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b6"),
            (&[0xba, 0xc5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c5"),
            (&[0xba, 0xc7, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c7"),
            (&[0xba, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01cd"),
            (&[0xba, 0xdc, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01dc"),
            (&[0xba, 0xde, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01de"),
            (&[0xba, 0xe4, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01e4"),
            (&[0xba, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f3"),
            (&[0xba, 0xf5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f5"),
            (&[0xba, 0xfb, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01fb"),
            (&[0xba, 0xd2, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, 04d2"),
            (&[0x8b, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\tdx, [0126]"),
            (&[0x8b, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\tdx, [0128]"),
            (&[0x8b, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tdx, [012e]"),
            (&[0x8b, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+4]"),
            (&[0x8b, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+6]"),
            (&[0x8b, 0x56, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+8]"),
            (&[0x8b, 0x56, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+a]"),
            (&[0x8b, 0x56, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+c]"),
            (&[0x8b, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-14]"),
            (&[0x8b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-18]"),
            (&[0x8b, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-2]"),
            (&[0x8b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-4]"),
            (&[0x8b, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-6]"),
            (&[0x8b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-8]"),
            (&[0x8b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-a]"),
            (&[0x8b, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-c]"),
            (&[0x8b, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-e]"),
            (&[0x8b, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-2]"),
            (&[0x8b, 0x57, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-4]"),
            (&[0x8b, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [bx]"),
            (&[0x8b, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [di-2]"),
            (&[0x8b, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [di]"),
            (&[0x8b, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+2]"),
            (&[0x8b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+6]"),
            (&[0x8b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+8]"),
            (&[0x8b, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+a]"),
            (&[0x8b, 0x54, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+c]"),
            (&[0x8b, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [si-2]"),
            (&[0x8b, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [si]"),
            (&[0x89, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, ax"),
            (&[0x89, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, bx"),
            (&[0x89, 0xca, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, cx"),
            (&[0x89, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, di"),
            (&[0x89, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, si"),
            (&[0x8b, 0x36, 0x04, 0x00, 0x00, 0x00], 4, "mov\tsi, [0004]"),
            (&[0x8b, 0x36, 0x0a, 0x00, 0x00, 0x00], 4, "mov\tsi, [000a]"),
            (&[0x8b, 0x36, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tsi, [000c]"),
            (&[0x8b, 0x36, 0x12, 0x00, 0x00, 0x00], 4, "mov\tsi, [0012]"),
            (&[0x8b, 0x36, 0x26, 0x01, 0x00, 0x00], 4, "mov\tsi, [0126]"),
            (&[0x8b, 0x36, 0x28, 0x01, 0x00, 0x00], 4, "mov\tsi, [0128]"),
            (&[0x8b, 0x36, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tsi, [012e]"),
            (&[0x8b, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\tsi, [0216]"),
            (&[0x8b, 0x36, 0x18, 0x02, 0x00, 0x00], 4, "mov\tsi, [0218]"),
            (&[0x8b, 0x36, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tsi, [021e]"),
            (&[0x8b, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+4]"),
            (&[0x8b, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+6]"),
            (&[0x8b, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+8]"),
            (&[0x8b, 0x76, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+a]"),
            (&[0x8b, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, [si]"),
            (&[0x89, 0xc6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, ax"),
            (&[0x89, 0xd6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, dx"),
            (&[0x89, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, sp"),
            (&[0x89, 0xec, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsp, bp"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_move_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, testcase.2, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_push_pop_instruction() {
        let testcases = [
            (&[0x58, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tax"),
            (&[0x5d, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbp"),
            (&[0x5b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbx"),
            (&[0x5f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdi"),
            (&[0x5a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdx"),
            (&[0x5e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tsi"),
            (&[0xff, 0x36, 0x1e, 0x00, 0x00, 0x00], 4, "push\t[001e]"),
            (&[0xff, 0x36, 0x20, 0x00, 0x00, 0x00], 4, "push\t[0020]"),
            (&[0xff, 0x36, 0x26, 0x00, 0x00, 0x00], 4, "push\t[0026]"),
            (&[0xff, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "push\t[0214]"),
            (&[0xff, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "push\t[0216]"),
            (&[0xff, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "push\t[021c]"),
            (&[0xff, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "push\t[bp+4]"),
            (&[0xff, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "push\t[bp+6]"),
            (&[0xff, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "push\t[bp+8]"),
            (&[0xff, 0x76, 0x0c, 0x00, 0x00, 0x00], 3, "push\t[bp+c]"),
            (&[0xff, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bp-2]"),
            (&[0xff, 0x76, 0xfc, 0x00, 0x00, 0x00], 3, "push\t[bp-4]"),
            (&[0xff, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "push\t[bp-6]"),
            (&[0xff, 0x76, 0xf8, 0x00, 0x00, 0x00], 3, "push\t[bp-8]"),
            (&[0xff, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "push\t[bp-a]"),
            (&[0xff, 0x76, 0xf4, 0x00, 0x00, 0x00], 3, "push\t[bp-c]"),
            (&[0xff, 0x76, 0xf2, 0x00, 0x00, 0x00], 3, "push\t[bp-e]"),
            (&[0xff, 0xb7, 0x34, 0x00, 0x00, 0x00], 4, "push\t[bx+34]"),
            (&[0xff, 0xb7, 0x36, 0x00, 0x00, 0x00], 4, "push\t[bx+36]"),
            (&[0xff, 0xb7, 0x3c, 0x00, 0x00, 0x00], 4, "push\t[bx+3c]"),
            (&[0xff, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bx-2]"),
            (&[0xff, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "push\t[bx]"),
            (&[0xff, 0x74, 0x02, 0x00, 0x00, 0x00], 3, "push\t[si+2]"),
            (&[0xff, 0x74, 0x08, 0x00, 0x00, 0x00], 3, "push\t[si+8]"),
            (&[0x50, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tax"),
            (&[0x55, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbp"),
            (&[0x53, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbx"),
            (&[0x51, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tcx"),
            (&[0x57, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdi"),
            (&[0x52, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdx"),
            (&[0x56, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tsi"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_push_pop_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_exchange_instruction() {
        let testcases = [
            (&[0x87, 0x1e, 0x10, 0x02, 0x00, 0x00], 4, "xchg\t[0210], bx"),
            (&[0x87, 0x1e, 0x12, 0x02, 0x00, 0x00], 4, "xchg\t[0212], bx"),
            (&[0x87, 0x1e, 0x18, 0x02, 0x00, 0x00], 4, "xchg\t[0218], bx"),
            (&[0x91, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "xchg\tcx, ax"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_exchange_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_in_out_instruction() {
        let testcases = [
            (&[0xec, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "in\tal, dx"),
            (&[0xe5, 0x83, 0x00, 0x00, 0x00, 0x00], 2, "in\tax, 83"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_in_out_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_load_instruction() {
        let testcases = [
            (&[0x8d, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+4]"),
            (&[0x8d, 0x46, 0x06, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+6]"),
            (&[0x8d, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-18]"),
            (&[0x8d, 0x46, 0xff, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-1]"),
            (&[0x8d, 0x46, 0xe0, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-20]"),
            (&[0x8d, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-a]"),
            (&[0x8d, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-c]"),
            (&[0x8d, 0x45, 0x30, 0x00, 0x00, 0x00], 3, "lea\tax, [di+30]"),
            (&[0x8d, 0x44, 0x01, 0x00, 0x00, 0x00], 3, "lea\tax, [si+1]"),
            (&[0x8d, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+6]"),
            (&[0x8d, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+8]"),
            (
                &[0x8d, 0x9e, 0xe7, 0xfb, 0x00, 0x00],
                4,
                "lea\tbx, [bp-419]",
            ),
            (&[0x8d, 0x5d, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [di+2]"),
            (&[0x8d, 0x5c, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [si+2]"),
            (&[0x8d, 0x4f, 0x04, 0x00, 0x00, 0x00], 3, "lea\tcx, [bx+4]"),
            (&[0x8d, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "lea\tdx, [bx+2]"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_load_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_arithmic_instruction() {
        let testcases = [
            (&[0x11, 0xc9, 0x00, 0x00, 0x00, 0x00], 2, "adc\tcx, cx"),
            (&[0x83, 0x46, 0xec, 0x02, 0x00, 0x00], 4, "add\t[bp-14], 2"),
            (&[0x01, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "add\t[bp-14], dx"),
            (&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "add\t[bx+si], al"),
            (&[0x00, 0x55, 0x89, 0x00, 0x00, 0x00], 3, "add\t[di-77], dl"),
            (&[0x83, 0x05, 0x02, 0x00, 0x00, 0x00], 3, "add\t[di], 2"),
            (&[0x83, 0x05, 0x04, 0x00, 0x00, 0x00], 3, "add\t[di], 4"),
            (&[0x03, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "add\tax, [bp-4]"),
            (&[0x83, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "add\tbx, 1"),
            (&[0x83, 0xc3, 0x02, 0x00, 0x00, 0x00], 3, "add\tbx, 2"),
            (&[0x83, 0xc3, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, 4"),
            (&[0x03, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+4]"),
            (&[0x03, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+6]"),
            (&[0x01, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "add\tbx, dx"),
            (&[0x00, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "add\tcl, ch"),
            (&[0x83, 0xc1, 0x02, 0x00, 0x00, 0x00], 3, "add\tcx, 2"),
            (&[0x01, 0xc1, 0x00, 0x00, 0x00, 0x00], 2, "add\tcx, ax"),
            (&[0x01, 0xcf, 0x00, 0x00, 0x00, 0x00], 2, "add\tdi, cx"),
            // (&[0x81, 0xc2, 0xff, 0x03, 0x00, 0x00], 4, "add\tdx, 03ff"),
            (&[0x83, 0xc2, 0x02, 0x00, 0x00, 0x00], 3, "add\tdx, 2"),
            (&[0x83, 0xc2, 0x30, 0x00, 0x00, 0x00], 3, "add\tdx, 30"),
            (&[0x03, 0x16, 0x30, 0x00, 0x00, 0x00], 4, "add\tdx, [0030]"),
            (&[0x03, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "add\tdx, [0126]"),
            (&[0x03, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "add\tdx, [0128]"),
            (&[0x03, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "add\tdx, [012e]"),
            (&[0x03, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "add\tdx, [0214]"),
            (&[0x03, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "add\tdx, [0216]"),
            (&[0x03, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "add\tdx, [021c]"),
            (&[0x03, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "add\tdx, [bp+6]"),
            (&[0x03, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "add\tdx, [bp-a]"),
            (&[0x01, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "add\tdx, si"),
            (&[0x83, 0xc6, 0x02, 0x00, 0x00, 0x00], 3, "add\tsi, 2"),
            (&[0x01, 0xce, 0x00, 0x00, 0x00, 0x00], 2, "add\tsi, cx"),
            (&[0x83, 0xc4, 0x06, 0x00, 0x00, 0x00], 3, "add\tsp, 6"),
            (&[0x83, 0xc4, 0x08, 0x00, 0x00, 0x00], 3, "add\tsp, 8"),
            (&[0x83, 0xc4, 0x0a, 0x00, 0x00, 0x00], 3, "add\tsp, a"),
            (&[0x83, 0xc4, 0x0c, 0x00, 0x00, 0x00], 3, "add\tsp, c"),
            (&[0x83, 0x6e, 0xfc, 0x02, 0x00, 0x00], 4, "sub\t[bp-4], 2"),
            // (&[0x2d, 0x20, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0020"),
            // (&[0x2d, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0030"),
            (&[0x2d, 0xa9, 0xff, 0x00, 0x00, 0x00], 3, "sub\tax, ffa9"),
            (&[0x29, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "sub\tax, si"),
            (&[0x83, 0xea, 0x61, 0x00, 0x00, 0x00], 3, "sub\tdx, 61"),
            (&[0x2b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-18]"),
            (&[0x2b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-4]"),
            (&[0x2b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-a]"),
            (&[0x2b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+6]"),
            (&[0x2b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+8]"),
            (&[0x29, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "sub\tdx, si"),
            // (&[0x81, 0xec, 0x1a, 0x04, 0x00, 0x00], 4, "sub\tsp, 041a"),
            (&[0x83, 0xec, 0x18, 0x00, 0x00, 0x00], 3, "sub\tsp, 18"),
            (&[0x83, 0xec, 0x20, 0x00, 0x00, 0x00], 3, "sub\tsp, 20"),
            (&[0x83, 0xec, 0x06, 0x00, 0x00, 0x00], 3, "sub\tsp, 6"),
            (&[0x83, 0xec, 0x0a, 0x00, 0x00, 0x00], 3, "sub\tsp, a"),
            (&[0x83, 0xec, 0x0c, 0x00, 0x00, 0x00], 3, "sub\tsp, c"),
            (&[0x83, 0xec, 0x0e, 0x00, 0x00, 0x00], 3, "sub\tsp, e"),
            (
                &[0x18, 0x8b, 0x56, 0x04, 0x00, 0x00],
                4,
                "sbb\t[bp+di+456], cl",
            ),
            (&[0x83, 0x5e, 0xfe, 0x00, 0x00, 0x00], 4, "sbb\t[bp-2], 0"),
            (&[0x19, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "sbb\tbx, di"),
            (&[0x83, 0x3e, 0x06, 0x00, 0x00, 0x00], 5, "cmp\t[0006], 0"),
            (&[0x83, 0x3e, 0x0c, 0x00, 0x00, 0x00], 5, "cmp\t[000c], 0"),
            (&[0x83, 0x3e, 0x0e, 0x00, 0x00, 0x00], 5, "cmp\t[000e], 0"),
            (&[0x83, 0x3e, 0x14, 0x00, 0x00, 0x00], 5, "cmp\t[0014], 0"),
            (&[0x83, 0x3e, 0x12, 0x02, 0x00, 0x00], 5, "cmp\t[0212], 0"),
            (&[0x83, 0x3e, 0x14, 0x02, 0x00, 0x00], 5, "cmp\t[0214], 0"),
            (&[0x39, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], bx"),
            (&[0x39, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], dx"),
            (&[0x39, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], bx"),
            (&[0x39, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], dx"),
            (&[0x83, 0x3e, 0x1a, 0x02, 0x00, 0x00], 5, "cmp\t[021a], 0"),
            (&[0x39, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], bx"),
            (&[0x39, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], dx"),
            (&[0x83, 0x7e, 0x04, 0x00, 0x00, 0x00], 4, "cmp\t[bp+4], 0"),
            (&[0x39, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], dx"),
            (&[0x39, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], si"),
            (&[0x83, 0x7e, 0x06, 0x00, 0x00, 0x00], 4, "cmp\t[bp+6], 0"),
            (&[0x83, 0x7e, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\t[bp+c], 0"),
            (&[0x83, 0x7e, 0x0c, 0x01, 0x00, 0x00], 4, "cmp\t[bp+c], 1"),
            (&[0x83, 0x7e, 0x0e, 0x00, 0x00, 0x00], 4, "cmp\t[bp+e], 0"),
            (&[0x83, 0x7e, 0xee, 0x00, 0x00, 0x00], 4, "cmp\t[bp-12], 0"),
            (&[0x83, 0x7e, 0xec, 0x00, 0x00, 0x00], 4, "cmp\t[bp-14], 0"),
            (&[0x39, 0x46, 0xea, 0x00, 0x00, 0x00], 3, "cmp\t[bp-16], ax"),
            (&[0x83, 0x7e, 0xfe, 0x00, 0x00, 0x00], 4, "cmp\t[bp-2], 0"),
            (&[0x39, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bp-2], dx"),
            (&[0x83, 0x7e, 0xfc, 0x00, 0x00, 0x00], 4, "cmp\t[bp-4], 0"),
            (&[0x83, 0x7e, 0xfc, 0x09, 0x00, 0x00], 4, "cmp\t[bp-4], 9"),
            (&[0x83, 0x7e, 0xfa, 0x00, 0x00, 0x00], 4, "cmp\t[bp-6], 0"),
            (&[0x39, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], bx"),
            (&[0x39, 0x7e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], di"),
            (&[0x39, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], si"),
            (&[0x83, 0x7e, 0xf8, 0x25, 0x00, 0x00], 4, "cmp\t[bp-8], 25"),
            (&[0x83, 0x7e, 0xf8, 0x58, 0x00, 0x00], 4, "cmp\t[bp-8], 58"),
            (&[0x83, 0x7e, 0xf8, 0x70, 0x00, 0x00], 4, "cmp\t[bp-8], 70"),
            (&[0x83, 0x7e, 0xf8, 0x78, 0x00, 0x00], 4, "cmp\t[bp-8], 78"),
            (&[0x83, 0x7e, 0xf6, 0x00, 0x00, 0x00], 4, "cmp\t[bp-a], 0"),
            (&[0x39, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "cmp\t[bp-a], si"),
            (&[0x83, 0x7e, 0xf4, 0x00, 0x00, 0x00], 4, "cmp\t[bp-c], 0"),
            // (&[0x81, 0x7e, 0xf4, 0x01, 0x04, 0x00], 5, "cmp\t[bp-c], 0401"),
            (&[0x83, 0x7e, 0xf4, 0x02, 0x00, 0x00], 4, "cmp\t[bp-c], 2"),
            (&[0x83, 0xbf, 0x34, 0x00, 0x00, 0x00], 5, "cmp\t[bx+34], 0"),
            (&[0x83, 0xbf, 0x36, 0x00, 0x00, 0x00], 5, "cmp\t[bx+36], 0"),
            (&[0x83, 0xbf, 0x3c, 0x00, 0x00, 0x00], 5, "cmp\t[bx+3c], 0"),
            (&[0x39, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bx-2], si"),
            (&[0x81, 0x3f, 0x53, 0x53, 0x00, 0x00], 4, "cmp\t[bx], 5353"),
            (&[0x39, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[di-2], dx"),
            (&[0x83, 0x7c, 0x02, 0x00, 0x00, 0x00], 4, "cmp\t[si+2], 0"),
            (&[0x39, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "cmp\t[si+6], dx"),
            (&[0x83, 0x7c, 0x08, 0x00, 0x00, 0x00], 4, "cmp\t[si+8], 0"),
            (&[0x39, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "cmp\t[si], dx"),
            // (&[0x3d, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "cmp\tax, 0001"),
            (&[0x3b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, [bx]"),
            (&[0x39, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, cx"),
            (&[0x3d, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tax, ffff"),
            // (&[0x81, 0xfb, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\tbx, 000c"),
            // (&[0x81, 0xfb, 0x14, 0x00, 0x00, 0x00], 4, "cmp\tbx, 0014"),
            // (&[0x81, 0xfb, 0x12, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0212"),
            // (&[0x81, 0xfb, 0x14, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0214"),
            // (&[0x81, 0xfb, 0x1a, 0x02, 0x00, 0x00], 4, "cmp\tbx, 021a"),
            // (&[0x80, 0x7e, 0x0a, 0x58, 0x00, 0x00], 4, "cmp byte\t[bp+a], 58"),
            // (&[0x80, 0x7e, 0x0a, 0x6f, 0x00, 0x00], 4, "cmp byte\t[bp+a], 6f"),
            // (&[0x80, 0x7e, 0x0a, 0x70, 0x00, 0x00], 4, "cmp byte\t[bp+a], 70"),
            // (&[0x80, 0x7e, 0x0a, 0x78, 0x00, 0x00], 4, "cmp byte\t[bp+a], 78"),
            // (&[0x80, 0x3f, 0x00, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 0"),
            // (&[0x80, 0x3f, 0x20, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 20"),
            // (&[0x80, 0x3f, 0x2b, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2b"),
            // (&[0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2d"),
            // (&[0x80, 0x3f, 0x2e, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2e"),
            // (&[0x80, 0x3c, 0x2a, 0x00, 0x00, 0x00], 3, "cmp byte\t[si], 2a"),
            (&[0x83, 0xf9, 0x10, 0x00, 0x00, 0x00], 3, "cmp\tcx, 10"),
            (&[0x83, 0xff, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tdi, 14"),
            (&[0x83, 0xff, 0x09, 0x00, 0x00, 0x00], 3, "cmp\tdi, 9"),
            (&[0x83, 0xff, 0x0a, 0x00, 0x00, 0x00], 3, "cmp\tdi, a"),
            (&[0x39, 0xdf, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, bx"),
            (&[0x39, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, si"),
            // (&[0x83, 0xfa, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tdx, -1"),
            (&[0x83, 0xfa, 0x15, 0x00, 0x00, 0x00], 3, "cmp\tdx, 15"),
            (&[0x83, 0xfa, 0x1a, 0x00, 0x00, 0x00], 3, "cmp\tdx, 1a"),
            (&[0x83, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "cmp\tdx, 4"),
            // (&[0x81, 0xfe, 0x1c, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001c"),
            // (&[0x81, 0xfe, 0x1e, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001e"),
            // (&[0x81, 0xfe, 0x24, 0x00, 0x00, 0x00], 4, "cmp\tsi, 0024"),
            (&[0x83, 0xfe, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tsi, 14"),
            (&[0x83, 0xfe, 0x05, 0x00, 0x00, 0x00], 3, "cmp\tsi, 5"),
            (&[0x39, 0xfe, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tsi, di"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_arithmic_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_increase_decrease_instruction() {
        let testcases = [
            (&[0xff, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "inc\t[bp+4]"),
            (&[0xff, 0x46, 0xee, 0x00, 0x00, 0x00], 3, "inc\t[bp-12]"),
            (&[0xff, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "inc\t[bp-14]"),
            (&[0xff, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "inc\t[bp-18]"),
            (&[0xff, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "inc\t[bp-2]"),
            (&[0xff, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "inc\t[bp-a]"),
            (&[0xff, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "inc\t[bp-c]"),
            (&[0xff, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "inc\t[si+a]"),
            (&[0x40, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tax"),
            (&[0x43, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tbx"),
            (&[0x47, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdi"),
            (&[0x42, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdx"),
            (&[0x46, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tsi"),
            (&[0xff, 0x4e, 0xfc, 0x00, 0x00, 0x00], 3, "dec\t[bp-4]"),
            (&[0xff, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "dec\t[bp-6]"),
            (&[0xff, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "dec\t[bp-c]"),
            (&[0x4b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tbx"),
            (&[0x49, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tcx"),
            (&[0x4f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdi"),
            (&[0x4a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdx"),
            (&[0x4e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tsi"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) =
                Instruction::decode_increase_decrease_instruction(testcase.0)
            {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    #[test]
    fn test_decode_negation_instruction() {
        let testcases = [
            (&[0xf7, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "neg\t[bp-2]"),
            (&[0xf7, 0x5e, 0xfc, 0x00, 0x00, 0x00], 3, "neg\t[bp-4]"),
            (&[0xf7, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "neg\t[bp-a]"),
            (&[0xf7, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "neg\tax"),
            (&[0xf7, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "neg\tdx"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_negation_instruction(testcase.0) {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    #[test]
    fn test_decode_multiply_divide_instruction() {
        let testcases = [
            (&[0xf7, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "mul\tdi"),
            (&[0xf7, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "div\tbx"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) =
                Instruction::decode_multiply_divide_instruction(testcase.0)
            {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    // #[test]
    // fn test_decode_not_instruction() {
    //     let testcases: [_; 0] = [];

    //     for (i, testcase) in testcases.into_iter().enumerate() {
    //         if let (l, Some(instruction)) = Instruction::decode_not_instruction(testcase.0) {
    //             assert_eq!(
    //                 l, testcase.1,
    //                 "#{}, result: {}, expected: {}",
    //                 i, l, testcase.1
    //             );
    //             assert_eq!(
    //                 format!("{}", instruction),
    //                 testcase.2,
    //                 "#{}, result: {}, expected: {}",
    //                 i,
    //                 instruction,
    //                 testcase.2
    //             )
    //         }
    //     }
    // }

    #[test]
    fn test_decode_shfit_instruction() {
        let testcases = [
            (&[0xd1, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, 1"),
            (&[0xd3, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, cl"),
            (&[0xd1, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "shl\tax, 1"),
            (&[0xd1, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "shl\tbx, 1"),
            (&[0xd3, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdi, cl"),
            (&[0xd1, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdx, 1"),
            (&[0xd1, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "shr\tcx, 1"),
            (&[0xd1, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tbx, 1"),
            (&[0xd1, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tdx, 1"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_shift_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_logic_instruction() {
        let testcases = [
            (&[0x21, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "and\t[bx+si], ax"),
            (
                &[0x81, 0x64, 0x04, 0x7f, 0xfe, 0x00],
                5,
                "and\t[si+4], fe7f",
            ),
            (
                &[0x81, 0x64, 0x04, 0xff, 0xfe, 0x00],
                5,
                "and\t[si+4], feff",
            ),
            (
                &[0x81, 0x64, 0x04, 0x7f, 0xff, 0x00],
                5,
                "and\t[si+4], ff7f",
            ),
            (&[0x81, 0xe7, 0xef, 0xff, 0x00, 0x00], 4, "and\tdi, ffef"),
            (&[0x81, 0xe7, 0xfb, 0xff, 0x00, 0x00], 4, "and\tdi, fffb"),
            (&[0x81, 0xe2, 0x07, 0x00, 0x00, 0x00], 4, "and\tdx, 0007"),
            (&[0x23, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "and\tdx, [bp+6]"),
            (&[0x21, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "and\tdx, ax"),
            (&[0x81, 0xe2, 0x00, 0xfc, 0x00, 0x00], 4, "and\tdx, fc00"),
            (&[0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00], 4, "and\tdx, fffe"),
            (&[0x81, 0x4c, 0x04, 0x04, 0x00, 0x00], 5, "or\t[si+4], 0004"),
            (&[0x81, 0x4c, 0x04, 0x08, 0x00, 0x00], 5, "or\t[si+4], 0008"),
            (&[0x81, 0x4c, 0x04, 0x20, 0x00, 0x00], 5, "or\t[si+4], 0020"),
            (&[0x81, 0x4c, 0x04, 0x48, 0x00, 0x00], 5, "or\t[si+4], 0048"),
            (&[0x81, 0x4c, 0x04, 0x00, 0x01, 0x00], 5, "or\t[si+4], 0100"),
            (&[0x09, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, ax"),
            (&[0x09, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, di"),
            (&[0x81, 0xcf, 0x01, 0x00, 0x00, 0x00], 4, "or\tdi, 0001"),
            (&[0x81, 0xcf, 0x02, 0x00, 0x00, 0x00], 4, "or\tdi, 0002"),
            (&[0x81, 0xcf, 0x04, 0x00, 0x00, 0x00], 4, "or\tdi, 0004"),
            (&[0x81, 0xcf, 0x08, 0x00, 0x00, 0x00], 4, "or\tdi, 0008"),
            (&[0x81, 0xcf, 0x10, 0x00, 0x00, 0x00], 4, "or\tdi, 0010"),
            (&[0x81, 0xcf, 0x20, 0x00, 0x00, 0x00], 4, "or\tdi, 0020"),
            (&[0x81, 0xcf, 0x40, 0x00, 0x00, 0x00], 4, "or\tdi, 0040"),
            (&[0x81, 0xcf, 0x80, 0x00, 0x00, 0x00], 4, "or\tdi, 0080"),
            (&[0x81, 0xcf, 0x00, 0x01, 0x00, 0x00], 4, "or\tdi, 0100"),
            (&[0x81, 0xcf, 0x00, 0x02, 0x00, 0x00], 4, "or\tdi, 0200"),
            (&[0x81, 0xcf, 0x00, 0x04, 0x00, 0x00], 4, "or\tdi, 0400"),
            (&[0x81, 0xcf, 0x00, 0x10, 0x00, 0x00], 4, "or\tdi, 1000"),
            (&[0x09, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "or\tdi, di"),
            (&[0x0b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "or\tdx, [bp-8]"),
            (&[0x09, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, ax"),
            (&[0x09, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, dx"),
            (&[0x09, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "or\tsi, si"),
            (&[0x30, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "xor\tah, ah"),
            (&[0x31, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "xor\tax, ax"),
            (&[0x31, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbp, bp"),
            (&[0x31, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbx, bx"),
            (&[0x30, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdh, dh"),
            (&[0x31, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdi, di"),
            (&[0x31, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdx, dx"),
            (&[0x31, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tsi, si"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_logic_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    #[test]
    fn test_decode_test_instruction() {
        let testcases = [
            (
                &[0xf7, 0x47, 0x04, 0x00, 0x01, 0x00],
                5,
                "test\t[bx+4], 0100",
            ),
            (
                &[0xf7, 0x44, 0x04, 0x00, 0x01, 0x00],
                5,
                "test\t[si+4], 0100",
            ),
            (
                &[0xf7, 0x44, 0x04, 0x00, 0x02, 0x00],
                5,
                "test\t[si+4], 0200",
            ),
            // (&[0xa8, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "test\tal, 1"),
            // (&[0xf6, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "test\tbl, 1"),
            (&[0x85, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "test\tbx, bx"),
            // (&[0xf6, 0x46, 0x06, 0x02, 0x00, 0x00], 4, "test\tbyte [bp+6], 2"),
            // (&[0xf6, 0x46, 0x06, 0x04, 0x00, 0x00], 4, "test\tbyte [bp+6], 4"),
            // (&[0xf6, 0x46, 0x06, 0x08, 0x00, 0x00], 4, "test\tbyte [bp+6], 8"),
            // (&[0xf6, 0x44, 0x04, 0x01, 0x00, 0x00], 4, "test\tbyte [si+4], 1"),
            // (&[0xf6, 0x44, 0x04, 0x10, 0x00, 0x00], 4, "test\tbyte [si+4], 10"),
            // (&[0xf6, 0x44, 0x04, 0x02, 0x00, 0x00], 4, "test\tbyte [si+4], 2"),
            // (&[0xf6, 0x44, 0x04, 0x04, 0x00, 0x00], 4, "test\tbyte [si+4], 4"),
            // (&[0xf6, 0x44, 0x04, 0x40, 0x00, 0x00], 4, "test\tbyte [si+4], 40"),
            // (&[0xf6, 0x44, 0x04, 0x80, 0x00, 0x00], 4, "test\tbyte [si+4], 80"),
            (&[0xf7, 0xc7, 0x01, 0x00, 0x00, 0x00], 4, "test\tdi, 0001"),
            (&[0xf7, 0xc7, 0x02, 0x00, 0x00, 0x00], 4, "test\tdi, 0002"),
            (&[0xf7, 0xc7, 0x08, 0x00, 0x00, 0x00], 4, "test\tdi, 0008"),
            (&[0xf7, 0xc7, 0x10, 0x00, 0x00, 0x00], 4, "test\tdi, 0010"),
            (&[0xf7, 0xc7, 0x20, 0x00, 0x00, 0x00], 4, "test\tdi, 0020"),
            (&[0xf7, 0xc7, 0x40, 0x00, 0x00, 0x00], 4, "test\tdi, 0040"),
            (&[0xf7, 0xc7, 0x00, 0x01, 0x00, 0x00], 4, "test\tdi, 0100"),
            (&[0xf7, 0xc7, 0x00, 0x02, 0x00, 0x00], 4, "test\tdi, 0200"),
            (&[0xf7, 0xc7, 0x00, 0x04, 0x00, 0x00], 4, "test\tdi, 0400"),
            (&[0xf7, 0xc7, 0x00, 0x10, 0x00, 0x00], 4, "test\tdi, 1000"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_test_instruction(testcase.0) {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    #[test]
    fn test_decode_repeat_instruction() {
        let testcases = [
            (&[0xf2, 0xa4, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsb"),
            (&[0xf2, 0xa5, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsw"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_repeat_instruction(testcase.0) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                );
                assert_eq!(
                    l, testcase.1,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.1
                );
            }
        }
    }

    // #[test]
    // fn test_decode_string_instruction() {
    //     let testcases = [];

    //     for (i, testcase) in testcases.into_iter().enumerate() {
    //         if let (l, Some(instruction)) = Instruction::decode_string_instruction(testcase.0) {
    //             assert_eq!(
    //                 format!("{}", instruction),
    //                 testcase.2,
    //                 "#{}, result: {:?}, expected: {}",
    //                 i,
    //                 instruction,
    //                 testcase.2
    //             );
    //             assert_eq!(
    //                 l, testcase.1,
    //                 "#{}, {}, result: {:?}, expected: {}",
    //                 i, instruction, l, testcase.1
    //             );
    //         }
    //     }
    // }

    #[test]
    fn test_decode_jump_instruction() {
        let testcases = [
            (&[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0090"),
            (&[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a0"),
            (&[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a2"),
            (&[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a9"),
            (&[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00b7"),
            (&[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00e0"),
            (&[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0133"),
            (&[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0134"),
            (&[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0145"),
            (&[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0146"),
            (&[0xe9, 0x00, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
            (&[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
            (&[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0184"),
            (&[0xe9, 0x3e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01a2"),
            (&[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01ab"),
            (&[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01b9"),
            (&[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t029d"),
            (&[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02a6"),
            (&[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02b4"),
            (&[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
            (&[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
            (&[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
            (&[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
            (&[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
            (&[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
            (&[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
            (&[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
            (&[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
            (&[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
            (&[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
            (&[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
            (&[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
            (&[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
            (&[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
            (&[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
            (&[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
            (&[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
            (&[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
            (&[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
            (&[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
            (&[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07fc"),
            (&[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0805"),
            (&[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0813"),
            (&[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
            (&[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
            (&[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
            (&[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09e4"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09ed"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09fb"),
            (&[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
            (&[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
            (&[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
            (&[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
            (&[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
            (&[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
            (&[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b38"),
            (&[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b41"),
            (&[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b4f"),
            (&[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0bfe"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
            (&[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
            (&[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
            (&[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c07"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
            (&[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
            (&[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
            (&[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c15"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
            (&[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
            (&[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
            (&[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
            (&[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
            (&[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
            (&[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t10fb"),
            (&[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1104"),
            (&[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1112"),
            (&[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1195"),
            (&[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
            (&[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
            (&[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
            (&[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119e"),
            (&[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
            (&[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
            (&[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
            (&[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11ac"),
            (&[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x55, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xff, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "jmp\tbx"),
            (&[0xeb, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t003f"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t004f"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0058"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0059"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t005b"),
            (&[0xeb, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0062"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0066"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t006b"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00a9"),
            (&[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00ec"),
            (&[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00f5"),
            (&[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0103"),
            (&[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t010f"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0114"),
            (&[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0118"),
            (&[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0135"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0147"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0164"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0185"),
            (&[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t023b"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0244"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0252"),
            (&[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t025c"),
            (&[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0265"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0273"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0281"),
            (&[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t028a"),
            (&[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0298"),
            (&[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02b1"),
            (&[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02ba"),
            (&[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02c8"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02eb"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02f4"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0302"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0332"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033b"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0341"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0349"),
            (&[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t034a"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0358"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03f5"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03fe"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t040c"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0422"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t042b"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0439"),
            (&[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ac"),
            (&[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04b5"),
            (&[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04c3"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04e5"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ee"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04fc"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0519"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0522"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0530"),
            (&[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05ca"),
            (&[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05d3"),
            (&[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05e1"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0680"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0689"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0697"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06d2"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06db"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06e9"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0705"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t070e"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t071c"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0740"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0749"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0757"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0797"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07a0"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ae"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07e4"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ed"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07fb"),
            (&[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t080a"),
            (&[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0813"),
            (&[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0821"),
            (&[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
            (&[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
            (&[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
            (&[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
            (&[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
            (&[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0abb"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ac4"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ad2"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
            (&[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
            (&[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
            (&[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
            (&[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b9c"),
            (&[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ba5"),
            (&[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bb3"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0be2"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0beb"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bf9"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c00"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c09"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c17"),
            (&[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c57"),
            (&[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c60"),
            (&[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c6e"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c83"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c8c"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c95"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9a"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9e"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cac"),
            (&[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
            (&[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
            (&[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d07"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d10"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d1e"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d2d"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d36"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d44"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d7e"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d87"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d95"),
            (&[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0dd4"),
            (&[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ddd"),
            (&[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0deb"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e4c"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e55"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e63"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eb1"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eba"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ec8"),
            (&[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f0f"),
            (&[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f18"),
            (&[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f26"),
            (&[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
            (&[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1046"),
            (&[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
            (&[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1054"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
            (&[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1111"),
            (&[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t111a"),
            (&[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1128"),
            (&[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1136"),
            (&[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t113f"),
            (&[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t114d"),
            (&[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
            (&[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
            (&[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
            (&[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
            (&[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
            (&[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t119d"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11a6"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11b4"),
            (&[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
            (&[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
            (&[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
            (&[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
            (&[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
            (&[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1286"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t128f"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t129d"),
            (&[0xe8, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "call\t0039"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0047"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0047"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0050"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0051"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t005e"),
            (&[0xe8, 0x29, 0x00, 0x00, 0x00, 0x00], 3, "call\t0061"),
            (&[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0061"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0063"),
            (&[0xe8, 0x32, 0x00, 0x00, 0x00, 0x00], 3, "call\t006a"),
            (&[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t006a"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t006b"),
            (&[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0078"),
            (&[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0078"),
            (&[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t007d"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t007e"),
            (&[0xe8, 0x26, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
            (&[0xe8, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
            (&[0xe8, 0x3c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0087"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0088"),
            (&[0xe8, 0x41, 0x00, 0x00, 0x00, 0x00], 3, "call\t008c"),
            (&[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0095"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t009a"),
            (&[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t009c"),
            (&[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
            (&[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
            (&[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t009e"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t00a1"),
            (&[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00a5"),
            (&[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
            (&[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
            (&[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00b3"),
            (&[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
            (&[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
            (&[0xe8, 0x83, 0x00, 0x00, 0x00, 0x00], 3, "call\t00bb"),
            (&[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
            (&[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
            (&[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
            (&[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
            (&[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
            (&[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t00d8"),
            (&[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dc"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
            (&[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t0114"),
            (&[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t0114"),
            (&[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t011d"),
            (&[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t011d"),
            (&[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0121"),
            (&[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t012b"),
            (&[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t012b"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
            (&[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0133"),
            (&[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0171"),
            (&[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a0"),
            (&[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a0"),
            (&[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a9"),
            (&[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a9"),
            (&[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02b7"),
            (&[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02b7"),
            (&[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0802"),
            (&[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0802"),
            (&[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t080b"),
            (&[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t080b"),
            (&[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0819"),
            (&[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0819"),
            (&[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
            (&[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
            (&[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a66"),
            (&[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a66"),
            (&[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a74"),
            (&[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a74"),
            (&[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ac3"),
            (&[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0acc"),
            (&[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ada"),
            (&[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d65"),
            (&[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d6e"),
            (&[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d7c"),
            (&[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d81"),
            (&[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d8a"),
            (&[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d98"),
            (&[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
            (&[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
            (&[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0da5"),
            (&[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0da5"),
            (&[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0db3"),
            (&[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0db3"),
            (&[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dd7"),
            (&[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0de0"),
            (&[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dee"),
            (&[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e4f"),
            (&[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e58"),
            (&[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e66"),
            (&[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0eb6"),
            (&[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ebf"),
            (&[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
            (&[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
            (&[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
            (&[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ecd"),
            (&[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
            (&[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
            (&[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
            (&[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
            (&[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
            (&[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
            (&[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
            (&[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
            (&[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f02"),
            (&[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f02"),
            (&[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f10"),
            (&[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f10"),
            (&[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t106e"),
            (&[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1077"),
            (&[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1085"),
            (&[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t1095"),
            (&[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t109e"),
            (&[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10a7"),
            (&[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t10ac"),
            (&[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10b0"),
            (&[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10b8"),
            (&[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10be"),
            (&[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10c1"),
            (&[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10cf"),
            (&[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1147"),
            (&[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1150"),
            (&[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t115e"),
            (&[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11a5"),
            (&[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11ae"),
            (&[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11bc"),
            (&[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t11f7"),
            (&[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t1200"),
            (&[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t120e"),
            (&[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1250"),
            (&[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1259"),
            (&[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1267"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1288"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1291"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t129f"),
            (&[0xff, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "call\tbx"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_jump_instruction(testcase.0) {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    #[test]
    fn test_decode_return_instruction() {
        let testcases = [
            (&[0xc3, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "ret"),
            (&[0xc2, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "ret\t0008"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_return_instruction(testcase.0) {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    #[test]
    fn test_decode_conditional_jump_instruction() {
        let testcases = [
            (&[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0579"),
            (&[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0582"),
            (&[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0590"),
            (&[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b41"),
            (&[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b4a"),
            (&[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b58"),
            (&[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0be6"),
            (&[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bef"),
            (&[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bfd"),
            (&[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c95"),
            (&[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c9e"),
            (&[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cac"),
            (&[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cc5"),
            (&[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cce"),
            (&[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cdc"),
            (&[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d16"),
            (&[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d1f"),
            (&[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d2d"),
            (&[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0dfd"),
            (&[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e06"),
            (&[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e14"),
            (&[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t110f"),
            (&[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
            (&[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
            (&[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1121"),
            (&[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1126"),
            (&[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t112f"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t118b"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1194"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11a2"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11ed"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11f6"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1204"),
            (&[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0af5"),
            (&[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0afe"),
            (&[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0b0c"),
            (&[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bcd"),
            (&[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bd6"),
            (&[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be4"),
            (&[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be6"),
            (&[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bef"),
            (&[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bfd"),
            (&[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc0"),
            (&[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc9"),
            (&[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cd7"),
            (&[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e02"),
            (&[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e0b"),
            (&[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e19"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t118b"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1194"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11a2"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11ed"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11f6"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1204"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0074"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007d"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007e"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t008b"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0090"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t00ce"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t00fd"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t010f"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t013e"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0147"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t014d"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0155"),
            (&[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0168"),
            (&[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0171"),
            (&[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t017f"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0191"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t019a"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t01a8"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01d8"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e1"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e2"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01eb"),
            (&[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ee"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ef"),
            (&[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f7"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f9"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t01fe"),
            (&[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t0205"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0207"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0215"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0223"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t022c"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t023a"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t029b"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02a4"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02b2"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t02ff"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0308"),
            (&[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t030a"),
            (&[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0313"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0316"),
            (&[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0321"),
            (&[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0332"),
            (&[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t033b"),
            (&[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0349"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t036a"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0373"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0381"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ac"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03b5"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c1"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c3"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ca"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03cb"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d4"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d8"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03e2"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0436"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t043f"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t044d"),
            (&[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t045c"),
            (&[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0465"),
            (&[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0473"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t047a"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0483"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0491"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04bb"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04c4"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04d2"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04e5"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04ee"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04fc"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0562"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t056b"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0579"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05da"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05e3"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05f1"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t05fa"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0603"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0611"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0641"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t064f"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0689"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0692"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0697"),
            (&[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t069d"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
            (&[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a6"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06ae"),
            (&[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06b4"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t070b"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0714"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0719"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0730"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0754"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t075d"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t076b"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07aa"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07b3"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07c1"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07f7"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0800"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t080e"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0879"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0882"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t088c"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0890"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0895"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t089e"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08a3"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08ac"),
            (&[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08cd"),
            (&[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08d6"),
            (&[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08e4"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t093c"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0945"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0953"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t095d"),
            (&[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0964"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0966"),
            (&[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t096d"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0974"),
            (&[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t097b"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09c3"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09cc"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09d9"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09da"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09e2"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09f0"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a2b"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a34"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a42"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b02"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b0b"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b19"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bdc"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0be5"),
            (&[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bed"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf3"),
            (&[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf6"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bfe"),
            (&[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c04"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c07"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c15"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c7d"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c86"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c94"),
            (&[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c95"),
            (&[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c9e"),
            (&[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0cac"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d16"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d1f"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d26"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2d"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2f"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d3d"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d46"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d4f"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d5d"),
            (&[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
            (&[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
            (&[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
            (&[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0dd2"),
            (&[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0ddb"),
            (&[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0de9"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e35"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e3e"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e4c"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f50"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f59"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f67"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f73"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f7c"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f8a"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fa7"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb0"),
            (&[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb2"),
            (&[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbb"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbd"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbe"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc6"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc8"),
            (&[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc9"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd1"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd4"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fdf"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t100a"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1013"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1021"),
            (&[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
            (&[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
            (&[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1241"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t124a"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1258"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1268"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1271"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t127f"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t005e"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0067"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0068"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0075"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t007a"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t00b8"),
            (&[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t010a"),
            (&[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0113"),
            (&[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0121"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02e1"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02ea"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02f8"),
            (&[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0399"),
            (&[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03a2"),
            (&[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03b0"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0418"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0421"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t042f"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t066f"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0678"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0686"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06c1"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06ca"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06d8"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06f4"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06fd"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t070b"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0736"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t073f"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t074d"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0786"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t078f"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t079d"),
            (&[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07af"),
            (&[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07b8"),
            (&[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07c6"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07da"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07e3"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07f1"),
            (&[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t1143"),
            (&[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t114c"),
            (&[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t115a"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t005b"),
            (&[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07bb"),
            (&[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07c4"),
            (&[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07d2"),
            (&[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0831"),
            (&[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0838"),
            (&[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t083a"),
            (&[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0841"),
            (&[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0848"),
            (&[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t084f"),
            (&[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a4f"),
            (&[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a58"),
            (&[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a66"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0aac"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab5"),
            (&[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab8"),
            (&[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac1"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac3"),
            (&[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0acf"),
            (&[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0df3"),
            (&[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0dfc"),
            (&[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0e0a"),
            (&[0x73, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0028"),
            (&[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b5f"),
            (&[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b68"),
            (&[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b76"),
            (&[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d7b"),
            (&[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d84"),
            (&[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d92"),
            (&[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1268"),
            (&[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1271"),
            (&[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t127f"),
            (&[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0aeb"),
            (&[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0af4"),
            (&[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0b02"),
            (&[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cc5"),
            (&[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cce"),
            (&[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cdc"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1187"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1190"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t119e"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11e9"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11f2"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1200"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
            (&[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00ea"),
            (&[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00f3"),
            (&[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0101"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t01fe"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0207"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0211"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0215"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t021a"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0228"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0238"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0241"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t024f"),
            (&[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
            (&[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
            (&[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
            (&[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
            (&[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
            (&[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
            (&[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t029b"),
            (&[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02a4"),
            (&[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02b2"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02c4"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02cd"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02db"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0305"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t030e"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t031c"),
            (&[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0399"),
            (&[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03a2"),
            (&[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b0"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b7"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03c0"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03ce"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t043c"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0445"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0453"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04a6"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04af"),
            (&[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bb"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bd"),
            (&[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c4"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c6"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04cf"),
            (&[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04d2"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04db"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04dd"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04e4"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04f2"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0515"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t051e"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t052c"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0562"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056b"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056d"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0576"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0579"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0584"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0600"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0609"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0617"),
            (&[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t061e"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0621"),
            (&[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0627"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t062a"),
            (&[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0635"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0638"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0647"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0650"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t065e"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
            (&[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
            (&[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
            (&[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t075a"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0763"),
            (&[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0765"),
            (&[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t076e"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0771"),
            (&[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t077c"),
            (&[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07bb"),
            (&[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07c4"),
            (&[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07d2"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0867"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0870"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0879"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t087e"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0882"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0890"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08bd"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08c6"),
            (&[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08cd"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d4"),
            (&[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d6"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e3"),
            (&[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e4"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08ec"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08f9"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08fa"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0902"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0910"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t093c"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0945"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0953"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t096d"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0976"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0984"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09c3"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09cc"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09da"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a2b"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a34"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a42"),
            (&[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a4f"),
            (&[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a58"),
            (&[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a66"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a95"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a9e"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0aac"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b33"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b3c"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b4a"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b7a"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b83"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b91"),
            (&[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b93"),
            (&[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b9c"),
            (&[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0baa"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c1f"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c28"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c31"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c36"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c3a"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c48"),
            (&[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c8e"),
            (&[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c97"),
            (&[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ca5"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cd6"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cdf"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ced"),
            (&[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d46"),
            (&[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d4f"),
            (&[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d5d"),
            (&[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d62"),
            (&[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d6b"),
            (&[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d79"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e0f"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e18"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e26"),
            (&[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e68"),
            (&[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e71"),
            (&[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e7f"),
            (&[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f3d"),
            (&[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f46"),
            (&[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f54"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f73"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f7c"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f8a"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f9c"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fa5"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fb3"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t100a"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1013"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1021"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t102c"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1035"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1043"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t110f"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1118"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1126"),
            (&[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1129"),
            (&[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1132"),
            (&[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1140"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1141"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t114a"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1158"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1169"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1172"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1180"),
            (&[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11cb"),
            (&[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11d4"),
            (&[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11e2"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0058"),
            (&[0x7d, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0082"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0111"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0123"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0161"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01cc"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01d5"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01e3"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03ac"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03b5"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03c3"),
            (&[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07c3"),
            (&[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07cc"),
            (&[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07da"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0831"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t083a"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0848"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t085b"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0864"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0872"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dcb"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dd4"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0de2"),
            (&[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e02"),
            (&[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e0b"),
            (&[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e19"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e49"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e52"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e60"),
            (&[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eab"),
            (&[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eb4"),
            (&[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0ec2"),
            (&[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f37"),
            (&[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f40"),
            (&[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f4e"),
            (&[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t106b"),
            (&[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1074"),
            (&[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1082"),
            (&[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t010a"),
            (&[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0113"),
            (&[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0121"),
            (&[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t062f"),
            (&[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0638"),
            (&[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0646"),
            (&[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fe1"),
            (&[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fea"),
            (&[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0ff8"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1270"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1279"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1287"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) =
                Instruction::decode_conditional_jump_instruction(testcase.0)
            {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    #[test]
    fn test_decode_interrupt_instruction() {
        let testcases = [(&[0xcd, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "int\t20")];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_interrupt_instruction(testcase.0) {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }

    // #[test]
    // fn test_decode_escape_instruction() {
    //     let testcases: [_; 0] = [];

    //     for (i, testcase) in testcases.into_iter().enumerate() {
    //         if let (l, Some(instruction)) = Instruction::decode_escape_instruction(testcase.0) {
    //             assert_eq!(
    //                 l, testcase.1,
    //                 "#{}, result: {}, expected: {}",
    //                 i, l, testcase.1
    //             );
    //             assert_eq!(
    //                 format!("{}", instruction),
    //                 testcase.2,
    //                 "#{}, result: {}, expected: {}",
    //                 i,
    //                 instruction,
    //                 testcase.2
    //             )
    //         }
    //     }
    // }

    #[test]
    fn test_decode() {
        let testcases = [
            (&[0x11, 0xc9, 0x00, 0x00, 0x00, 0x00], 2, "adc\tcx, cx"),
            (&[0x83, 0x46, 0xec, 0x02, 0x00, 0x00], 4, "add\t[bp-14], 2"),
            (&[0x01, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "add\t[bp-14], dx"),
            (&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "add\t[bx+si], al"),
            (&[0x00, 0x55, 0x89, 0x00, 0x00, 0x00], 3, "add\t[di-77], dl"),
            (&[0x83, 0x05, 0x02, 0x00, 0x00, 0x00], 3, "add\t[di], 2"),
            (&[0x83, 0x05, 0x04, 0x00, 0x00, 0x00], 3, "add\t[di], 4"),
            (&[0x03, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "add\tax, [bp-4]"),
            (&[0x83, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "add\tbx, 1"),
            (&[0x83, 0xc3, 0x02, 0x00, 0x00, 0x00], 3, "add\tbx, 2"),
            (&[0x83, 0xc3, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, 4"),
            (&[0x03, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+4]"),
            (&[0x03, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+6]"),
            (&[0x01, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "add\tbx, dx"),
            (&[0x00, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "add\tcl, ch"),
            (&[0x83, 0xc1, 0x02, 0x00, 0x00, 0x00], 3, "add\tcx, 2"),
            (&[0x01, 0xc1, 0x00, 0x00, 0x00, 0x00], 2, "add\tcx, ax"),
            (&[0x01, 0xcf, 0x00, 0x00, 0x00, 0x00], 2, "add\tdi, cx"),
            (&[0x81, 0xc2, 0xff, 0x03, 0x00, 0x00], 4, "add\tdx, 03ff"),
            (&[0x83, 0xc2, 0x02, 0x00, 0x00, 0x00], 3, "add\tdx, 2"),
            (&[0x83, 0xc2, 0x30, 0x00, 0x00, 0x00], 3, "add\tdx, 30"),
            (&[0x03, 0x16, 0x30, 0x00, 0x00, 0x00], 4, "add\tdx, [0030]"),
            (&[0x03, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "add\tdx, [0126]"),
            (&[0x03, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "add\tdx, [0128]"),
            (&[0x03, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "add\tdx, [012e]"),
            (&[0x03, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "add\tdx, [0214]"),
            (&[0x03, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "add\tdx, [0216]"),
            (&[0x03, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "add\tdx, [021c]"),
            (&[0x03, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "add\tdx, [bp+6]"),
            (&[0x03, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "add\tdx, [bp-a]"),
            (&[0x01, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "add\tdx, si"),
            (&[0x83, 0xc6, 0x02, 0x00, 0x00, 0x00], 3, "add\tsi, 2"),
            (&[0x01, 0xce, 0x00, 0x00, 0x00, 0x00], 2, "add\tsi, cx"),
            (&[0x83, 0xc4, 0x06, 0x00, 0x00, 0x00], 3, "add\tsp, 6"),
            (&[0x83, 0xc4, 0x08, 0x00, 0x00, 0x00], 3, "add\tsp, 8"),
            (&[0x83, 0xc4, 0x0a, 0x00, 0x00, 0x00], 3, "add\tsp, a"),
            (&[0x83, 0xc4, 0x0c, 0x00, 0x00, 0x00], 3, "add\tsp, c"),
            (&[0x21, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "and\t[bx+si], ax"),
            (
                &[0x81, 0x64, 0x04, 0x7f, 0xfe, 0x00],
                5,
                "and\t[si+4], fe7f",
            ),
            (
                &[0x81, 0x64, 0x04, 0xff, 0xfe, 0x00],
                5,
                "and\t[si+4], feff",
            ),
            (
                &[0x81, 0x64, 0x04, 0x7f, 0xff, 0x00],
                5,
                "and\t[si+4], ff7f",
            ),
            (&[0x81, 0xe7, 0xef, 0xff, 0x00, 0x00], 4, "and\tdi, ffef"),
            (&[0x81, 0xe7, 0xfb, 0xff, 0x00, 0x00], 4, "and\tdi, fffb"),
            (&[0x81, 0xe2, 0x07, 0x00, 0x00, 0x00], 4, "and\tdx, 0007"),
            (&[0x23, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "and\tdx, [bp+6]"),
            (&[0x21, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "and\tdx, ax"),
            (&[0x81, 0xe2, 0x00, 0xfc, 0x00, 0x00], 4, "and\tdx, fc00"),
            (&[0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00], 4, "and\tdx, fffe"),
            (&[0xe8, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "call\t0039"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0047"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0047"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0050"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0051"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t005e"),
            (&[0xe8, 0x29, 0x00, 0x00, 0x00, 0x00], 3, "call\t0061"),
            (&[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0061"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0063"),
            (&[0xe8, 0x32, 0x00, 0x00, 0x00, 0x00], 3, "call\t006a"),
            (&[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t006a"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t006b"),
            (&[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0078"),
            (&[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0078"),
            (&[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t007d"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t007e"),
            (&[0xe8, 0x26, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
            (&[0xe8, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
            (&[0xe8, 0x3c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0087"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0088"),
            (&[0xe8, 0x41, 0x00, 0x00, 0x00, 0x00], 3, "call\t008c"),
            (&[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0095"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t009a"),
            (&[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t009c"),
            (&[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
            (&[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
            (&[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t009e"),
            (&[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t00a1"),
            (&[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00a5"),
            (&[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
            (&[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
            (&[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00b3"),
            (&[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
            (&[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
            (&[0xe8, 0x83, 0x00, 0x00, 0x00, 0x00], 3, "call\t00bb"),
            (&[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
            (&[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
            (&[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
            (&[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
            (&[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
            (&[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
            (&[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t00d8"),
            (&[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dc"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
            (&[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t0114"),
            (&[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t0114"),
            (&[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t011d"),
            (&[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t011d"),
            (&[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0121"),
            (&[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t012b"),
            (&[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t012b"),
            (&[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
            (&[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0133"),
            (&[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0171"),
            (&[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a0"),
            (&[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a0"),
            (&[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a9"),
            (&[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a9"),
            (&[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02b7"),
            (&[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02b7"),
            (&[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0802"),
            (&[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0802"),
            (&[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t080b"),
            (&[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t080b"),
            (&[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0819"),
            (&[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0819"),
            (&[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
            (&[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
            (&[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
            (&[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
            (&[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
            (&[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a66"),
            (&[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a66"),
            (&[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a74"),
            (&[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a74"),
            (&[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ac3"),
            (&[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0acc"),
            (&[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ada"),
            (&[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b20"),
            (&[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b29"),
            (&[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b37"),
            (&[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
            (&[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
            (&[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
            (&[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d65"),
            (&[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d6e"),
            (&[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d7c"),
            (&[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d81"),
            (&[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d8a"),
            (&[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d98"),
            (&[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
            (&[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
            (&[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0da5"),
            (&[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0da5"),
            (&[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0db3"),
            (&[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0db3"),
            (&[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dd7"),
            (&[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0de0"),
            (&[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dee"),
            (&[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e15"),
            (&[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
            (&[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
            (&[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e4f"),
            (&[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e58"),
            (&[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e66"),
            (&[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
            (&[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
            (&[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
            (&[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0eb6"),
            (&[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ebf"),
            (&[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
            (&[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
            (&[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
            (&[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ecd"),
            (&[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
            (&[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
            (&[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
            (&[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
            (&[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
            (&[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
            (&[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
            (&[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
            (&[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f02"),
            (&[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f02"),
            (&[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f10"),
            (&[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f10"),
            (&[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t106e"),
            (&[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1077"),
            (&[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1085"),
            (&[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t1095"),
            (&[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t109e"),
            (&[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10a7"),
            (&[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t10ac"),
            (&[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10b0"),
            (&[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10b8"),
            (&[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10be"),
            (&[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10c1"),
            (&[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10cf"),
            (&[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1147"),
            (&[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1150"),
            (&[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t115e"),
            (&[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11a5"),
            (&[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11ae"),
            (&[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11bc"),
            (&[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t11f7"),
            (&[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t1200"),
            (&[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t120e"),
            (&[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1250"),
            (&[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1259"),
            (&[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1267"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1288"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1291"),
            (&[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t129f"),
            (&[0xff, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "call\tbx"),
            (&[0x98, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "cbw"),
            (&[0xfc, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "cld"),
            (&[0x83, 0x3e, 0x06, 0x00, 0x00, 0x00], 5, "cmp\t[0006], 0"),
            (&[0x83, 0x3e, 0x0c, 0x00, 0x00, 0x00], 5, "cmp\t[000c], 0"),
            (&[0x83, 0x3e, 0x0e, 0x00, 0x00, 0x00], 5, "cmp\t[000e], 0"),
            (&[0x83, 0x3e, 0x14, 0x00, 0x00, 0x00], 5, "cmp\t[0014], 0"),
            (&[0x83, 0x3e, 0x12, 0x02, 0x00, 0x00], 5, "cmp\t[0212], 0"),
            (&[0x83, 0x3e, 0x14, 0x02, 0x00, 0x00], 5, "cmp\t[0214], 0"),
            (&[0x39, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], bx"),
            (&[0x39, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], dx"),
            (&[0x39, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], bx"),
            (&[0x39, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], dx"),
            (&[0x83, 0x3e, 0x1a, 0x02, 0x00, 0x00], 5, "cmp\t[021a], 0"),
            (&[0x39, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], bx"),
            (&[0x39, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], dx"),
            (&[0x83, 0x7e, 0x04, 0x00, 0x00, 0x00], 4, "cmp\t[bp+4], 0"),
            (&[0x39, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], dx"),
            (&[0x39, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], si"),
            (&[0x83, 0x7e, 0x06, 0x00, 0x00, 0x00], 4, "cmp\t[bp+6], 0"),
            (&[0x83, 0x7e, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\t[bp+c], 0"),
            (&[0x83, 0x7e, 0x0c, 0x01, 0x00, 0x00], 4, "cmp\t[bp+c], 1"),
            (&[0x83, 0x7e, 0x0e, 0x00, 0x00, 0x00], 4, "cmp\t[bp+e], 0"),
            (&[0x83, 0x7e, 0xee, 0x00, 0x00, 0x00], 4, "cmp\t[bp-12], 0"),
            (&[0x83, 0x7e, 0xec, 0x00, 0x00, 0x00], 4, "cmp\t[bp-14], 0"),
            (&[0x39, 0x46, 0xea, 0x00, 0x00, 0x00], 3, "cmp\t[bp-16], ax"),
            (&[0x83, 0x7e, 0xfe, 0x00, 0x00, 0x00], 4, "cmp\t[bp-2], 0"),
            (&[0x39, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bp-2], dx"),
            (&[0x83, 0x7e, 0xfc, 0x00, 0x00, 0x00], 4, "cmp\t[bp-4], 0"),
            (&[0x83, 0x7e, 0xfc, 0x09, 0x00, 0x00], 4, "cmp\t[bp-4], 9"),
            (&[0x83, 0x7e, 0xfa, 0x00, 0x00, 0x00], 4, "cmp\t[bp-6], 0"),
            (&[0x39, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], bx"),
            (&[0x39, 0x7e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], di"),
            (&[0x39, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], si"),
            (&[0x83, 0x7e, 0xf8, 0x25, 0x00, 0x00], 4, "cmp\t[bp-8], 25"),
            (&[0x83, 0x7e, 0xf8, 0x58, 0x00, 0x00], 4, "cmp\t[bp-8], 58"),
            (&[0x83, 0x7e, 0xf8, 0x70, 0x00, 0x00], 4, "cmp\t[bp-8], 70"),
            (&[0x83, 0x7e, 0xf8, 0x78, 0x00, 0x00], 4, "cmp\t[bp-8], 78"),
            (&[0x83, 0x7e, 0xf6, 0x00, 0x00, 0x00], 4, "cmp\t[bp-a], 0"),
            (&[0x39, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "cmp\t[bp-a], si"),
            (&[0x83, 0x7e, 0xf4, 0x00, 0x00, 0x00], 4, "cmp\t[bp-c], 0"),
            (
                &[0x81, 0x7e, 0xf4, 0x01, 0x04, 0x00],
                5,
                "cmp\t[bp-c], 0401",
            ),
            (&[0x83, 0x7e, 0xf4, 0x02, 0x00, 0x00], 4, "cmp\t[bp-c], 2"),
            (&[0x83, 0xbf, 0x34, 0x00, 0x00, 0x00], 5, "cmp\t[bx+34], 0"),
            (&[0x83, 0xbf, 0x36, 0x00, 0x00, 0x00], 5, "cmp\t[bx+36], 0"),
            (&[0x83, 0xbf, 0x3c, 0x00, 0x00, 0x00], 5, "cmp\t[bx+3c], 0"),
            (&[0x39, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bx-2], si"),
            (&[0x81, 0x3f, 0x53, 0x53, 0x00, 0x00], 4, "cmp\t[bx], 5353"),
            (&[0x39, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[di-2], dx"),
            (&[0x83, 0x7c, 0x02, 0x00, 0x00, 0x00], 4, "cmp\t[si+2], 0"),
            (&[0x39, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "cmp\t[si+6], dx"),
            (&[0x83, 0x7c, 0x08, 0x00, 0x00, 0x00], 4, "cmp\t[si+8], 0"),
            (&[0x39, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "cmp\t[si], dx"),
            (&[0x3d, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "cmp\tax, 0001"),
            (&[0x3b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, [bx]"),
            (&[0x39, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, cx"),
            (&[0x3d, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tax, ffff"),
            (&[0x81, 0xfb, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\tbx, 000c"),
            (&[0x81, 0xfb, 0x14, 0x00, 0x00, 0x00], 4, "cmp\tbx, 0014"),
            (&[0x81, 0xfb, 0x12, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0212"),
            (&[0x81, 0xfb, 0x14, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0214"),
            (&[0x81, 0xfb, 0x1a, 0x02, 0x00, 0x00], 4, "cmp\tbx, 021a"),
            (
                &[0x80, 0x7e, 0x0a, 0x58, 0x00, 0x00],
                4,
                "cmp byte\t[bp+a], 58",
            ),
            (
                &[0x80, 0x7e, 0x0a, 0x6f, 0x00, 0x00],
                4,
                "cmp byte\t[bp+a], 6f",
            ),
            (
                &[0x80, 0x7e, 0x0a, 0x70, 0x00, 0x00],
                4,
                "cmp byte\t[bp+a], 70",
            ),
            (
                &[0x80, 0x7e, 0x0a, 0x78, 0x00, 0x00],
                4,
                "cmp byte\t[bp+a], 78",
            ),
            (
                &[0x80, 0x3f, 0x00, 0x00, 0x00, 0x00],
                3,
                "cmp byte\t[bx], 0",
            ),
            (
                &[0x80, 0x3f, 0x20, 0x00, 0x00, 0x00],
                3,
                "cmp byte\t[bx], 20",
            ),
            (
                &[0x80, 0x3f, 0x2b, 0x00, 0x00, 0x00],
                3,
                "cmp byte\t[bx], 2b",
            ),
            (
                &[0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00],
                3,
                "cmp byte\t[bx], 2d",
            ),
            (
                &[0x80, 0x3f, 0x2e, 0x00, 0x00, 0x00],
                3,
                "cmp byte\t[bx], 2e",
            ),
            (
                &[0x80, 0x3c, 0x2a, 0x00, 0x00, 0x00],
                3,
                "cmp byte\t[si], 2a",
            ),
            (&[0x83, 0xf9, 0x10, 0x00, 0x00, 0x00], 3, "cmp\tcx, 10"),
            (&[0x83, 0xff, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tdi, 14"),
            (&[0x83, 0xff, 0x09, 0x00, 0x00, 0x00], 3, "cmp\tdi, 9"),
            (&[0x83, 0xff, 0x0a, 0x00, 0x00, 0x00], 3, "cmp\tdi, a"),
            (&[0x39, 0xdf, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, bx"),
            (&[0x39, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, si"),
            (&[0x83, 0xfa, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tdx, -1"),
            (&[0x83, 0xfa, 0x15, 0x00, 0x00, 0x00], 3, "cmp\tdx, 15"),
            (&[0x83, 0xfa, 0x1a, 0x00, 0x00, 0x00], 3, "cmp\tdx, 1a"),
            (&[0x83, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "cmp\tdx, 4"),
            (&[0x81, 0xfe, 0x1c, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001c"),
            (&[0x81, 0xfe, 0x1e, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001e"),
            (&[0x81, 0xfe, 0x24, 0x00, 0x00, 0x00], 4, "cmp\tsi, 0024"),
            (&[0x83, 0xfe, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tsi, 14"),
            (&[0x83, 0xfe, 0x05, 0x00, 0x00, 0x00], 3, "cmp\tsi, 5"),
            (&[0x39, 0xfe, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tsi, di"),
            (&[0x99, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "cwd"),
            (&[0xff, 0x4e, 0xfc, 0x00, 0x00, 0x00], 3, "dec\t[bp-4]"),
            (&[0xff, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "dec\t[bp-6]"),
            (&[0xff, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "dec\t[bp-c]"),
            (&[0x4b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tbx"),
            (&[0x49, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tcx"),
            (&[0x4f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdi"),
            (&[0x4a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdx"),
            (&[0x4e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tsi"),
            (&[0xf7, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "div\tbx"),
            (&[0xf4, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "hlt"),
            (&[0xec, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "in\tal, dx"),
            (&[0xe5, 0x83, 0x00, 0x00, 0x00, 0x00], 2, "in\tax, 83"),
            (&[0xff, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "inc\t[bp+4]"),
            (&[0xff, 0x46, 0xee, 0x00, 0x00, 0x00], 3, "inc\t[bp-12]"),
            (&[0xff, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "inc\t[bp-14]"),
            (&[0xff, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "inc\t[bp-18]"),
            (&[0xff, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "inc\t[bp-2]"),
            (&[0xff, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "inc\t[bp-a]"),
            (&[0xff, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "inc\t[bp-c]"),
            (&[0xff, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "inc\t[si+a]"),
            (&[0x40, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tax"),
            (&[0x43, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tbx"),
            (&[0x47, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdi"),
            (&[0x42, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdx"),
            (&[0x46, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tsi"),
            (&[0xcd, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "int\t20"),
            (&[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0579"),
            (&[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0582"),
            (&[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0590"),
            (&[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b41"),
            (&[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b4a"),
            (&[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b58"),
            (&[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0be6"),
            (&[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bef"),
            (&[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bfd"),
            (&[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c95"),
            (&[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c9e"),
            (&[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cac"),
            (&[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cc5"),
            (&[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cce"),
            (&[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cdc"),
            (&[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d16"),
            (&[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d1f"),
            (&[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d2d"),
            (&[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0dfd"),
            (&[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e06"),
            (&[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e14"),
            (&[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t110f"),
            (&[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
            (&[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
            (&[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1121"),
            (&[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1126"),
            (&[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t112f"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t118b"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1194"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11a2"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11ed"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11f6"),
            (&[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1204"),
            (&[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0af5"),
            (&[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0afe"),
            (&[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0b0c"),
            (&[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bcd"),
            (&[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bd6"),
            (&[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be4"),
            (&[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be6"),
            (&[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bef"),
            (&[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bfd"),
            (&[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc0"),
            (&[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc9"),
            (&[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cd7"),
            (&[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e02"),
            (&[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e0b"),
            (&[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e19"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t118b"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1194"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11a2"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11ed"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11f6"),
            (&[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1204"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0074"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007d"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007e"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t008b"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0090"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t00ce"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t00fd"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t010f"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t013e"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0147"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t014d"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0155"),
            (&[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0168"),
            (&[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0171"),
            (&[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t017f"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0191"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t019a"),
            (&[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t01a8"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01d8"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e1"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e2"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01eb"),
            (&[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ee"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ef"),
            (&[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f7"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f9"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t01fe"),
            (&[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t0205"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0207"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0215"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0223"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t022c"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t023a"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t029b"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02a4"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02b2"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t02ff"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0308"),
            (&[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t030a"),
            (&[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0313"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0316"),
            (&[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0321"),
            (&[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0332"),
            (&[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t033b"),
            (&[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0349"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t036a"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0373"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0381"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ac"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03b5"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c1"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c3"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ca"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03cb"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d4"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d8"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03e2"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0436"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t043f"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t044d"),
            (&[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t045c"),
            (&[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0465"),
            (&[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0473"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t047a"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0483"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0491"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04bb"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04c4"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04d2"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04e5"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04ee"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04fc"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0562"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t056b"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0579"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05da"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05e3"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05f1"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t05fa"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0603"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0611"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
            (&[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0641"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t064f"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0689"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0692"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0697"),
            (&[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t069d"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
            (&[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a6"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06ae"),
            (&[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06b4"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t070b"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0714"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0719"),
            (&[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0730"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0754"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t075d"),
            (&[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t076b"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07aa"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07b3"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07c1"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07f7"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0800"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t080e"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0879"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0882"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t088c"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0890"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0895"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t089e"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08a3"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08ac"),
            (&[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08cd"),
            (&[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08d6"),
            (&[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08e4"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t093c"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0945"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0953"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t095d"),
            (&[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0964"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0966"),
            (&[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t096d"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0974"),
            (&[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t097b"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09c3"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09cc"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09d9"),
            (&[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09da"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09e2"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09f0"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a2b"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a34"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a42"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b02"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b0b"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b19"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bdc"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0be5"),
            (&[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bed"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf3"),
            (&[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf6"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bfe"),
            (&[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c04"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c07"),
            (&[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c15"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c7d"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c86"),
            (&[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c94"),
            (&[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c95"),
            (&[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c9e"),
            (&[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0cac"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d16"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d1f"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d26"),
            (&[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2d"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2f"),
            (&[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d3d"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d46"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d4f"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d5d"),
            (&[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
            (&[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
            (&[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
            (&[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
            (&[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0dd2"),
            (&[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0ddb"),
            (&[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0de9"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e35"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e3e"),
            (&[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e4c"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
            (&[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f50"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f59"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f67"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f73"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f7c"),
            (&[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f8a"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fa7"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb0"),
            (&[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb2"),
            (&[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbb"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbd"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbe"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc6"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc8"),
            (&[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc9"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd1"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd4"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fdf"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t100a"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1013"),
            (&[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1021"),
            (&[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
            (&[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
            (&[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
            (&[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1241"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t124a"),
            (&[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1258"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1268"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1271"),
            (&[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t127f"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t005e"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0067"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0068"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0075"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t007a"),
            (&[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t00b8"),
            (&[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t010a"),
            (&[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0113"),
            (&[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0121"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02e1"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02ea"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02f8"),
            (&[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0399"),
            (&[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03a2"),
            (&[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03b0"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0418"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0421"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t042f"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t066f"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0678"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0686"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06c1"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06ca"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06d8"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06f4"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06fd"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t070b"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0736"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t073f"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t074d"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0786"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t078f"),
            (&[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t079d"),
            (&[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07af"),
            (&[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07b8"),
            (&[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07c6"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07da"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07e3"),
            (&[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07f1"),
            (&[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t1143"),
            (&[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t114c"),
            (&[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t115a"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t005b"),
            (&[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07bb"),
            (&[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07c4"),
            (&[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07d2"),
            (&[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0831"),
            (&[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0838"),
            (&[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t083a"),
            (&[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0841"),
            (&[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0848"),
            (&[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t084f"),
            (&[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a4f"),
            (&[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a58"),
            (&[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a66"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0aac"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab5"),
            (&[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab8"),
            (&[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac1"),
            (&[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac3"),
            (&[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0acf"),
            (&[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0df3"),
            (&[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0dfc"),
            (&[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0e0a"),
            (&[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0090"),
            (&[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a0"),
            (&[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a2"),
            (&[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a9"),
            (&[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00b7"),
            (&[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00e0"),
            (&[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0133"),
            (&[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0134"),
            (&[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
            (&[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0145"),
            (&[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0146"),
            (&[0xe9, 0x00, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
            (&[0xe9, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
            (&[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
            (&[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0184"),
            (&[0xe9, 0x3e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
            (&[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01a2"),
            (&[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01ab"),
            (&[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01b9"),
            (&[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t029d"),
            (&[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02a6"),
            (&[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
            (&[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02b4"),
            (&[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
            (&[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
            (&[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
            (&[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
            (&[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
            (&[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
            (&[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
            (&[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
            (&[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
            (&[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
            (&[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
            (&[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
            (&[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
            (&[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
            (&[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
            (&[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
            (&[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
            (&[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
            (&[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
            (&[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
            (&[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
            (&[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
            (&[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
            (&[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
            (&[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
            (&[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
            (&[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07fc"),
            (&[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
            (&[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0805"),
            (&[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
            (&[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0813"),
            (&[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
            (&[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
            (&[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
            (&[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09e4"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09ed"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09fb"),
            (&[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
            (&[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
            (&[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
            (&[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
            (&[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
            (&[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
            (&[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
            (&[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
            (&[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
            (&[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b38"),
            (&[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b41"),
            (&[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b4f"),
            (&[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0bfe"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
            (&[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
            (&[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
            (&[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c07"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
            (&[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
            (&[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
            (&[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c15"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
            (&[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
            (&[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
            (&[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
            (&[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
            (&[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
            (&[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
            (&[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
            (&[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
            (&[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
            (&[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t10fb"),
            (&[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1104"),
            (&[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1112"),
            (&[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
            (&[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
            (&[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
            (&[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1195"),
            (&[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
            (&[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
            (&[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
            (&[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
            (&[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
            (&[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119e"),
            (&[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
            (&[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
            (&[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
            (&[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
            (&[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
            (&[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11ac"),
            (&[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
            (&[0xe9, 0x55, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
            (&[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
            (&[0xff, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "jmp\tbx"),
            (&[0xeb, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t003f"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t004f"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0058"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0059"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t005b"),
            (&[0xeb, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0062"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0066"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t006b"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00a9"),
            (&[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00ec"),
            (&[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00f5"),
            (&[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0103"),
            (&[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t010f"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0114"),
            (&[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0118"),
            (&[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0135"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0147"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0164"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0185"),
            (&[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
            (&[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
            (&[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t023b"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0244"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0252"),
            (&[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t025c"),
            (&[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0265"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
            (&[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0273"),
            (&[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
            (&[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0281"),
            (&[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t028a"),
            (&[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0298"),
            (&[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02b1"),
            (&[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02ba"),
            (&[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02c8"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02eb"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02f4"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0302"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0332"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033b"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
            (&[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0341"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0349"),
            (&[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t034a"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
            (&[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0358"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03f5"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03fe"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t040c"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0422"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t042b"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0439"),
            (&[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ac"),
            (&[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04b5"),
            (&[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04c3"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04e5"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ee"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04fc"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0519"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0522"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0530"),
            (&[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05ca"),
            (&[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05d3"),
            (&[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05e1"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0680"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0689"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0697"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06d2"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06db"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06e9"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0705"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t070e"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t071c"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0740"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0749"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0757"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0797"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07a0"),
            (&[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ae"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07e4"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ed"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07fb"),
            (&[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
            (&[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
            (&[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t080a"),
            (&[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0813"),
            (&[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
            (&[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0821"),
            (&[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
            (&[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
            (&[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
            (&[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
            (&[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
            (&[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
            (&[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
            (&[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
            (&[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0abb"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ac4"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ad2"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
            (&[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
            (&[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
            (&[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
            (&[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b9c"),
            (&[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ba5"),
            (&[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bb3"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0be2"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0beb"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bf9"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c00"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c09"),
            (&[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c17"),
            (&[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c57"),
            (&[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c60"),
            (&[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c6e"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c83"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c8c"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c95"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9a"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9e"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cac"),
            (&[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
            (&[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
            (&[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
            (&[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d07"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d10"),
            (&[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d1e"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d2d"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d36"),
            (&[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d44"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d7e"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d87"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d95"),
            (&[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0dd4"),
            (&[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ddd"),
            (&[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0deb"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e4c"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e55"),
            (&[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e63"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eb1"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eba"),
            (&[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ec8"),
            (&[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f0f"),
            (&[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f18"),
            (&[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f26"),
            (&[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
            (&[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
            (&[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1046"),
            (&[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
            (&[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
            (&[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1054"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
            (&[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
            (&[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
            (&[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1111"),
            (&[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t111a"),
            (&[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1128"),
            (&[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1136"),
            (&[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t113f"),
            (&[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t114d"),
            (&[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
            (&[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
            (&[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
            (&[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
            (&[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
            (&[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t119d"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11a6"),
            (&[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11b4"),
            (&[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
            (&[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
            (&[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
            (&[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
            (&[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
            (&[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
            (&[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1286"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t128f"),
            (&[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t129d"),
            (&[0x73, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0028"),
            (&[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b5f"),
            (&[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b68"),
            (&[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b76"),
            (&[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d7b"),
            (&[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d84"),
            (&[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d92"),
            (&[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1268"),
            (&[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1271"),
            (&[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t127f"),
            (&[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0aeb"),
            (&[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0af4"),
            (&[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0b02"),
            (&[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cc5"),
            (&[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cce"),
            (&[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cdc"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1187"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1190"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t119e"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11e9"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11f2"),
            (&[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1200"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
            (&[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00ea"),
            (&[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00f3"),
            (&[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0101"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t01fe"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0207"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0211"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0215"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t021a"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0228"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0238"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0241"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t024f"),
            (&[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
            (&[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
            (&[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
            (&[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
            (&[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
            (&[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
            (&[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t029b"),
            (&[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02a4"),
            (&[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02b2"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02c4"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02cd"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02db"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0305"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t030e"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t031c"),
            (&[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0399"),
            (&[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03a2"),
            (&[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b0"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b7"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03c0"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03ce"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t043c"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0445"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0453"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04a6"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04af"),
            (&[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bb"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bd"),
            (&[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c4"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c6"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04cf"),
            (&[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04d2"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04db"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04dd"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04e4"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04f2"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0515"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t051e"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t052c"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0562"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056b"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056d"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0576"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0579"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0584"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0600"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0609"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0617"),
            (&[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t061e"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0621"),
            (&[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0627"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t062a"),
            (&[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0635"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0638"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0647"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0650"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t065e"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
            (&[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
            (&[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
            (&[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t075a"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0763"),
            (&[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0765"),
            (&[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t076e"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0771"),
            (&[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t077c"),
            (&[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07bb"),
            (&[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07c4"),
            (&[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07d2"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0867"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0870"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0879"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t087e"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0882"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0890"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08bd"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08c6"),
            (&[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08cd"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d4"),
            (&[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d6"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e3"),
            (&[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e4"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08ec"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08f9"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08fa"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0902"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0910"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t093c"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0945"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0953"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t096d"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0976"),
            (&[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0984"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09c3"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09cc"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09da"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a2b"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a34"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a42"),
            (&[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a4f"),
            (&[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a58"),
            (&[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a66"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a95"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a9e"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0aac"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b33"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b3c"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b4a"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b7a"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b83"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b91"),
            (&[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b93"),
            (&[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b9c"),
            (&[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0baa"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c1f"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c28"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c31"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c36"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c3a"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c48"),
            (&[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c8e"),
            (&[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c97"),
            (&[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ca5"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cd6"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cdf"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ced"),
            (&[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d46"),
            (&[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d4f"),
            (&[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d5d"),
            (&[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d62"),
            (&[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d6b"),
            (&[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d79"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e0f"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e18"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e26"),
            (&[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e68"),
            (&[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e71"),
            (&[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e7f"),
            (&[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f3d"),
            (&[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f46"),
            (&[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f54"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
            (&[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
            (&[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f73"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f7c"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f8a"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f9c"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fa5"),
            (&[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fb3"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t100a"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1013"),
            (&[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1021"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t102c"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1035"),
            (&[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1043"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t110f"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1118"),
            (&[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1126"),
            (&[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1129"),
            (&[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1132"),
            (&[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1140"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1141"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t114a"),
            (&[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1158"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1169"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1172"),
            (&[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1180"),
            (&[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11cb"),
            (&[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11d4"),
            (&[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11e2"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0058"),
            (&[0x7d, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0082"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0111"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0123"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0161"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01cc"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01d5"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01e3"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03ac"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03b5"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03c3"),
            (&[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07c3"),
            (&[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07cc"),
            (&[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07da"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0831"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t083a"),
            (&[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0848"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t085b"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0864"),
            (&[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0872"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dcb"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dd4"),
            (&[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0de2"),
            (&[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e02"),
            (&[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e0b"),
            (&[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e19"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e49"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e52"),
            (&[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e60"),
            (&[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eab"),
            (&[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eb4"),
            (&[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0ec2"),
            (&[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f37"),
            (&[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f40"),
            (&[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f4e"),
            (&[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t106b"),
            (&[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1074"),
            (&[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1082"),
            (&[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t010a"),
            (&[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0113"),
            (&[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0121"),
            (&[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t062f"),
            (&[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0638"),
            (&[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0646"),
            (&[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fe1"),
            (&[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fea"),
            (&[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0ff8"),
            (&[0x8d, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+4]"),
            (&[0x8d, 0x46, 0x06, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+6]"),
            (&[0x8d, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-18]"),
            (&[0x8d, 0x46, 0xff, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-1]"),
            (&[0x8d, 0x46, 0xe0, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-20]"),
            (&[0x8d, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-a]"),
            (&[0x8d, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-c]"),
            (&[0x8d, 0x45, 0x30, 0x00, 0x00, 0x00], 3, "lea\tax, [di+30]"),
            (&[0x8d, 0x44, 0x01, 0x00, 0x00, 0x00], 3, "lea\tax, [si+1]"),
            (&[0x8d, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+6]"),
            (&[0x8d, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+8]"),
            (
                &[0x8d, 0x9e, 0xe7, 0xfb, 0x00, 0x00],
                4,
                "lea\tbx, [bp-419]",
            ),
            (&[0x8d, 0x5d, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [di+2]"),
            (&[0x8d, 0x5c, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [si+2]"),
            (&[0x8d, 0x4f, 0x04, 0x00, 0x00, 0x00], 3, "lea\tcx, [bx+4]"),
            (&[0x8d, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "lea\tdx, [bx+2]"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
            (&[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1270"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1279"),
            (&[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1287"),
            (&[0x89, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\t[0002], bx"),
            (&[0x89, 0x16, 0x0a, 0x00, 0x00, 0x00], 4, "mov\t[000a], dx"),
            (
                &[0xc7, 0x06, 0x0c, 0x00, 0x40, 0x10],
                6,
                "mov\t[000c], 1040",
            ),
            (
                &[0xc7, 0x06, 0x0e, 0x00, 0x37, 0x10],
                6,
                "mov\t[000e], 1037",
            ),
            (&[0x89, 0x16, 0x12, 0x00, 0x00, 0x00], 4, "mov\t[0012], dx"),
            (
                &[0xc7, 0x06, 0x14, 0x00, 0x4e, 0x10],
                6,
                "mov\t[0014], 104e",
            ),
            (
                &[0xc7, 0x06, 0x24, 0x01, 0x0c, 0x00],
                6,
                "mov\t[0124], 000c",
            ),
            (&[0x89, 0x16, 0x24, 0x01, 0x00, 0x00], 4, "mov\t[0124], dx"),
            (
                &[0xc7, 0x06, 0x26, 0x01, 0x0c, 0x00],
                6,
                "mov\t[0126], 000c",
            ),
            (&[0x89, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\t[0126], dx"),
            (&[0x89, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\t[0128], dx"),
            (
                &[0xc7, 0x06, 0x2c, 0x01, 0x0c, 0x00],
                6,
                "mov\t[012c], 000c",
            ),
            (&[0x89, 0x16, 0x2c, 0x01, 0x00, 0x00], 4, "mov\t[012c], dx"),
            (&[0x89, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\t[012e], dx"),
            (&[0x89, 0x36, 0x12, 0x02, 0x00, 0x00], 4, "mov\t[0212], si"),
            (&[0x89, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "mov\t[0214], si"),
            (&[0x89, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], dx"),
            (&[0x89, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], si"),
            (&[0x89, 0x16, 0x18, 0x02, 0x00, 0x00], 4, "mov\t[0218], dx"),
            (
                &[0xc7, 0x06, 0x1a, 0x02, 0x04, 0x00],
                6,
                "mov\t[021a], 0004",
            ),
            (&[0x89, 0x36, 0x1a, 0x02, 0x00, 0x00], 4, "mov\t[021a], si"),
            (
                &[0xc7, 0x06, 0x1c, 0x02, 0x04, 0x00],
                6,
                "mov\t[021c], 0004",
            ),
            (&[0x89, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], bx"),
            (&[0x89, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], si"),
            (&[0x89, 0x1e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], bx"),
            (&[0x89, 0x16, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], dx"),
            (&[0x89, 0x1e, 0x20, 0x02, 0x00, 0x00], 4, "mov\t[0220], bx"),
            (
                &[0xc7, 0x06, 0x22, 0x02, 0x04, 0x00],
                6,
                "mov\t[0222], 0004",
            ),
            (&[0x89, 0x1e, 0x22, 0x02, 0x00, 0x00], 4, "mov\t[0222], bx"),
            (&[0x89, 0x1e, 0x24, 0x02, 0x00, 0x00], 4, "mov\t[0224], bx"),
            (&[0x89, 0x1e, 0x26, 0x02, 0x00, 0x00], 4, "mov\t[0226], bx"),
            (&[0x89, 0x1e, 0x2a, 0x02, 0x00, 0x00], 4, "mov\t[022a], bx"),
            (&[0x89, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], ax"),
            (&[0x89, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], dx"),
            (&[0x89, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], bx"),
            (&[0x89, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], dx"),
            (&[0x89, 0x56, 0xf0, 0x00, 0x00, 0x00], 3, "mov\t[bp-10], dx"),
            (
                &[0xc7, 0x46, 0xee, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-12], 0000",
            ),
            (&[0x89, 0x56, 0xee, 0x00, 0x00, 0x00], 3, "mov\t[bp-12], dx"),
            (
                &[0xc7, 0x46, 0xec, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-14], 0000",
            ),
            (&[0x89, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\t[bp-14], dx"),
            (&[0x89, 0x56, 0xea, 0x00, 0x00, 0x00], 3, "mov\t[bp-16], dx"),
            (
                &[0xc7, 0x46, 0xe8, 0xfc, 0x00, 0x00],
                5,
                "mov\t[bp-18], 00fc",
            ),
            (
                &[0xc7, 0x46, 0xe8, 0xfe, 0x00, 0x00],
                5,
                "mov\t[bp-18], 00fe",
            ),
            (
                &[0xc7, 0x46, 0xe8, 0x04, 0x01, 0x00],
                5,
                "mov\t[bp-18], 0104",
            ),
            (&[0x89, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], bx"),
            (&[0x89, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], dx"),
            (&[0x88, 0x56, 0xff, 0x00, 0x00, 0x00], 3, "mov\t[bp-1], dl"),
            (
                &[0xc7, 0x46, 0xfe, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-2], 0000",
            ),
            (&[0x89, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], ax"),
            (&[0x89, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], bx"),
            (&[0x89, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], cx"),
            (&[0x89, 0x7e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], di"),
            (&[0x89, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], dx"),
            (&[0x89, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], si"),
            (&[0x89, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], ax"),
            (&[0x89, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], dx"),
            (
                &[0xc7, 0x46, 0xfa, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-6], 0000",
            ),
            (&[0x89, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], cx"),
            (&[0x89, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], dx"),
            (
                &[0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-8], 0000",
            ),
            (&[0x89, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], ax"),
            (&[0x89, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], dx"),
            (
                &[0xc7, 0x46, 0xf8, 0xff, 0xff, 0x00],
                5,
                "mov\t[bp-8], ffff",
            ),
            (
                &[0xc7, 0x46, 0xf6, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-a], 0000",
            ),
            (&[0x89, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], dx"),
            (&[0x89, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], si"),
            (
                &[0xc7, 0x46, 0xf4, 0x00, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0000",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x01, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0001",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x02, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0002",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x06, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0006",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x08, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0008",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x0a, 0x00, 0x00],
                5,
                "mov\t[bp-c], 000a",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x10, 0x00, 0x00],
                5,
                "mov\t[bp-c], 0010",
            ),
            (
                &[0xc7, 0x46, 0xf4, 0x00, 0x04, 0x00],
                5,
                "mov\t[bp-c], 0400",
            ),
            (&[0x89, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], cx"),
            (&[0x89, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], dx"),
            (
                &[0xc7, 0x46, 0xf2, 0x20, 0x00, 0x00],
                5,
                "mov\t[bp-e], 0020",
            ),
            (
                &[0xc7, 0x46, 0xf2, 0x30, 0x00, 0x00],
                5,
                "mov\t[bp-e], 0030",
            ),
            (&[0x89, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\t[bp-e], dx"),
            (&[0x89, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[bx+2], dx"),
            (&[0x89, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], dx"),
            (&[0x89, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], si"),
            (&[0x88, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], al"),
            (&[0x89, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], ax"),
            (&[0x89, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], cx"),
            (&[0x89, 0x3f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], di"),
            (&[0x88, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dl"),
            (&[0x89, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dx"),
            (&[0x89, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], si"),
            (&[0x89, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[di-2], dx"),
            (&[0x89, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[di], dx"),
            (&[0x89, 0x7c, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], di"),
            (&[0x89, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], dx"),
            (
                &[0xc7, 0x44, 0x06, 0x00, 0x04, 0x00],
                5,
                "mov\t[si+6], 0400",
            ),
            (&[0x89, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\t[si+8], ax"),
            (&[0x89, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], bx"),
            (&[0x89, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], dx"),
            (
                &[0xc7, 0x44, 0xfe, 0x00, 0x00, 0x00],
                5,
                "mov\t[si-2], 0000",
            ),
            (&[0x89, 0x7c, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], di"),
            (&[0x89, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], dx"),
            (&[0xc7, 0x04, 0x00, 0x00, 0x00, 0x00], 4, "mov\t[si], 0000"),
            (&[0xc7, 0x04, 0xff, 0x03, 0x00, 0x00], 4, "mov\t[si], 03ff"),
            (&[0x88, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], al"),
            (&[0x89, 0x3c, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], di"),
            (&[0x89, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], dx"),
            (&[0xc7, 0x04, 0xff, 0xff, 0x00, 0x00], 4, "mov\t[si], ffff"),
            (&[0x8a, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+4]"),
            (&[0x8a, 0x46, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+a]"),
            (&[0x8a, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [bx]"),
            (&[0x8a, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [si]"),
            (&[0xb8, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0001"),
            (&[0xb8, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0002"),
            (&[0xb8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0004"),
            (&[0xb8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0006"),
            (&[0xb8, 0x0a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 000a"),
            (&[0xb8, 0x11, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0011"),
            (&[0xb8, 0x12, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0012"),
            (&[0xb8, 0x13, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0013"),
            (&[0xb8, 0x14, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0014"),
            (&[0xb8, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001c"),
            (&[0xb8, 0x1e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001e"),
            (&[0xb8, 0x24, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0024"),
            (&[0xb8, 0x28, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0028"),
            (&[0xb8, 0x2a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 002a"),
            (&[0xb8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0030"),
            (&[0xb8, 0x31, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0031"),
            (&[0xb8, 0x36, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0036"),
            (&[0xb8, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0058"),
            (&[0xb8, 0x61, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0061"),
            (&[0xb8, 0x78, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0078"),
            (&[0xb8, 0x06, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0106"),
            (&[0xb8, 0x08, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0108"),
            (&[0xb8, 0x0e, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 010e"),
            (&[0xb8, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0218"),
            (&[0xb8, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 021a"),
            (&[0xb8, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0220"),
            (&[0xb8, 0x00, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, 0400"),
            (&[0xb8, 0xe5, 0x14, 0x00, 0x00, 0x00], 3, "mov\tax, 14e5"),
            (&[0xb8, 0x08, 0x54, 0x00, 0x00, 0x00], 3, "mov\tax, 5408"),
            (&[0x8b, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+4]"),
            (&[0x8b, 0x46, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+8]"),
            (&[0x8b, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-14]"),
            (&[0x8b, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-8]"),
            (&[0x8b, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-a]"),
            (&[0x8b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, [bx]"),
            (&[0x8b, 0x44, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, [si+2]"),
            (&[0x8b, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [si+8]"),
            (&[0x8b, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tax, [si+a]"),
            (&[0x8b, 0x44, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tax, [si+c]"),
            (&[0x89, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, bx"),
            (&[0x89, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, di"),
            (&[0x89, 0xd0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, dx"),
            (&[0xb8, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "mov\tax, ffff"),
            (&[0x89, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, si"),
            (&[0x89, 0xe5, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbp, sp"),
            (&[0xbb, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0001"),
            (&[0xbb, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0002"),
            (&[0xbb, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0008"),
            (&[0xbb, 0x0e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 000e"),
            (&[0xbb, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0010"),
            (&[0xbb, 0x16, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0016"),
            (&[0xbb, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005c"),
            (&[0xbb, 0x5e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005e"),
            (&[0xbb, 0x64, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0064"),
            (&[0xbb, 0x68, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0068"),
            (&[0xbb, 0x6a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 006a"),
            (&[0xbb, 0x70, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0070"),
            (&[0xbb, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008c"),
            (&[0xbb, 0x8e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008e"),
            (&[0xbb, 0x94, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0094"),
            (&[0xbb, 0xa4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a4"),
            (&[0xbb, 0xa6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a6"),
            (&[0xbb, 0xac, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00ac"),
            (&[0xbb, 0xb4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b4"),
            (&[0xbb, 0xb6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b6"),
            (&[0xbb, 0xbc, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00bc"),
            (&[0xbb, 0x28, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0128"),
            (&[0xbb, 0x2a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 012a"),
            (&[0xbb, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0130"),
            (&[0xbb, 0x01, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0201"),
            (&[0xbb, 0x03, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0203"),
            (&[0xbb, 0x09, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0209"),
            (&[0xbb, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0218"),
            (&[0xbb, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 021a"),
            (&[0xbb, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0220"),
            (&[0x8b, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\tbx, [0002]"),
            (&[0x8b, 0x1e, 0x06, 0x00, 0x00, 0x00], 4, "mov\tbx, [0006]"),
            (&[0x8b, 0x1e, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tbx, [000c]"),
            (&[0x8b, 0x1e, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [000e]"),
            (&[0x8b, 0x1e, 0x14, 0x00, 0x00, 0x00], 4, "mov\tbx, [0014]"),
            (&[0x8b, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "mov\tbx, [0214]"),
            (&[0x8b, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tbx, [0216]"),
            (&[0x8b, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\tbx, [021c]"),
            (&[0x8b, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+4]"),
            (&[0x8b, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+6]"),
            (&[0x8b, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+8]"),
            (&[0x8b, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-18]"),
            (&[0x8b, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-2]"),
            (&[0x8b, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-6]"),
            (&[0x8b, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-a]"),
            (&[0x8b, 0x9f, 0x16, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+16]"),
            (
                &[0x8b, 0x9f, 0x32, 0x02, 0x00, 0x00],
                4,
                "mov\tbx, [bx+232]",
            ),
            (
                &[0x8b, 0x9f, 0x34, 0x02, 0x00, 0x00],
                4,
                "mov\tbx, [bx+234]",
            ),
            (
                &[0x8b, 0x9f, 0x3a, 0x02, 0x00, 0x00],
                4,
                "mov\tbx, [bx+23a]",
            ),
            (&[0x8b, 0x5f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx+2]"),
            (&[0x8b, 0x9f, 0x34, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+34]"),
            (&[0x8b, 0x9f, 0x36, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+36]"),
            (&[0x8b, 0x9f, 0x3c, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+3c]"),
            (&[0x8b, 0x9f, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+e]"),
            (&[0x8b, 0x5f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx-2]"),
            (&[0x8b, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [bx]"),
            (&[0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [di]"),
            (&[0x8b, 0x5c, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+6]"),
            (&[0x8b, 0x5c, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+8]"),
            (&[0x8b, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+a]"),
            (&[0x89, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, di"),
            (&[0x89, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, dx"),
            (&[0x89, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, si"),
            (&[0x89, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, sp"),
            (
                &[0xc6, 0x04, 0x20, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 20",
            ),
            (
                &[0xc6, 0x04, 0x2b, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 2b",
            ),
            (
                &[0xc6, 0x04, 0x2d, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 2d",
            ),
            (
                &[0xc6, 0x04, 0x30, 0x00, 0x00, 0x00],
                3,
                "mov\tbyte [si], 30",
            ),
            (&[0xb9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0001"),
            (&[0xb9, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0002"),
            (&[0xb9, 0x03, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0003"),
            (&[0xb9, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0006"),
            (&[0xb9, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 000c"),
            (&[0xb9, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0010"),
            (&[0x8b, 0x4e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp+8]"),
            (&[0x8b, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp-2]"),
            (&[0x8b, 0x4f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx+2]"),
            (&[0x8b, 0x4f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx-2]"),
            (&[0x8b, 0x4c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tcx, [si+a]"),
            (&[0x89, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "mov\tcx, dx"),
            (&[0x8b, 0x3e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tdi, [0216]"),
            (&[0x8b, 0x3e, 0x18, 0x02, 0x00, 0x00], 4, "mov\tdi, [0218]"),
            (&[0x8b, 0x3e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tdi, [021e]"),
            (&[0x8b, 0x7e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+4]"),
            (&[0x8b, 0x7e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+8]"),
            (&[0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, [di]"),
            (&[0x89, 0xc7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, ax"),
            (&[0x89, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, dx"),
            (&[0x89, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, si"),
            (&[0x8a, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdl, [bx]"),
            (&[0xba, 0x60, 0x00, 0x00, 0x00, 0x00], 3, "mov\tdx, 0060"),
            (&[0xba, 0x52, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0152"),
            (&[0xba, 0x54, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0154"),
            (&[0xba, 0x5a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 015a"),
            (&[0xba, 0x69, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0169"),
            (&[0xba, 0x6b, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 016b"),
            (&[0xba, 0x71, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0171"),
            (&[0xba, 0x80, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0180"),
            (&[0xba, 0x82, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0182"),
            (&[0xba, 0x88, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0188"),
            (&[0xba, 0x97, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0197"),
            (&[0xba, 0x99, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0199"),
            (&[0xba, 0x9f, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 019f"),
            (&[0xba, 0xae, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01ae"),
            (&[0xba, 0xb0, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b0"),
            (&[0xba, 0xb6, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b6"),
            (&[0xba, 0xc5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c5"),
            (&[0xba, 0xc7, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c7"),
            (&[0xba, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01cd"),
            (&[0xba, 0xdc, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01dc"),
            (&[0xba, 0xde, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01de"),
            (&[0xba, 0xe4, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01e4"),
            (&[0xba, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f3"),
            (&[0xba, 0xf5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f5"),
            (&[0xba, 0xfb, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01fb"),
            (&[0xba, 0xd2, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, 04d2"),
            (&[0x8b, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\tdx, [0126]"),
            (&[0x8b, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\tdx, [0128]"),
            (&[0x8b, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tdx, [012e]"),
            (&[0x8b, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+4]"),
            (&[0x8b, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+6]"),
            (&[0x8b, 0x56, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+8]"),
            (&[0x8b, 0x56, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+a]"),
            (&[0x8b, 0x56, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+c]"),
            (&[0x8b, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-14]"),
            (&[0x8b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-18]"),
            (&[0x8b, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-2]"),
            (&[0x8b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-4]"),
            (&[0x8b, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-6]"),
            (&[0x8b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-8]"),
            (&[0x8b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-a]"),
            (&[0x8b, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-c]"),
            (&[0x8b, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-e]"),
            (&[0x8b, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-2]"),
            (&[0x8b, 0x57, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-4]"),
            (&[0x8b, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [bx]"),
            (&[0x8b, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [di-2]"),
            (&[0x8b, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [di]"),
            (&[0x8b, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+2]"),
            (&[0x8b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+6]"),
            (&[0x8b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+8]"),
            (&[0x8b, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+a]"),
            (&[0x8b, 0x54, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+c]"),
            (&[0x8b, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [si-2]"),
            (&[0x8b, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [si]"),
            (&[0x89, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, ax"),
            (&[0x89, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, bx"),
            (&[0x89, 0xca, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, cx"),
            (&[0x89, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, di"),
            (&[0x89, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, si"),
            (&[0x8b, 0x36, 0x04, 0x00, 0x00, 0x00], 4, "mov\tsi, [0004]"),
            (&[0x8b, 0x36, 0x0a, 0x00, 0x00, 0x00], 4, "mov\tsi, [000a]"),
            (&[0x8b, 0x36, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tsi, [000c]"),
            (&[0x8b, 0x36, 0x12, 0x00, 0x00, 0x00], 4, "mov\tsi, [0012]"),
            (&[0x8b, 0x36, 0x26, 0x01, 0x00, 0x00], 4, "mov\tsi, [0126]"),
            (&[0x8b, 0x36, 0x28, 0x01, 0x00, 0x00], 4, "mov\tsi, [0128]"),
            (&[0x8b, 0x36, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tsi, [012e]"),
            (&[0x8b, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\tsi, [0216]"),
            (&[0x8b, 0x36, 0x18, 0x02, 0x00, 0x00], 4, "mov\tsi, [0218]"),
            (&[0x8b, 0x36, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tsi, [021e]"),
            (&[0x8b, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+4]"),
            (&[0x8b, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+6]"),
            (&[0x8b, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+8]"),
            (&[0x8b, 0x76, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+a]"),
            (&[0x8b, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, [si]"),
            (&[0x89, 0xc6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, ax"),
            (&[0x89, 0xd6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, dx"),
            (&[0x89, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, sp"),
            (&[0x89, 0xec, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsp, bp"),
            (&[0xf7, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "mul\tdi"),
            (&[0xf7, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "neg\t[bp-2]"),
            (&[0xf7, 0x5e, 0xfc, 0x00, 0x00, 0x00], 3, "neg\t[bp-4]"),
            (&[0xf7, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "neg\t[bp-a]"),
            (&[0xf7, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "neg\tax"),
            (&[0xf7, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "neg\tdx"),
            (&[0x81, 0x4c, 0x04, 0x04, 0x00, 0x00], 5, "or\t[si+4], 0004"),
            (&[0x81, 0x4c, 0x04, 0x08, 0x00, 0x00], 5, "or\t[si+4], 0008"),
            (&[0x81, 0x4c, 0x04, 0x20, 0x00, 0x00], 5, "or\t[si+4], 0020"),
            (&[0x81, 0x4c, 0x04, 0x48, 0x00, 0x00], 5, "or\t[si+4], 0048"),
            (&[0x81, 0x4c, 0x04, 0x00, 0x01, 0x00], 5, "or\t[si+4], 0100"),
            (&[0x09, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, ax"),
            (&[0x09, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, di"),
            (&[0x81, 0xcf, 0x01, 0x00, 0x00, 0x00], 4, "or\tdi, 0001"),
            (&[0x81, 0xcf, 0x02, 0x00, 0x00, 0x00], 4, "or\tdi, 0002"),
            (&[0x81, 0xcf, 0x04, 0x00, 0x00, 0x00], 4, "or\tdi, 0004"),
            (&[0x81, 0xcf, 0x08, 0x00, 0x00, 0x00], 4, "or\tdi, 0008"),
            (&[0x81, 0xcf, 0x10, 0x00, 0x00, 0x00], 4, "or\tdi, 0010"),
            (&[0x81, 0xcf, 0x20, 0x00, 0x00, 0x00], 4, "or\tdi, 0020"),
            (&[0x81, 0xcf, 0x40, 0x00, 0x00, 0x00], 4, "or\tdi, 0040"),
            (&[0x81, 0xcf, 0x80, 0x00, 0x00, 0x00], 4, "or\tdi, 0080"),
            (&[0x81, 0xcf, 0x00, 0x01, 0x00, 0x00], 4, "or\tdi, 0100"),
            (&[0x81, 0xcf, 0x00, 0x02, 0x00, 0x00], 4, "or\tdi, 0200"),
            (&[0x81, 0xcf, 0x00, 0x04, 0x00, 0x00], 4, "or\tdi, 0400"),
            (&[0x81, 0xcf, 0x00, 0x10, 0x00, 0x00], 4, "or\tdi, 1000"),
            (&[0x09, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "or\tdi, di"),
            (&[0x0b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "or\tdx, [bp-8]"),
            (&[0x09, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, ax"),
            (&[0x09, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, dx"),
            (&[0x09, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "or\tsi, si"),
            (&[0x58, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tax"),
            (&[0x5d, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbp"),
            (&[0x5b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbx"),
            (&[0x5f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdi"),
            (&[0x5a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdx"),
            (&[0x5e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tsi"),
            (&[0xff, 0x36, 0x1e, 0x00, 0x00, 0x00], 4, "push\t[001e]"),
            (&[0xff, 0x36, 0x20, 0x00, 0x00, 0x00], 4, "push\t[0020]"),
            (&[0xff, 0x36, 0x26, 0x00, 0x00, 0x00], 4, "push\t[0026]"),
            (&[0xff, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "push\t[0214]"),
            (&[0xff, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "push\t[0216]"),
            (&[0xff, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "push\t[021c]"),
            (&[0xff, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "push\t[bp+4]"),
            (&[0xff, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "push\t[bp+6]"),
            (&[0xff, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "push\t[bp+8]"),
            (&[0xff, 0x76, 0x0c, 0x00, 0x00, 0x00], 3, "push\t[bp+c]"),
            (&[0xff, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bp-2]"),
            (&[0xff, 0x76, 0xfc, 0x00, 0x00, 0x00], 3, "push\t[bp-4]"),
            (&[0xff, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "push\t[bp-6]"),
            (&[0xff, 0x76, 0xf8, 0x00, 0x00, 0x00], 3, "push\t[bp-8]"),
            (&[0xff, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "push\t[bp-a]"),
            (&[0xff, 0x76, 0xf4, 0x00, 0x00, 0x00], 3, "push\t[bp-c]"),
            (&[0xff, 0x76, 0xf2, 0x00, 0x00, 0x00], 3, "push\t[bp-e]"),
            (&[0xff, 0xb7, 0x34, 0x00, 0x00, 0x00], 4, "push\t[bx+34]"),
            (&[0xff, 0xb7, 0x36, 0x00, 0x00, 0x00], 4, "push\t[bx+36]"),
            (&[0xff, 0xb7, 0x3c, 0x00, 0x00, 0x00], 4, "push\t[bx+3c]"),
            (&[0xff, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bx-2]"),
            (&[0xff, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "push\t[bx]"),
            (&[0xff, 0x74, 0x02, 0x00, 0x00, 0x00], 3, "push\t[si+2]"),
            (&[0xff, 0x74, 0x08, 0x00, 0x00, 0x00], 3, "push\t[si+8]"),
            (&[0x50, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tax"),
            (&[0x55, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbp"),
            (&[0x53, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbx"),
            (&[0x51, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tcx"),
            (&[0x57, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdi"),
            (&[0x52, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdx"),
            (&[0x56, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tsi"),
            (&[0xd1, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tbx, 1"),
            (&[0xd1, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tdx, 1"),
            (&[0xf2, 0xa4, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsb"),
            (&[0xf2, 0xa5, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsw"),
            (&[0xc3, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "ret"),
            (&[0xc2, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "ret\t0008"),
            (&[0xd1, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, 1"),
            (&[0xd3, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, cl"),
            (
                &[0x18, 0x8b, 0x56, 0x04, 0x00, 0x00],
                4,
                "sbb\t[bp+di+456], cl",
            ),
            (&[0x83, 0x5e, 0xfe, 0x00, 0x00, 0x00], 4, "sbb\t[bp-2], 0"),
            (&[0x19, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "sbb\tbx, di"),
            (&[0xd1, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "shl\tax, 1"),
            (&[0xd1, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "shl\tbx, 1"),
            (&[0xd3, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdi, cl"),
            (&[0xd1, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdx, 1"),
            (&[0xd1, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "shr\tcx, 1"),
            (&[0xfd, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "std"),
            (&[0x83, 0x6e, 0xfc, 0x02, 0x00, 0x00], 4, "sub\t[bp-4], 2"),
            (&[0x2d, 0x20, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0020"),
            (&[0x2d, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0030"),
            (&[0x2d, 0xa9, 0xff, 0x00, 0x00, 0x00], 3, "sub\tax, ffa9"),
            (&[0x29, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "sub\tax, si"),
            (&[0x83, 0xea, 0x61, 0x00, 0x00, 0x00], 3, "sub\tdx, 61"),
            (&[0x2b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-18]"),
            (&[0x2b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-4]"),
            (&[0x2b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-a]"),
            (&[0x2b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+6]"),
            (&[0x2b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+8]"),
            (&[0x29, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "sub\tdx, si"),
            (&[0x81, 0xec, 0x1a, 0x04, 0x00, 0x00], 4, "sub\tsp, 041a"),
            (&[0x83, 0xec, 0x18, 0x00, 0x00, 0x00], 3, "sub\tsp, 18"),
            (&[0x83, 0xec, 0x20, 0x00, 0x00, 0x00], 3, "sub\tsp, 20"),
            (&[0x83, 0xec, 0x06, 0x00, 0x00, 0x00], 3, "sub\tsp, 6"),
            (&[0x83, 0xec, 0x0a, 0x00, 0x00, 0x00], 3, "sub\tsp, a"),
            (&[0x83, 0xec, 0x0c, 0x00, 0x00, 0x00], 3, "sub\tsp, c"),
            (&[0x83, 0xec, 0x0e, 0x00, 0x00, 0x00], 3, "sub\tsp, e"),
            (
                &[0xf7, 0x47, 0x04, 0x00, 0x01, 0x00],
                5,
                "test\t[bx+4], 0100",
            ),
            (
                &[0xf7, 0x44, 0x04, 0x00, 0x01, 0x00],
                5,
                "test\t[si+4], 0100",
            ),
            (
                &[0xf7, 0x44, 0x04, 0x00, 0x02, 0x00],
                5,
                "test\t[si+4], 0200",
            ),
            (&[0xa8, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "test\tal, 1"),
            (&[0xf6, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "test\tbl, 1"),
            (&[0x85, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "test\tbx, bx"),
            (
                &[0xf6, 0x46, 0x06, 0x02, 0x00, 0x00],
                4,
                "test\tbyte [bp+6], 2",
            ),
            (
                &[0xf6, 0x46, 0x06, 0x04, 0x00, 0x00],
                4,
                "test\tbyte [bp+6], 4",
            ),
            (
                &[0xf6, 0x46, 0x06, 0x08, 0x00, 0x00],
                4,
                "test\tbyte [bp+6], 8",
            ),
            (
                &[0xf6, 0x44, 0x04, 0x01, 0x00, 0x00],
                4,
                "test\tbyte [si+4], 1",
            ),
            (
                &[0xf6, 0x44, 0x04, 0x10, 0x00, 0x00],
                4,
                "test\tbyte [si+4], 10",
            ),
            (
                &[0xf6, 0x44, 0x04, 0x02, 0x00, 0x00],
                4,
                "test\tbyte [si+4], 2",
            ),
            (
                &[0xf6, 0x44, 0x04, 0x04, 0x00, 0x00],
                4,
                "test\tbyte [si+4], 4",
            ),
            (
                &[0xf6, 0x44, 0x04, 0x40, 0x00, 0x00],
                4,
                "test\tbyte [si+4], 40",
            ),
            (
                &[0xf6, 0x44, 0x04, 0x80, 0x00, 0x00],
                4,
                "test\tbyte [si+4], 80",
            ),
            (&[0xf7, 0xc7, 0x01, 0x00, 0x00, 0x00], 4, "test\tdi, 0001"),
            (&[0xf7, 0xc7, 0x02, 0x00, 0x00, 0x00], 4, "test\tdi, 0002"),
            (&[0xf7, 0xc7, 0x08, 0x00, 0x00, 0x00], 4, "test\tdi, 0008"),
            (&[0xf7, 0xc7, 0x10, 0x00, 0x00, 0x00], 4, "test\tdi, 0010"),
            (&[0xf7, 0xc7, 0x20, 0x00, 0x00, 0x00], 4, "test\tdi, 0020"),
            (&[0xf7, 0xc7, 0x40, 0x00, 0x00, 0x00], 4, "test\tdi, 0040"),
            (&[0xf7, 0xc7, 0x00, 0x01, 0x00, 0x00], 4, "test\tdi, 0100"),
            (&[0xf7, 0xc7, 0x00, 0x02, 0x00, 0x00], 4, "test\tdi, 0200"),
            (&[0xf7, 0xc7, 0x00, 0x04, 0x00, 0x00], 4, "test\tdi, 0400"),
            (&[0xf7, 0xc7, 0x00, 0x10, 0x00, 0x00], 4, "test\tdi, 1000"),
            (&[0x87, 0x1e, 0x10, 0x02, 0x00, 0x00], 4, "xchg\t[0210], bx"),
            (&[0x87, 0x1e, 0x12, 0x02, 0x00, 0x00], 4, "xchg\t[0212], bx"),
            (&[0x87, 0x1e, 0x18, 0x02, 0x00, 0x00], 4, "xchg\t[0218], bx"),
            (&[0x91, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "xchg\tcx, ax"),
            (&[0x30, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "xor\tah, ah"),
            (&[0x31, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "xor\tax, ax"),
            (&[0x31, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbp, bp"),
            (&[0x31, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbx, bx"),
            (&[0x30, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdh, dh"),
            (&[0x31, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdi, di"),
            (&[0x31, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdx, dx"),
            (&[0x31, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tsi, si"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode(testcase.0) {
                assert_eq!(
                    l, testcase.1,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.1
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.2,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.2
                )
            }
        }
    }
}
