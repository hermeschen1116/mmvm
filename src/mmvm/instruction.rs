use std::fmt::{Display, Formatter};

use crate::mmvm::addressing::Addressing;
use crate::mmvm::mnemonic::Mnemonic;
use crate::mmvm::mnemonic::Mnemonic::*;
use crate::mmvm::register::ByteRegister::CL;
use crate::mmvm::register::Register;
use crate::mmvm::register::WordRegister::{AX, DX};
use crate::mmvm::numerical::Immediate;

fn match_reg(binary_data: u8, reference: &[u8]) -> bool {
	let reg = (binary_data & 0b00111000) >> 3;
 	reference.contains(&reg)
}

#[derive(Debug, Copy, Clone)]
pub enum Instruction {
    Standalone(Mnemonic),
    WithInstruction(Mnemonic, Mnemonic),
    WithAddress(Mnemonic, Addressing),
    AddressToAddress(Mnemonic, bool, Addressing, Addressing),
    WithImmediate(Mnemonic, Immediate),
    ImmediateToAddress(Mnemonic, Addressing, Immediate),
    Undefined,
}

impl Instruction {
    pub fn decode_data(word_mode: bool, sign_enable: bool, binary_data: &[u8]) -> (usize, Option<Immediate>) {
        if binary_data.is_empty() {
            return (0, None);
        }
        if !word_mode {
            (1, Some(Immediate::decode(&binary_data[0..1], sign_enable)))
        } else {
            (2, Some(Immediate::decode(&binary_data[0..=1], sign_enable)))
        }
    }

    pub fn decode_move_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Register/Memory to/from Register
            0b10001000..=0b10001011 => {
                let d = (binary_data[0] & 0b00000010) >> 1;
                let w = binary_data[0] & 0b00000001;
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(MOV, d == 0b0, reg, r_m)),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate to Register/Memory
            0b11000110 | 0b11000111 if match_reg(binary_data[1], &[0b000]) => {
                let w = binary_data[0] & 0b00000001;
                let instruction = if w == 0b1 { MOV } else { MOVBYTE };
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data(w == 0b1, false, &binary_data[(2 + rl)..])
                    {
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(instruction, r_m, displacement)),
                        )
                    } else {
                        (0, Some(Instruction::Undefined))
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate to Register
            0b10110000..=0b10111111 => {
                let w = (binary_data[0] & 0b00001000) >> 3;
                if let (_, Some(reg), None) = Addressing::decode(w, binary_data, 0b00000111) {
                    if let (dl, Some(displacement)) = Self::decode_data(w == 0b1, false, &binary_data[1..])
                    {
                        (
                            1 + dl,
                            Some(Instruction::ImmediateToAddress(MOV, reg, displacement)),
                        )
                    } else {
                        (0, Some(Instruction::Undefined))
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Memory <-> Accumulator
            0b10100000 | 0b10100001 | 0b10100010 | 0b10100011 => {
                let d = (binary_data[0] & 0b00000010) >> 1;
                let w = binary_data[0] & 0b00000001;
                if let (_, Some(Immediate::Word(_, _, address))) =
                    Self::decode_data(true, false, &binary_data[1..])
                {
                    (
                        3,
                        Some(Instruction::AddressToAddress(
                            MOV,
                            d == 0b0,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            Addressing::DirectAddressing(address),
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Register/Memory <-> Segment Register
            0b10001110 | 0b10001100 if (binary_data[1] & 0b00100000) == 0b00000000 => {
                let d = (binary_data[0] & 0b00000010) >> 1;
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(0, &binary_data[1..], 0b11011111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(MOV, d == 0b0, reg, r_m)),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => {
            	(0, Some(Instruction::Undefined))
            },
        }
    }

    pub fn decode_push_pop_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // PUSH (Register/Memory)
            0b11111111 if (binary_data[1] & 0b00111000) == 0b00110000 => {
                if let (l, None, Some(r_m)) = Addressing::decode(0, &binary_data[1..], 0b11000111) {
                    (2 + l, Some(Instruction::WithAddress(PUSH, r_m)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // PUSH (Register)
            0b01010000..=0b01010111 => {
                if let (l, Some(reg), None) = Addressing::decode(0, binary_data, 0b00000111) {
                    (1 + l, Some(Instruction::WithAddress(PUSH, reg)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // POP (Register/Memory)
            0b10001111 if (binary_data[1] & 0b00111000) == 0b00000000 => {
                if let (l, None, Some(r_m)) = Addressing::decode(0, &binary_data[1..], 0b11000111) {
                    (2 + l, Some(Instruction::WithAddress(POP, r_m)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // POP (Register)
            0b01011000..=0b01011111 => {
                if let (l, Some(reg), None) = Addressing::decode(0, binary_data, 0b00000111) {
                    (1 + l, Some(Instruction::WithAddress(POP, reg)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // PUSH / POP (Segment Register)
            _ => {
                let instruction = if (binary_data[0] & 0b11100111) == 0b00000110 {
                    PUSH
                } else if (binary_data[0] & 0b11100111) == 0b00000111 {
                    POP
                } else {
                    return (0, Some(Instruction::Undefined));
                };
                if let (l, Some(reg), None) = Addressing::decode(0, &binary_data[1..], 0b00011000) {
                    (1 + l, Some(Instruction::WithAddress(instruction, reg)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
        }
    }

    pub fn decode_exchange_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Register/Memory with Register
            0b10000110 | 0b10000111 => {
                let w = binary_data[0] & 0b00000001;
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(XCHG, true, reg, r_m)),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Register with Accumulator
            0b10010000..=0b10010111 => {
                if let (l, Some(reg), None) = Addressing::decode(0, binary_data, 0b00000111) {
                    (
                        1 + l,
                        Some(Instruction::AddressToAddress(
                            XCHG,
                            true,
                            Addressing::RegisterAddressing(Register::WordReg(AX)),
                            reg,
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_in_out_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        let instruction = match binary_data[0] & 0b00000010 {
            0b00 => IN,
            0b10 => OUT,
            _ => return (0, Some(Instruction::Undefined)),
        };
        match binary_data[0] {
            // Fixed Port
            0b11100100 | 0b11100101 => (
                2,
                Some(Instruction::ImmediateToAddress(
                    instruction,
                    Addressing::RegisterAddressing(
                        Register::decode(w == 0b1, true, 0b000).unwrap(),
                    ),
                    Immediate::decode( &binary_data[1..2], false),
                )),
            ),
            // Variable Port
            0b11101100 | 0b11101101 => (
                1,
                Some(Instruction::AddressToAddress(
                    instruction,
                    true,
                    Addressing::RegisterAddressing(Register::WordReg(DX)),
                    Addressing::RegisterAddressing(
                        Register::decode(w == 0b1, true, 0b000).unwrap(),
                    ),
                )),
            ),
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_load_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let instruction = match binary_data[0] {
            0b10001101 => LEA,
            0b11000101 => LDS,
            0b11000100 => LES,
            _ => return (0, Some(Instruction::Undefined)),
        };
        if let (l, Some(reg), Some(r_m)) = Addressing::decode(0b1, &binary_data[1..], 0b11111111) {
            (
                2 + l,
                Some(Instruction::AddressToAddress(instruction, false, reg, r_m)),
            )
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode_arithmic_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        match binary_data[0] {
            // Reg./Memory with Register to Either
            0b00000000..=0b00000011
            | 0b00010000..=0b00010011
            | 0b00101000..=0b00101011
            | 0b00011000..=0b00011011
            | 0b00111000..=0b00111011 => {
                let instruction = match (binary_data[0] & 0b00111000) >> 3 {
                    0b000 => ADD,
                    0b010 => ADC,
                    0b101 => SUB,
                    0b011 => SSB,
                    0b111 => CMP,
                    _ => return (0, Some(Instruction::Undefined)),
                };
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(
                            instruction,
                            (binary_data[0] & 0b00000010) == 0b00,
                            reg,
                            r_m,
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate to Accumulator
            0b00000100 | 0b00000101 | 0b00010100 | 0b00010101 | 0b00101100 | 0b00101101
            | 0b00011100 | 0b00011101 | 0b00111100 | 0b00111101 => {
                let instruction = match (binary_data[0] & 0b00111100) >> 2 {
                    0b0001 => ADD,
                    0b0101 => ADC,
                    0b1011 => SUB,
                    0b0111 => SSB,
                    0b1111 => CMP,
                    _ => return (0, Some(Instruction::Undefined)),
                };
                if let (l, Some(immediate)) = Self::decode_data(w == 0b1, false, &binary_data[1..]) {
                    (
                        1 + l,
                        Some(Instruction::ImmediateToAddress(
                            instruction,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            immediate,
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate to Register/Memory
            0b10000000..=0b10000011 => {
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data((binary_data[0] & 0b11) == 0b01,true, &binary_data[(2 + rl)..])
                    {
                        let instruction = match binary_data[1] & 0b00111000 {
                            0b00000000 => ADD,
                            0b00010000 => ADC,
                            0b00101000 => SUB,
                            0b00011000 => SSB,
                            0b00111000 => {
                                if w == 0b1 {
                                    CMP
                                } else {
                                    CMPBYTE
                                }
                            }
                            _ => return (0, Some(Instruction::Undefined)),
                        };
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(
                                instruction,
                                r_m,
                                displacement,
                            )),
                        )
                    } else {
                        (0, Some(Instruction::Undefined))
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_increase_decrease_instruction(
        binary_data: &[u8],
    ) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Register/Memory
            0b11111110 | 0b11111111 => {
                let w = binary_data[0] & 0b00000001;
                if let (l, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111) {
                    match binary_data[1] & 0b00111000 {
                        0b00000000 => (2 + l, Some(Instruction::WithAddress(INC, r_m))),
                        0b00001000 => (2 + l, Some(Instruction::WithAddress(DEC, r_m))),
                        _ => (0, Some(Instruction::Undefined)),
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Register
            0b01000000..=0b01000111 | 0b01001000..=0b01001111 => {
                let instruction = if (binary_data[0] & 0b11111000) == 0b01000000 {
                    INC
                } else {
                    DEC
                };
                if let (l, Some(reg), None) = Addressing::decode(0b1, binary_data, 0b00000111) {
                    (1 + l, Some(Instruction::WithAddress(instruction, reg)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_negation_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if let (l, None, Some(r_m)) =
            Addressing::decode(binary_data[0] & 0b1, &binary_data[1..], 0b11000111)
        {
            (2 + l, Some(Instruction::WithAddress(NEG, r_m)))
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode_multiply_divide_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if binary_data[0] == 0b11110110 | 0b11110111 {
            if let (l, None, Some(r_m)) =
                Addressing::decode(binary_data[0] & 0b1, &binary_data[1..], 0b11000111)
            {
                match binary_data[1] & 0b00111000 {
                    0b00100000 => (2 + l, Some(Instruction::WithAddress(MUL, r_m))),
                    0b00101000 => (2 + l, Some(Instruction::WithAddress(IMUL, r_m))),
                    0b00110000 => (2 + l, Some(Instruction::WithAddress(DIV, r_m))),
                    0b00111000 => (2 + l, Some(Instruction::WithAddress(IDIV, r_m))),
                    _ => (0, Some(Instruction::Undefined)),
                }
            } else {
                (0, Some(Instruction::Undefined))
            }
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode_not_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if binary_data[0] == 0b11110110 | 0b11110111 {
            if let (l, None, Some(r_m)) =
                Addressing::decode(binary_data[0] & 0b1, &binary_data[1..], 0b11000111)
            {
                if (binary_data[1] & 0b00111000) == 0b00011000 {
                    (2 + l, Some(Instruction::WithAddress(NOT, r_m)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            } else {
                (0, Some(Instruction::Undefined))
            }
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode_shift_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let v = (binary_data[0] & 0b00000010) >> 1;
        let w = binary_data[0] & 0b00000001;

        let instruction = match binary_data[1] & 0b00111000 {
            0b00100000 => SHL,
            0b00101000 => SHR,
            0b00111000 => SAR,
            0b00000000 => ROL,
            0b00001000 => ROR,
            0b00010000 => RCL,
            0b00011000 => RCR,
            _ => return (0, Some(Instruction::Undefined)),
        };

        if let (l, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111) {
            if v == 0b1 {
                (
                    2 + l,
                    Some(Instruction::AddressToAddress(
                        instruction,
                        true,
                        Addressing::RegisterAddressing(Register::ByteReg(CL)),
                        r_m,
                    )),
                )
            } else {
                (
                    2 + l,
                    Some(Instruction::ImmediateToAddress(
                        instruction,
                        r_m,
                        Immediate::Byte(false, true, 0b1),
                    )),
                )
            }
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode_logic_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        match binary_data[0] {
            // Reg./Memory and Register to Either
            0b00100000..=0b00100011 | 0b00001000..=0b00001011 | 0b00110000..=0b00110011 => {
                let instruction = match binary_data[0] & 0b11111100 {
                    0b00100000 => AND,
                    0b00001000 => OR,
                    0b00110000 => XOR,
                    _ => return (0, Some(Instruction::Undefined)),
                };
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(
                            instruction,
                            (binary_data[0] & 0b00000010) == 0b00,
                            reg,
                            r_m,
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate to Accumulator
            0b00100100 | 0b00100101 | 0b00001100 | 0b00001101 | 0b00110100 | 0b00110101 => {
                let instruction = match binary_data[0] & 0b11111110 {
                    0b00100100 => AND,
                    0b00001100 => OR,
                    0b00110100 => XOR,
                    _ => return (0, Some(Instruction::Undefined)),
                };
                if let (l, Some(displacement)) = Self::decode_data(w == 0b1, true, &binary_data[1..]) {
                    (
                        2 + l,
                        Some(Instruction::ImmediateToAddress(
                            instruction,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            displacement,
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate to Register/Memory
            0b10000000..=0b10000011 => {
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data(w == 0b1, false, &binary_data[(2 + rl)..])
                    {
                        let instruction = match binary_data[1] & 0b00111000 {
                            0b00100000 => AND,
                            0b00001000 => OR,
                            0b00110000 => XOR,
                            _ => return (0, Some(Instruction::Undefined)),
                        };
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(
                                instruction,
                                r_m,
                                displacement,
                            )),
                        )
                    } else {
                        (0, Some(Instruction::Undefined))
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_test_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let w = binary_data[0] & 0b00000001;
        let instruction = match (w == 0b1) | ((binary_data[1] & 0b11000000) == 0b11000000) {
        	true => TEST,
         	false => TESTBYTE,
        };
        match binary_data[0] & 0b11111110 {
            // Register/Memory and Register
            0b10000100 | 0b10000101 => {
                if let (l, Some(reg), Some(r_m)) =
                    Addressing::decode(w, &binary_data[1..], 0b11111111)
                {
                    (
                        2 + l,
                        Some(Instruction::AddressToAddress(instruction, true, reg, r_m)),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate Data and Register/Memory
            0b11110110 | 0b11110111 if (binary_data[1] & 0b00111000) == 0b0 => {
                if let (rl, None, Some(r_m)) = Addressing::decode(w, &binary_data[1..], 0b11000111)
                {
                    if let (dl, Some(displacement)) =
                        Self::decode_data(w == 0b1, false, &binary_data[(2 + rl)..])
                    {
                        (
                            2 + rl + dl,
                            Some(Instruction::ImmediateToAddress(instruction, r_m, displacement)),
                        )
                    } else {
                        (0, Some(Instruction::Undefined))
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Immediate Data and Accumulator
            0b10101000 | 0b10101001 => {
                if let (l, Some(displacement)) = Self::decode_data(w == 0b1, true,&binary_data[1..]) {
                    (
                        1 + l,
                        Some(Instruction::ImmediateToAddress(
                            TEST,
                            Addressing::RegisterAddressing(
                                Register::decode(w == 0b1, true, 0b000).unwrap(),
                            ),
                            displacement,
                        )),
                    )
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_string_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // MOVS (Byte)
            0b10100100 => (1, Some(Instruction::Standalone(MOVSB))),
            // MOVS (Word)
            0b10100101 => (1, Some(Instruction::Standalone(MOVSW))),
            // CMPS (Byte)
            0b10100110 => (1, Some(Instruction::Standalone(CMPSB))),
            // CMPS (Word)
            0b10100111 => (1, Some(Instruction::Standalone(CMPSW))),
            // SCAS (Byte)
            0b10101110 => (1, Some(Instruction::Standalone(SCASB))),
            // SCAS (Word)
            0b10101111 => (1, Some(Instruction::Standalone(SCASW))),
            // LODS (Byte)
            0b10101100 => (1, Some(Instruction::Standalone(LODSB))),
            // LODS (Word)
            0b10101101 => (1, Some(Instruction::Standalone(LODSW))),
            // STOS (Byte)
            0b10101010 => (1, Some(Instruction::Standalone(STOSB))),
            // STOS (Word)
            0b10101011 => (1, Some(Instruction::Standalone(STOSW))),
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_repeat_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let instruction = match binary_data[0] {
            0b11110010 => REP,
            0b11110011 => REPNE,
            _ => return (0, Some(Instruction::Undefined)),
        };
        if let (l, Some(Instruction::Standalone(sub_instruction))) =
            Self::decode_string_instruction(&binary_data[1..])
        {
            (
                1 + l,
                Some(Instruction::WithInstruction(instruction, sub_instruction)),
            )
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode_jump_instruction(pc: u16, binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // CALL / JMP (Direct within Segment)
            0b11101000 | 0b11101001 => {
            	let instruction = match binary_data[0] & 0b1 {
             		0b0 => CALL,
               		0b1 => JMP,
                 	_ => return (0, Some(Instruction::Undefined))
             	};
            	if binary_data.len() < 3 { return (0, Some(Instruction::Undefined)); }
             	let immediate = ((binary_data[2] as u16) << 8) + (binary_data[1] as u16);
            	let displacement = match binary_data[2] & 0x80 {
            		0x0 => (pc as u16) + 0x3 + immediate,
              		_ => ((pc as i16) + 3i16 - ((immediate as i16) * -1i16)) as u16
            	};
            	(3, Some(Instruction::WithImmediate(instruction, Immediate::Word(false, false, displacement))))
            }
            // JMP (Direct within Segment-Short)
            0b11101011 => {
	           	if binary_data.len() < 2 { return (0, Some(Instruction::Undefined)); }
	           	let displacement = match binary_data[1] & 0x80 {
	           		0x0 => (pc as u16) + 0x2 + (binary_data[1] as u16),
	             	_ => (pc as u16) + 0x2 - ((!(binary_data[1] - 0b1)) as u16)
	           	};
                (2, Some(Instruction::WithImmediate(JMPSHORT, Immediate::Word(false, false, displacement))))
            }
            // CALL / JMP (Indirect within Segment / Indirect Intersegment)
            0b11111111 if match_reg(binary_data[1], &[0b010, 0b011, 0b100, 0b101]) => {
            	let instruction = match (binary_data[1] & 0b00111000) >> 3 {
             		0b010 | 0b011 => CALL,
               		0b100 | 0b101 => JMP,
                 	_ => return (0, Some(Instruction::Undefined))
             	};
            	if let (l, None, Some(r_m)) = Addressing::decode(0b1, &binary_data[1..], 0b11000111) {
	                 (2 + l, Some(Instruction::WithAddress(instruction, r_m)))
	            } else {
	                 (0, Some(Instruction::Undefined))
	            }
            }
            // Direct Intersegment
            0b10011010 | 0b11101010 => {
                let instruction = if binary_data[0] == 0b10011010 {
                    CALL
                } else {
                    JMP
                };
                if let (_, Some(Immediate::Word(_, _, offset))) =
                    Self::decode_data(true, true, &binary_data[1..])
                {
                    if let (_, Some(Immediate::Word(_, _, segment))) =
                        Self::decode_data(true, true, &binary_data[3..])
                    {
                        (
                            5,
                            Some(Instruction::WithAddress(
                                instruction,
                                Addressing::DirectIndexAddressing(offset, segment),
                            )),
                        )
                    } else {
                        (0, Some(Instruction::Undefined))
                    }
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_return_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Within Segment
            0b11000011 => (1, Some(Instruction::Standalone(RET))),
            // Within Seg Adding Immed to SP
            0b11000010 => {
                if let (_, Some(data)) = Self::decode_data(true, true, &binary_data[1..]) {
                    (3, Some(Instruction::WithImmediate(RET, data)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            // Intersegment
            0b11001011 => (1, Some(Instruction::Standalone(RETF))),
            // Intersegment Adding Immediate to SP
            0b11001010 => {
                if let (_, Some(data)) = Self::decode_data(true, true, &binary_data[1..]) {
                    (3, Some(Instruction::WithImmediate(RETF, data)))
                } else {
                    (0, Some(Instruction::Undefined))
                }
            }
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_conditional_jump_instruction(pc: u16, binary_data: &[u8]) -> (usize, Option<Instruction>) {
        let instruction = match binary_data[0] {
            0b01110100 => JE,
            0b01111100 => JL,
            0b01111110 => JLE,
            0b01110010 => JB,
            0b01110110 => JBE,
            0b01111010 => JP,
            0b01110000 => JO,
            0b01111000 => JS,
            0b01110101 => JNE,
            0b01111101 => JNL,
            0b01111111 => JNLE,
            0b01110011 => JNB,
            0b01110111 => JNBE,
            0b01111011 => JNP,
            0b01110001 => JNO,
            0b01111001 => JNS,
            0b11100010 => LOOP,
            0b11100001 => LOOPZ,
            0b11100000 => LOOPNZ,
            0b11100011 => JCXZ,
            _ => return (0, Some(Instruction::Undefined)),
        };
        let displacement = match binary_data[1] & 0x80 {
        	0b0 => (pc as i16) + 2i16 + (binary_data[1] as i16),
       		_ => (pc as i16) + 2i16 - (((binary_data[1] as i8) * -1i8) as i16)
        } as u16;
        (
            2,
            Some(Instruction::WithImmediate(
                instruction,
                Immediate::Word(false, true, displacement),
            )),
        )
    }

    pub fn decode_interrupt_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            // Type Specified
            0b11001101 => (
                2,
                Some(Instruction::WithImmediate(
                    INT,
                    Immediate::Byte(false, true, binary_data[1]),
                )),
            ),
            // Type 3
            0b11001100 => (1, Some(Instruction::Standalone(INT))),
            _ => (0, Some(Instruction::Undefined)),
        }
    }

    pub fn decode_escape_instruction(binary_data: &[u8]) -> (usize, Option<Instruction>) {
        if let (l, None, Some(r_m)) = Addressing::decode(0b1, &binary_data[1..], 0b11000111) {
            (2 + l, Some(Instruction::WithAddress(ESC, r_m)))
        } else {
            (0, Some(Instruction::Undefined))
        }
    }

    pub fn decode(pc: u16, binary_data: &[u8]) -> (usize, Option<Instruction>) {
        match binary_data[0] {
            0b11010111 => (1, Some(Instruction::Standalone(XLAT))),
            0b10011111 => (1, Some(Instruction::Standalone(LAHF))),
            0b10011110 => (1, Some(Instruction::Standalone(SAHF))),
            0b10011100 => (1, Some(Instruction::Standalone(PUSHF))),
            0b10011101 => (1, Some(Instruction::Standalone(POPF))),
            0b00110111 => (1, Some(Instruction::Standalone(AAA))),
            0b00100111 => (1, Some(Instruction::Standalone(BAA))),
            0b00111111 => (1, Some(Instruction::Standalone(AAS))),
            0b00101111 => (1, Some(Instruction::Standalone(DAS))),
            0b10011000 => (1, Some(Instruction::Standalone(CBW))),
            0b10011001 => (1, Some(Instruction::Standalone(CWD))),
            // RET (Within Segment / Intersegment)
            0b11000011 | 0b11001011 => Self::decode_return_instruction(binary_data),
            // INT (Type 3)
            0b11001100 => Self::decode_interrupt_instruction(binary_data),
            0b11001110 => (1, Some(Instruction::Standalone(INTO))),
            0b11001111 => (1, Some(Instruction::Standalone(IRET))),
            0b11111000 => (1, Some(Instruction::Standalone(CLC))),
            0b11110101 => (1, Some(Instruction::Standalone(CMC))),
            0b11111001 => (1, Some(Instruction::Standalone(STC))),
            0b11111100 => (1, Some(Instruction::Standalone(CLD))),
            0b11111101 => (1, Some(Instruction::Standalone(STD))),
            0b11111010 => (1, Some(Instruction::Standalone(CLI))),
            0b11111011 => (1, Some(Instruction::Standalone(STI))),
            0b11110100 => (1, Some(Instruction::Standalone(HLT))),
            0b10011011 => (1, Some(Instruction::Standalone(WAIT))),
            0b11110000 => (1, Some(Instruction::Standalone(LOCK))),
            0b11010101 if binary_data[1] == 0b00001010 => (2, Some(Instruction::Standalone(AAD))),
            0b11010100 if binary_data[1] == 0b00001010 => (2, Some(Instruction::Standalone(AAM))),
            // MOV (Register/Memory to Segment Register / Segment Register to Register/Memory)
            0b10001110 | 0b10001100 if (binary_data[1] & 0b00100000) == 0b0 => {
                Self::decode_move_instruction(binary_data)
            }
            // PUSH (Register/Memory), CALL / JMP (Indirect within Segment / Indirect Intersegment)
            0b11111111 if match_reg(binary_data[1], &[0b000, 0b001, 0b010, 0b011, 0b100, 0b101, 0b110]) => match (binary_data[1] & 0b00111000) >> 3 {
                0b110 => Self::decode_push_pop_instruction(binary_data),
                0b010 | 0b011 | 0b100 | 0b101 => Self::decode_jump_instruction(pc, binary_data),
                0b000 | 0b001 => Self::decode_increase_decrease_instruction(binary_data),
                _ => (0, Some(Instruction::Undefined)),
            },
            // POP (Register/Memory)
            0b10001111 if match_reg(binary_data[1], &[0b000]) => {
                Self::decode_push_pop_instruction(binary_data)
            }
            // LEA, LDS, LES
            0b10001101 | 0b11000101 | 0b11000100 => Self::decode_load_instruction(binary_data),
            // CALL (Direct within Segment / Direct Intersegment), JMP (Direct within Segment-Short / Direct within Segment / Direct Intersegment)
            0b11101000 | 0b10011010 | 0b11101001 | 0b11101011 | 0b11101010 => {
                Self::decode_jump_instruction(pc, binary_data)
            }
            // RET (Within Segment Adding Immediate to SP / Intersegment Adding Immediate to SP)
            0b11000010 | 0b11001010 => Self::decode_return_instruction(binary_data),
            // conditional jump and loop
            0b01110000..=0b01111111 | 0b11100000..=0b11100011 => {
                Self::decode_conditional_jump_instruction(pc, binary_data)
            }
            // INT (Type Specified)
            0b11001101 => Self::decode_interrupt_instruction(binary_data),
            // MOV (Immediate to Register/Memory)
            0b11000110 | 0b11000111 if match_reg(binary_data[1], &[0b000]) => {
                Self::decode_move_instruction(binary_data)
            }
            // MOV (Register/Memory to/from Register, Immediate to Register, Memory <-> Accumulator )
            0b10001000..=0b10001011
            | 0b10110000..=0b10110111
            | 0b10111000..=0b10111111
            | 0b10100000
            | 0b10100001
            | 0b10100010
            | 0b10100011 => Self::decode_move_instruction(binary_data),
            // PUSH / POP (Register, Segment Register)
            0b01010000..=0b01010111
            | 0b00000110
            | 0b00001110
            | 0b00010110
            | 0b00011110
            | 0b01011000..=0b01011111
            | 0b00000111
            | 0b00001111
            | 0b00010111
            | 0b00011111 => Self::decode_push_pop_instruction(binary_data),
            // XCHG
            0b10000110 | 0b10000111 | 0b10010000..=0b10010111 => {
                Self::decode_exchange_instruction(binary_data)
            }
            // IN / OUT
            0b11100100 | 0b11100101 | 0b11101100 | 0b11101101 | 0b11100110 | 0b11100111
            | 0b11101110 | 0b11101111 => Self::decode_in_out_instruction(binary_data),
            // ADD / ADC / SUB / SSB / CMP (Reg./Memory with Register to Either)
            0b00000000..=0b00000011
            | 0b00010000..=0b00010011
            | 0b00101000..=0b00101011
            | 0b00011000..=0b00011011
            | 0b00111000..=0b00111011 => Self::decode_arithmic_instruction(binary_data),
            // ADD / ADC / SUB / SSB / CMP (Immediate from Register/Memory)
            0b10000000..=0b10000011
                if match_reg(binary_data[1], &[0b000, 0b010, 0b011, 0b101, 0b111]) =>
            {
                Self::decode_arithmic_instruction(binary_data)
            }
            // ADD / ADC / SUB / SSB / CMP (Immediate to Accumulator)
            0b00000100 | 0b00000101 | 0b00010100 | 0b00010101 | 0b00101100 | 0b00101101
            | 0b00011100 | 0b00011101 | 0b00111100 | 0b00111101 => {
                Self::decode_arithmic_instruction(binary_data)
            }
            // INC / DEC (Register/Memory)
            0b11111110 if match_reg(binary_data[1], &[0b000, 0b001]) => {
                Self::decode_increase_decrease_instruction(binary_data)
            }
            // INC / DEC (Register)
            0b01000000..=0b01000111 | 0b01001000..=0b01001111 => {
                Self::decode_increase_decrease_instruction(binary_data)
            }
            0b11110110 | 0b11110111 if match_reg(binary_data[1], &[0b000, 0b010, 0b011, 0b100, 0b101, 0b110, 0b111]) => match (binary_data[1] & 0b00111000) >> 3 {
                // NEG
                0b011 => Self::decode_negation_instruction(binary_data),
                // MUL, IMUL, DIV, IDIV
                0b100 | 0b101 | 0b110 | 0b111 => {
                    Self::decode_multiply_divide_instruction(binary_data)
                }
                // NOT
                0b010 => Self::decode_not_instruction(binary_data),
                // TEST (Immediate Data and Register/Memory)
                0b000 => Self::decode_test_instruction(binary_data),
                _ => (0, Some(Instruction::Undefined)),
            },
            // shift
            0b11010000..=0b11010011
                if match_reg(binary_data[1], &[0b000, 0b001, 0b010, 0b011, 0b100, 0b101, 0b111]) =>
            {
                Self::decode_shift_instruction(binary_data)
            }
            // AND / OR / XOR (Reg./Memory and Register to Either, Immediate to Accumulator )
            0b00100000..=0b00100011
            | 0b00100100
            | 0b00100101
            | 0b00001000..=0b00001011
            | 0b00001100
            | 0b00001101
            | 0b00110000..=0b00110011
            | 0b00110100
            | 0b00110101 => Self::decode_logic_instruction(binary_data),
            // AND / OR / XOR (Immediate to Register/Memory)
            0b10000000 | 0b10000001
                if match_reg(binary_data[1], &[0b001, 0b100, 0b110]) =>
            {
                Self::decode_logic_instruction(binary_data)
            }
            // TEST (Register/Memory and Register, Immediate Data and Accumulator)
            0b10000100 | 0b10000101 | 0b10101000 | 0b10101001 => {
                Self::decode_test_instruction(binary_data)
            }
            // string manipulation
            0b10100100 | 0b10100101 | 0b10100110 | 0b10100111 | 0b10101110 | 0b10101111
            | 0b10101100 | 0b10101101 | 0b10101010 | 0b10101011 => {
                Self::decode_string_instruction(binary_data)
            }
            // REP
            0b11110010 | 0b11110011 => Self::decode_repeat_instruction(binary_data),
            // ESC
            0b11011000 | 0b11011111 => Self::decode_escape_instruction(binary_data),
            _ => (0, Some(Instruction::Undefined)),
        }
    }
}

impl Display for Instruction {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            &Instruction::Standalone(mnemonic) => write!(f, "{}", mnemonic),
            &Instruction::WithInstruction(mnemonic, sub_mnemonic) => {
                write!(f, "{}\t{}", mnemonic, sub_mnemonic)
            }
            &Instruction::WithAddress(mnemonic, target) => write!(f, "{}\t{}", mnemonic, target),
            &Instruction::AddressToAddress(mnemonic, direction, reg, r_m) => match direction {
                true => write!(f, "{}\t{}, {}", mnemonic, r_m, reg),
                false => write!(f, "{}\t{}, {}", mnemonic, reg, r_m),
            },
            &Instruction::WithImmediate(mnemonic, immediate) => {
                write!(f, "{}\t{}", mnemonic, immediate)
            }
            &Instruction::ImmediateToAddress(mnemonic, target, immediate) => {
                write!(f, "{}\t{}, {}", mnemonic, target, immediate)
            }
            &Instruction::Undefined => write!(f, "(undefined)"),
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::mmvm::instruction::Instruction;

    #[test]
    fn test_decode_move_instruction() {
	    let testcases = [
	        (0x0024, &[0x89, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\t[0002], bx"),
	        (0x0158, &[0x89, 0x16, 0x0a, 0x00, 0x00, 0x00], 4, "mov\t[000a], dx"),
	        (0x0851, &[0xc7, 0x06, 0x0c, 0x00, 0x40, 0x10], 6, "mov\t[000c], 1040"),
	        (0x0848, &[0xc7, 0x06, 0x0e, 0x00, 0x37, 0x10], 6, "mov\t[000e], 1037"),
	        (0x0108, &[0x89, 0x16, 0x12, 0x00, 0x00, 0x00], 4, "mov\t[0012], dx"),
	        (0x085f, &[0xc7, 0x06, 0x14, 0x00, 0x4e, 0x10], 6, "mov\t[0014], 104e"),
	        (0x0af4, &[0xc7, 0x06, 0x24, 0x01, 0x0c, 0x00], 6, "mov\t[0124], 000c"),
	        (0x0e49, &[0x89, 0x16, 0x24, 0x01, 0x00, 0x00], 4, "mov\t[0124], dx"),
	        (0x0aeb, &[0xc7, 0x06, 0x26, 0x01, 0x0c, 0x00], 6, "mov\t[0126], 000c"),
	        (0x0dd7, &[0x89, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\t[0126], dx"),
	        (0x0dce, &[0x89, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\t[0128], dx"),
	        (0x0b02, &[0xc7, 0x06, 0x2c, 0x01, 0x0c, 0x00], 6, "mov\t[012c], 000c"),
	        (0x0e57, &[0x89, 0x16, 0x2c, 0x01, 0x00, 0x00], 4, "mov\t[012c], dx"),
	        (0x0de5, &[0x89, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\t[012e], dx"),
	        (0x0b8f, &[0x89, 0x36, 0x12, 0x02, 0x00, 0x00], 4, "mov\t[0212], si"),
	        (0x0b1f, &[0x89, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "mov\t[0214], si"),
	        (0x0be7, &[0x89, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], dx"),
	        (0x0b16, &[0x89, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], si"),
	        (0x0bde, &[0x89, 0x16, 0x18, 0x02, 0x00, 0x00], 4, "mov\t[0218], dx"),
	        (0x1294, &[0xc7, 0x06, 0x1a, 0x02, 0x04, 0x00], 6, "mov\t[021a], 0004"),
	        (0x0b9d, &[0x89, 0x36, 0x1a, 0x02, 0x00, 0x00], 4, "mov\t[021a], si"),
	        (0x128b, &[0xc7, 0x06, 0x1c, 0x02, 0x04, 0x00], 6, "mov\t[021c], 0004"),
	        (0x129d, &[0x89, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], bx"),
	        (0x0b2d, &[0x89, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], si"),
	        (0x12a4, &[0x89, 0x1e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], bx"),
	        (0x0bf5, &[0x89, 0x16, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], dx"),
	        (0x129b, &[0x89, 0x1e, 0x20, 0x02, 0x00, 0x00], 4, "mov\t[0220], bx"),
	        (0x12a2, &[0xc7, 0x06, 0x22, 0x02, 0x04, 0x00], 6, "mov\t[0222], 0004"),
	        (0x12ab, &[0x89, 0x1e, 0x22, 0x02, 0x00, 0x00], 4, "mov\t[0222], bx"),
	        (0x12ab, &[0x89, 0x1e, 0x24, 0x02, 0x00, 0x00], 4, "mov\t[0224], bx"),
	        (0x12b2, &[0x89, 0x1e, 0x26, 0x02, 0x00, 0x00], 4, "mov\t[0226], bx"),
	        (0x12b9, &[0x89, 0x1e, 0x2a, 0x02, 0x00, 0x00], 4, "mov\t[022a], bx"),
	        (0x0375, &[0x89, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], ax"),
	        (0x05c9, &[0x89, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], dx"),
	        (0x0465, &[0x89, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], bx"),
	        (0x05bb, &[0x89, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], dx"),
	        (0x10de, &[0x89, 0x56, 0xf0, 0x00, 0x00, 0x00], 3, "mov\t[bp-10], dx"),
	        (0x05fa, &[0xc7, 0x46, 0xee, 0x00, 0x00, 0x00], 5, "mov\t[bp-12], 0000"),
	        (0x010f, &[0x89, 0x56, 0xee, 0x00, 0x00, 0x00], 3, "mov\t[bp-12], dx"),
	        (0x02c3, &[0xc7, 0x46, 0xec, 0x00, 0x00, 0x00], 5, "mov\t[bp-14], 0000"),
	        (0x00e9, &[0x89, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\t[bp-14], dx"),
	        (0x0361, &[0x89, 0x56, 0xea, 0x00, 0x00, 0x00], 3, "mov\t[bp-16], dx"),
	        (0x04aa, &[0xc7, 0x46, 0xe8, 0xfc, 0x00, 0x00], 5, "mov\t[bp-18], 00fc"),
	        (0x04a1, &[0xc7, 0x46, 0xe8, 0xfe, 0x00, 0x00], 5, "mov\t[bp-18], 00fe"),
	        (0x04b8, &[0xc7, 0x46, 0xe8, 0x04, 0x01, 0x00], 5, "mov\t[bp-18], 0104"),
	        (0x03e6, &[0x89, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], bx"),
	        (0x04b1, &[0x89, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], dx"),
	        // (0x0922, &[0x88, 0x56, 0xff, 0x00, 0x00, 0x00], 3, "mov\t[bp-1], dl"),
	        (0x0baa, &[0xc7, 0x46, 0xfe, 0x00, 0x00, 0x00], 5, "mov\t[bp-2], 0000"),
	        (0x0515, &[0x89, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], ax"),
	        (0x009d, &[0x89, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], bx"),
	        (0x017a, &[0x89, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], cx"),
	        (0x0ca5, &[0x89, 0x7e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], di"),
	        (0x0150, &[0x89, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], dx"),
	        (0x0bfd, &[0x89, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], si"),
	        (0x0109, &[0x89, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], ax"),
	        (0x0177, &[0x89, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], dx"),
	        (0x015f, &[0xc7, 0x46, 0xfa, 0x00, 0x00, 0x00], 5, "mov\t[bp-6], 0000"),
	        (0x018d, &[0x89, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], cx"),
	        (0x063e, &[0x89, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], dx"),
	        (0x0f1b, &[0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00], 5, "mov\t[bp-8], 0000"),
	        (0x02d1, &[0x89, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], ax"),
	        (0x015c, &[0x89, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], dx"),
	        (0x0f46, &[0xc7, 0x46, 0xf8, 0xff, 0xff, 0x00], 5, "mov\t[bp-8], ffff"),
	        (0x03c9, &[0xc7, 0x46, 0xf6, 0x00, 0x00, 0x00], 5, "mov\t[bp-a], 0000"),
	        (0x0b63, &[0x89, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], dx"),
	        (0x0139, &[0x89, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], si"),
	        (0x0b4a, &[0xc7, 0x46, 0xf4, 0x00, 0x00, 0x00], 5, "mov\t[bp-c], 0000"),
	        (0x04eb, &[0xc7, 0x46, 0xf4, 0x01, 0x00, 0x00], 5, "mov\t[bp-c], 0001"),
	        (0x0257, &[0xc7, 0x46, 0xf4, 0x02, 0x00, 0x00], 5, "mov\t[bp-c], 0002"),
	        (0x057f, &[0xc7, 0x46, 0xf4, 0x06, 0x00, 0x00], 5, "mov\t[bp-c], 0006"),
	        (0x025e, &[0xc7, 0x46, 0xf4, 0x08, 0x00, 0x00], 5, "mov\t[bp-c], 0008"),
	        (0x0265, &[0xc7, 0x46, 0xf4, 0x0a, 0x00, 0x00], 5, "mov\t[bp-c], 000a"),
	        (0x026c, &[0xc7, 0x46, 0xf4, 0x10, 0x00, 0x00], 5, "mov\t[bp-c], 0010"),
	        (0x058b, &[0xc7, 0x46, 0xf4, 0x00, 0x04, 0x00], 5, "mov\t[bp-c], 0400"),
	        (0x0e99, &[0x89, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], cx"),
	        (0x0c53, &[0x89, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], dx"),
	        (0x05e1, &[0xc7, 0x46, 0xf2, 0x20, 0x00, 0x00], 5, "mov\t[bp-e], 0020"),
	        (0x05ec, &[0xc7, 0x46, 0xf2, 0x30, 0x00, 0x00], 5, "mov\t[bp-e], 0030"),
	        (0x0115, &[0x89, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\t[bp-e], dx"),
	        (0x048b, &[0x89, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[bx+2], dx"),
	        (0x0c82, &[0x89, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], dx"),
	        (0x0b1d, &[0x89, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], si"),
	        (0x02ab, &[0x88, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], al"),
	        (0x0489, &[0x89, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], ax"),
	        (0x002c, &[0x89, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], cx"),
	        (0x0124, &[0x89, 0x3f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], di"),
	        (0x02f3, &[0x88, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dl"),
	        (0x00fc, &[0x89, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dx"),
	        (0x0d30, &[0x89, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], si"),
	        (0x0bd8, &[0x89, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[di-2], dx"),
	        (0x0be0, &[0x89, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[di], dx"),
	        (0x014a, &[0x89, 0x7c, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], di"),
	        (0x0138, &[0x89, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], dx"),
	        (0x08d9, &[0xc7, 0x44, 0x06, 0x00, 0x04, 0x00], 5, "mov\t[si+6], 0400"),
	        (0x08c6, &[0x89, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\t[si+8], ax"),
	        (0x0a10, &[0x89, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], bx"),
	        (0x0917, &[0x89, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], dx"),
	        (0x0b20, &[0xc7, 0x44, 0xfe, 0x00, 0x00, 0x00], 5, "mov\t[si-2], 0000"),
	        (0x0bdb, &[0x89, 0x7c, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], di"),
	        (0x0cc9, &[0x89, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], dx"),
	        (0x0925, &[0xc7, 0x04, 0x00, 0x00, 0x00, 0x00], 4, "mov\t[si], 0000"),
	        (0x090a, &[0xc7, 0x04, 0xff, 0x03, 0x00, 0x00], 4, "mov\t[si], 03ff"),
	        (0x0252, &[0x88, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], al"),
	        (0x0be2, &[0x89, 0x3c, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], di"),
	        (0x02e4, &[0x89, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], dx"),
	        (0x08de, &[0xc7, 0x04, 0xff, 0xff, 0x00, 0x00], 4, "mov\t[si], ffff"),
	        (0x009a, &[0x8a, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+4]"),
	        (0x0273, &[0x8a, 0x46, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+a]"),
	        (0x02a0, &[0x8a, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [bx]"),
	        (0x0103, &[0x8a, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [si]"),
	        (0x0088, &[0xb8, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0001"),
	        (0x1231, &[0xb8, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0002"),
	        (0x011c, &[0xb8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0004"),
	        (0x1211, &[0xb8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0006"),
	        (0x0114, &[0xb8, 0x0a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 000a"),
	        (0x0dcc, &[0xb8, 0x11, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0011"),
	        (0x1219, &[0xb8, 0x12, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0012"),
	        (0x0ea6, &[0xb8, 0x13, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0013"),
	        (0x1151, &[0xb8, 0x14, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0014"),
	        (0x0092, &[0xb8, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001c"),
	        (0x0089, &[0xb8, 0x1e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001e"),
	        (0x00a0, &[0xb8, 0x24, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0024"),
	        (0x0d91, &[0xb8, 0x28, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0028"),
	        (0x0d88, &[0xb8, 0x2a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 002a"),
	        (0x0058, &[0xb8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0030"),
	        (0x0053, &[0xb8, 0x31, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0031"),
	        (0x10eb, &[0xb8, 0x36, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0036"),
	        (0x024a, &[0xb8, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0058"),
	        (0x003c, &[0xb8, 0x61, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0061"),
	        (0x024f, &[0xb8, 0x78, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0078"),
	        (0x0d8d, &[0xb8, 0x06, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0106"),
	        (0x0d84, &[0xb8, 0x08, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0108"),
	        (0x0d9b, &[0xb8, 0x0e, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 010e"),
	        (0x12af, &[0xb8, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0218"),
	        (0x12a6, &[0xb8, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 021a"),
	        (0x12bd, &[0xb8, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0220"),
	        (0x08be, &[0xb8, 0x00, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, 0400"),
	        (0x003c, &[0xb8, 0xe5, 0x14, 0x00, 0x00, 0x00], 3, "mov\tax, 14e5"),
	        (0x0ed3, &[0xb8, 0x08, 0x54, 0x00, 0x00, 0x00], 3, "mov\tax, 5408"),
	        (0x0179, &[0x8b, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+4]"),
	        (0x0a7c, &[0x8b, 0x46, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+8]"),
	        (0x030e, &[0x8b, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-14]"),
	        (0x04fc, &[0x8b, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-8]"),
	        (0x0cd7, &[0x8b, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-a]"),
	        (0x0004, &[0x8b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, [bx]"),
	        (0x0161, &[0x8b, 0x44, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, [si+2]"),
	        (0x1165, &[0x8b, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [si+8]"),
	        (0x1184, &[0x8b, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tax, [si+a]"),
	        (0x1171, &[0x8b, 0x44, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tax, [si+c]"),
	        (0x0e7f, &[0x89, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, bx"),
	        (0x086b, &[0x89, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, di"),
	        (0x01c2, &[0x89, 0xd0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, dx"),
	        (0x015c, &[0xb8, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "mov\tax, ffff"),
	        (0x0126, &[0x89, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, si"),
	        (0x003a, &[0x89, 0xe5, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbp, sp"),
	        (0x0534, &[0xbb, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0001"),
	        (0x0932, &[0xbb, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0002"),
	        (0x0010, &[0xbb, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0008"),
	        (0x0010, &[0xbb, 0x0e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 000e"),
	        (0x0010, &[0xbb, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0010"),
	        (0x0010, &[0xbb, 0x16, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0016"),
	        (0x01b1, &[0xbb, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005c"),
	        (0x01a8, &[0xbb, 0x5e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005e"),
	        (0x01bf, &[0xbb, 0x64, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0064"),
	        (0x0269, &[0xbb, 0x68, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0068"),
	        (0x0260, &[0xbb, 0x6a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 006a"),
	        (0x0277, &[0xbb, 0x70, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0070"),
	        (0x0341, &[0xbb, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008c"),
	        (0x0338, &[0xbb, 0x8e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008e"),
	        (0x034f, &[0xbb, 0x94, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0094"),
	        (0x0404, &[0xbb, 0xa4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a4"),
	        (0x03fb, &[0xbb, 0xa6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a6"),
	        (0x0412, &[0xbb, 0xac, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00ac"),
	        (0x05cd, &[0xbb, 0xb4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b4"),
	        (0x05c4, &[0xbb, 0xb6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b6"),
	        (0x05db, &[0xbb, 0xbc, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00bc"),
	        (0x1262, &[0xbb, 0x28, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0128"),
	        (0x1259, &[0xbb, 0x2a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 012a"),
	        (0x1270, &[0xbb, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0130"),
	        (0x1271, &[0xbb, 0x01, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0201"),
	        (0x1268, &[0xbb, 0x03, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0203"),
	        (0x127f, &[0xbb, 0x09, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0209"),
	        (0x12ba, &[0xbb, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0218"),
	        (0x12b1, &[0xbb, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 021a"),
	        (0x12c8, &[0xbb, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0220"),
	        (0x0028, &[0x8b, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\tbx, [0002]"),
	        (0x00c8, &[0x8b, 0x1e, 0x06, 0x00, 0x00, 0x00], 4, "mov\tbx, [0006]"),
	        (0x0077, &[0x8b, 0x1e, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tbx, [000c]"),
	        (0x0078, &[0x8b, 0x1e, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [000e]"),
	        (0x0085, &[0x8b, 0x1e, 0x14, 0x00, 0x00, 0x00], 4, "mov\tbx, [0014]"),
	        (0x0ad0, &[0x8b, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "mov\tbx, [0214]"),
	        (0x0ac7, &[0x8b, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tbx, [0216]"),
	        (0x0ade, &[0x8b, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\tbx, [021c]"),
	        (0x02c8, &[0x8b, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+4]"),
	        (0x017c, &[0x8b, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+6]"),
	        (0x00e6, &[0x8b, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+8]"),
	        (0x0623, &[0x8b, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-18]"),
	        (0x04d2, &[0x8b, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-2]"),
	        (0x0d2d, &[0x8b, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-6]"),
	        (0x029d, &[0x8b, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-a]"),
	        (0x0060, &[0x8b, 0x9f, 0x16, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+16]"),
	        (0x005f, &[0x8b, 0x9f, 0x32, 0x02, 0x00, 0x00], 4, "mov\tbx, [bx+232]"),
	        (0x0056, &[0x8b, 0x9f, 0x34, 0x02, 0x00, 0x00], 4, "mov\tbx, [bx+234]"),
	        (0x006d, &[0x8b, 0x9f, 0x3a, 0x02, 0x00, 0x00], 4, "mov\tbx, [bx+23a]"),
	        (0x114a, &[0x8b, 0x5f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx+2]"),
	        (0x105a, &[0x8b, 0x9f, 0x34, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+34]"),
	        (0x1051, &[0x8b, 0x9f, 0x36, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+36]"),
	        (0x1068, &[0x8b, 0x9f, 0x3c, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+3c]"),
	        (0x00b0, &[0x8b, 0x9f, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+e]"),
	        (0x0468, &[0x8b, 0x5f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx-2]"),
	        (0x1275, &[0x8b, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [bx]"),
	        (0x0145, &[0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [di]"),
	        (0x1162, &[0x8b, 0x5c, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+6]"),
	        (0x0a0a, &[0x8b, 0x5c, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+8]"),
	        (0x02ed, &[0x8b, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+a]"),
	        (0x0f2b, &[0x89, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, di"),
	        (0x00f5, &[0x89, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, dx"),
	        (0x00ac, &[0x89, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, si"),
	        (0x0002, &[0x89, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, sp"),
	        (0x01f5, &[0xc6, 0x04, 0x20, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 20"),
	        (0x01e9, &[0xc6, 0x04, 0x2b, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 2b"),
	        (0x01d3, &[0xc6, 0x04, 0x2d, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 2d"),
	        (0x0211, &[0xc6, 0x04, 0x30, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 30"),
	        (0x0167, &[0xb9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0001"),
	        (0x016c, &[0xb9, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0002"),
	        (0x007a, &[0xb9, 0x03, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0003"),
	        (0x1282, &[0xb9, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0006"),
	        (0x0067, &[0xb9, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 000c"),
	        (0x118a, &[0xb9, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0010"),
	        (0x0e93, &[0x8b, 0x4e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp+8]"),
	        (0x01fc, &[0x8b, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp-2]"),
	        (0x113d, &[0x8b, 0x4f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx+2]"),
	        (0x0174, &[0x8b, 0x4f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx-2]"),
	        (0x116e, &[0x8b, 0x4c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tcx, [si+a]"),
	        (0x00eb, &[0x89, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "mov\tcx, dx"),
	        (0x0c5c, &[0x8b, 0x3e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tdi, [0216]"),
	        (0x0c53, &[0x8b, 0x3e, 0x18, 0x02, 0x00, 0x00], 4, "mov\tdi, [0218]"),
	        (0x0c6a, &[0x8b, 0x3e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tdi, [021e]"),
	        (0x004c, &[0x8b, 0x7e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+4]"),
	        (0x081e, &[0x8b, 0x7e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+8]"),
	        (0x0ca8, &[0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, [di]"),
	        (0x0144, &[0x89, 0xc7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, ax"),
	        (0x083c, &[0x89, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, dx"),
	        (0x0d27, &[0x89, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, si"),
	        (0x0677, &[0x8a, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdl, [bx]"),
	        (0x01b9, &[0xba, 0x60, 0x00, 0x00, 0x00, 0x00], 3, "mov\tdx, 0060"),
	        (0x1206, &[0xba, 0x52, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0152"),
	        (0x11fd, &[0xba, 0x54, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0154"),
	        (0x1214, &[0xba, 0x5a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 015a"),
	        (0x120e, &[0xba, 0x69, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0169"),
	        (0x1205, &[0xba, 0x6b, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 016b"),
	        (0x121c, &[0xba, 0x71, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0171"),
	        (0x1216, &[0xba, 0x80, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0180"),
	        (0x120d, &[0xba, 0x82, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0182"),
	        (0x1224, &[0xba, 0x88, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0188"),
	        (0x121e, &[0xba, 0x97, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0197"),
	        (0x1215, &[0xba, 0x99, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0199"),
	        (0x122c, &[0xba, 0x9f, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 019f"),
	        (0x1226, &[0xba, 0xae, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01ae"),
	        (0x121d, &[0xba, 0xb0, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b0"),
	        (0x1234, &[0xba, 0xb6, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b6"),
	        (0x122e, &[0xba, 0xc5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c5"),
	        (0x1225, &[0xba, 0xc7, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c7"),
	        (0x123c, &[0xba, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01cd"),
	        (0x1236, &[0xba, 0xdc, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01dc"),
	        (0x122d, &[0xba, 0xde, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01de"),
	        (0x1244, &[0xba, 0xe4, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01e4"),
	        (0x128c, &[0xba, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f3"),
	        (0x1283, &[0xba, 0xf5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f5"),
	        (0x129a, &[0xba, 0xfb, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01fb"),
	        (0x003d, &[0xba, 0xd2, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, 04d2"),
	        (0x0dab, &[0x8b, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\tdx, [0126]"),
	        (0x0da2, &[0x8b, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\tdx, [0128]"),
	        (0x0db9, &[0x8b, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tdx, [012e]"),
	        (0x0106, &[0x8b, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+4]"),
	        (0x0112, &[0x8b, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+6]"),
	        (0x010c, &[0x8b, 0x56, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+8]"),
	        (0x0e9c, &[0x8b, 0x56, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+a]"),
	        (0x0aac, &[0x8b, 0x56, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+c]"),
	        (0x046b, &[0x8b, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-14]"),
	        (0x04bd, &[0x8b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-18]"),
	        (0x05f1, &[0x8b, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-2]"),
	        (0x01f9, &[0x8b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-4]"),
	        (0x0215, &[0x8b, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-6]"),
	        (0x02e8, &[0x8b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-8]"),
	        (0x0638, &[0x8b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-a]"),
	        (0x0cac, &[0x8b, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-c]"),
	        (0x073d, &[0x8b, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-e]"),
	        (0x04ae, &[0x8b, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-2]"),
	        (0x0171, &[0x8b, 0x57, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-4]"),
	        (0x00e9, &[0x8b, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [bx]"),
	        (0x0c7f, &[0x8b, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [di-2]"),
	        (0x0c8b, &[0x8b, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [di]"),
	        (0x0153, &[0x8b, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+2]"),
	        (0x0993, &[0x8b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+6]"),
	        (0x0914, &[0x8b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+8]"),
	        (0x09fb, &[0x8b, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+a]"),
	        (0x1187, &[0x8b, 0x54, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+c]"),
	        (0x0bb7, &[0x8b, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [si-2]"),
	        (0x02e1, &[0x8b, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [si]"),
	        (0x1267, &[0x89, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, ax"),
	        (0x11db, &[0x89, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, bx"),
	        (0x1179, &[0x89, 0xca, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, cx"),
	        (0x006a, &[0x89, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, di"),
	        (0x083e, &[0x89, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, si"),
	        (0x00a5, &[0x8b, 0x36, 0x04, 0x00, 0x00, 0x00], 4, "mov\tsi, [0004]"),
	        (0x0054, &[0x8b, 0x36, 0x0a, 0x00, 0x00, 0x00], 4, "mov\tsi, [000a]"),
	        (0x0055, &[0x8b, 0x36, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tsi, [000c]"),
	        (0x0062, &[0x8b, 0x36, 0x12, 0x00, 0x00, 0x00], 4, "mov\tsi, [0012]"),
	        (0x0de5, &[0x8b, 0x36, 0x26, 0x01, 0x00, 0x00], 4, "mov\tsi, [0126]"),
	        (0x0ddc, &[0x8b, 0x36, 0x28, 0x01, 0x00, 0x00], 4, "mov\tsi, [0128]"),
	        (0x0df3, &[0x8b, 0x36, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tsi, [012e]"),
	        (0x0ba1, &[0x8b, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\tsi, [0216]"),
	        (0x0b98, &[0x8b, 0x36, 0x18, 0x02, 0x00, 0x00], 4, "mov\tsi, [0218]"),
	        (0x0baf, &[0x8b, 0x36, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tsi, [021e]"),
	        (0x00de, &[0x8b, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+4]"),
	        (0x085c, &[0x8b, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+6]"),
	        (0x0132, &[0x8b, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+8]"),
	        (0x0a79, &[0x8b, 0x76, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+a]"),
	        (0x0c00, &[0x8b, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, [si]"),
	        (0x0290, &[0x89, 0xc6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, ax"),
	        (0x0afa, &[0x89, 0xd6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, dx"),
	        (0x1160, &[0x89, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, sp"),
	        (0x0185, &[0x89, 0xec, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsp, bp"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_move_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, testcase.2, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_push_pop_instruction() {
        let testcases = [
	        (0x0ec8, &[0x58, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tax"),
	        (0x0181, &[0x5d, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbp"),
	        (0x0043, &[0x5b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbx"),
	        (0x0183, &[0x5f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdi"),
	        (0x0302, &[0x5a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdx"),
	        (0x0184, &[0x5e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tsi"),
	        (0x08a4, &[0xff, 0x36, 0x1e, 0x00, 0x00, 0x00], 4, "push\t[001e]"),
	        (0x089b, &[0xff, 0x36, 0x20, 0x00, 0x00, 0x00], 4, "push\t[0020]"),
	        (0x08b2, &[0xff, 0x36, 0x26, 0x00, 0x00, 0x00], 4, "push\t[0026]"),
	        (0x0b17, &[0xff, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "push\t[0214]"),
	        (0x0b0e, &[0xff, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "push\t[0216]"),
	        (0x0b25, &[0xff, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "push\t[021c]"),
	        (0x00ce, &[0xff, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "push\t[bp+4]"),
	        (0x0822, &[0xff, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "push\t[bp+6]"),
	        (0x0ab2, &[0xff, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "push\t[bp+8]"),
	        (0x027d, &[0xff, 0x76, 0x0c, 0x00, 0x00, 0x00], 3, "push\t[bp+c]"),
	        (0x00a4, &[0xff, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bp-2]"),
	        (0x09da, &[0xff, 0x76, 0xfc, 0x00, 0x00, 0x00], 3, "push\t[bp-4]"),
	        (0x0284, &[0xff, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "push\t[bp-6]"),
	        (0x0287, &[0xff, 0x76, 0xf8, 0x00, 0x00, 0x00], 3, "push\t[bp-8]"),
	        (0x0c04, &[0xff, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "push\t[bp-a]"),
	        (0x0281, &[0xff, 0x76, 0xf4, 0x00, 0x00, 0x00], 3, "push\t[bp-c]"),
	        (0x074e, &[0xff, 0x76, 0xf2, 0x00, 0x00, 0x00], 3, "push\t[bp-e]"),
	        (0x0f2c, &[0xff, 0xb7, 0x34, 0x00, 0x00, 0x00], 4, "push\t[bx+34]"),
	        (0x0f23, &[0xff, 0xb7, 0x36, 0x00, 0x00, 0x00], 4, "push\t[bx+36]"),
	        (0x0f3a, &[0xff, 0xb7, 0x3c, 0x00, 0x00, 0x00], 4, "push\t[bx+3c]"),
	        (0x0559, &[0xff, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bx-2]"),
	        (0x004b, &[0xff, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "push\t[bx]"),
	        (0x0938, &[0xff, 0x74, 0x02, 0x00, 0x00, 0x00], 3, "push\t[si+2]"),
	        (0x09dd, &[0xff, 0x74, 0x08, 0x00, 0x00, 0x00], 3, "push\t[si+8]"),
	        (0x0030, &[0x50, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tax"),
	        (0x0039, &[0x55, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbp"),
	        (0x0502, &[0x53, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbx"),
	        (0x002e, &[0x51, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tcx"),
	        (0x004b, &[0x57, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdi"),
	        (0x002f, &[0x52, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdx"),
	        (0x004a, &[0x56, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tsi"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_push_pop_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_exchange_instruction() {
        let testcases = [
	        (0x123d, &[0x87, 0x1e, 0x10, 0x02, 0x00, 0x00], 4, "xchg\t[0210], bx"),
	        (0x1234, &[0x87, 0x1e, 0x12, 0x02, 0x00, 0x00], 4, "xchg\t[0212], bx"),
	        (0x124b, &[0x87, 0x1e, 0x18, 0x02, 0x00, 0x00], 4, "xchg\t[0218], bx"),
	        (0x1176, &[0x91, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "xchg\tcx, ax"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_exchange_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_in_out_instruction() {
        let testcases = [
	        (0x00e4, &[0xec, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "in\tal, dx"),
	        (0x00e2, &[0xe5, 0x83, 0x00, 0x00, 0x00, 0x00], 2, "in\tax, 83"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_in_out_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_load_instruction() {
        let testcases = [
	        (0x008c, &[0x8d, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+4]"),
	        (0x0364, &[0x8d, 0x46, 0x06, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+6]"),
	        (0x00ec, &[0x8d, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-18]"),
	        (0x0957, &[0x8d, 0x46, 0xff, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-1]"),
	        (0x0e6c, &[0x8d, 0x46, 0xe0, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-20]"),
	        (0x0368, &[0x8d, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-a]"),
	        (0x0396, &[0x8d, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-c]"),
	        (0x0acf, &[0x8d, 0x45, 0x30, 0x00, 0x00, 0x00], 3, "lea\tax, [di+30]"),
	        (0x0ad4, &[0x8d, 0x44, 0x01, 0x00, 0x00, 0x00], 3, "lea\tax, [si+1]"),
	        (0x009a, &[0x8d, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+6]"),
	        (0x108a, &[0x8d, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+8]"),
	        (0x03e2, &[0x8d, 0x9e, 0xe7, 0xfb, 0x00, 0x00], 4, "lea\tbx, [bp-419]"),
	        (0x0bcd, &[0x8d, 0x5d, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [di+2]"),
	        (0x0cbe, &[0x8d, 0x5c, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [si+2]"),
	        (0x0009, &[0x8d, 0x4f, 0x04, 0x00, 0x00, 0x00], 3, "lea\tcx, [bx+4]"),
	        (0x0006, &[0x8d, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "lea\tdx, [bx+2]"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_load_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_arithmic_instruction() {
        let testcases = [
	       	(0x1124, &[0x11, 0xc9, 0x00, 0x00, 0x00, 0x00], 2, "adc\tcx, cx"),
	        (0x06b8, &[0x83, 0x46, 0xec, 0x02, 0x00, 0x00], 4, "add\t[bp-14], 2"),
	        (0x0652, &[0x01, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "add\t[bp-14], dx"),
	        (0x018d, &[0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "add\t[bx+si], al"),
	        (0x00df, &[0x00, 0x55, 0x89, 0x00, 0x00, 0x00], 3, "add\t[di-77], dl"),
	        (0x0147, &[0x83, 0x05, 0x02, 0x00, 0x00, 0x00], 3, "add\t[di], 2"),
	        (0x016c, &[0x83, 0x05, 0x04, 0x00, 0x00, 0x00], 3, "add\t[di], 4"),
	        (0x0119, &[0x03, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "add\tax, [bp-4]"),
	        (0x0a0d, &[0x83, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "add\tbx, 1"),
	        (0x0462, &[0x83, 0xc3, 0x02, 0x00, 0x00, 0x00], 3, "add\tbx, 2"),
	        (0x1140, &[0x83, 0xc3, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, 4"),
	        (0x0ae2, &[0x03, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+4]"),
	        (0x0048, &[0x03, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+6]"),
	        (0x1273, &[0x01, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "add\tbx, dx"),
	        (0x00db, &[0x00, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "add\tcl, ch"),
	        (0x00ed, &[0x83, 0xc1, 0x02, 0x00, 0x00, 0x00], 3, "add\tcx, 2"),
	        (0x000c, &[0x01, 0xc1, 0x00, 0x00, 0x00, 0x00], 2, "add\tcx, ax"),
	        (0x1133, &[0x01, 0xcf, 0x00, 0x00, 0x00, 0x00], 2, "add\tdi, cx"),
	        (0x0af2, &[0x81, 0xc2, 0xff, 0x03, 0x00, 0x00], 4, "add\tdx, 03ff"),
	        (0x05be, &[0x83, 0xc2, 0x02, 0x00, 0x00, 0x00], 3, "add\tdx, 2"),
	        (0x0072, &[0x83, 0xc2, 0x30, 0x00, 0x00, 0x00], 3, "add\tdx, 30"),
	        (0x128b, &[0x03, 0x16, 0x30, 0x00, 0x00, 0x00], 4, "add\tdx, [0030]"),
	        (0x0dec, &[0x03, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "add\tdx, [0126]"),
	        (0x0de3, &[0x03, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "add\tdx, [0128]"),
	        (0x0dfa, &[0x03, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "add\tdx, [012e]"),
	        (0x0ae0, &[0x03, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "add\tdx, [0214]"),
	        (0x0ad7, &[0x03, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "add\tdx, [0216]"),
	        (0x0aee, &[0x03, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "add\tdx, [021c]"),
	        (0x0840, &[0x03, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "add\tdx, [bp+6]"),
	        (0x0caf, &[0x03, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "add\tdx, [bp-a]"),
	        (0x0bc0, &[0x01, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "add\tdx, si"),
	        (0x0b9a, &[0x83, 0xc6, 0x02, 0x00, 0x00, 0x00], 3, "add\tsi, 2"),
	        (0x1130, &[0x01, 0xce, 0x00, 0x00, 0x00, 0x00], 2, "add\tsi, cx"),
	        (0x0097, &[0x83, 0xc4, 0x06, 0x00, 0x00, 0x00], 3, "add\tsp, 6"),
	        (0x093e, &[0x83, 0xc4, 0x08, 0x00, 0x00, 0x00], 3, "add\tsp, 8"),
	        (0x028d, &[0x83, 0xc4, 0x0a, 0x00, 0x00, 0x00], 3, "add\tsp, a"),
	        (0x0512, &[0x83, 0xc4, 0x0c, 0x00, 0x00, 0x00], 3, "add\tsp, c"),
	        (0x0234, &[0x80, 0x7e, 0x0a, 0x58, 0x00, 0x00], 4, "cmp byte\t[bp+a], 58"),
	        (0x020b, &[0x80, 0x7e, 0x0a, 0x6f, 0x00, 0x00], 4, "cmp byte\t[bp+a], 6f"),
	        (0x023a, &[0x80, 0x7e, 0x0a, 0x70, 0x00, 0x00], 4, "cmp byte\t[bp+a], 70"),
	        (0x022e, &[0x80, 0x7e, 0x0a, 0x78, 0x00, 0x00], 4, "cmp byte\t[bp+a], 78"),
	        (0x04d5, &[0x80, 0x3f, 0x00, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 0"),
	        (0x0630, &[0x80, 0x3f, 0x20, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 20"),
	        (0x0626, &[0x80, 0x3f, 0x2b, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2b"),
	        (0x062b, &[0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2d"),
	        (0x0384, &[0x80, 0x3f, 0x2e, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2e"),
	        (0x00e1, &[0x80, 0x3c, 0x2a, 0x00, 0x00, 0x00], 3, "cmp byte\t[si], 2a"),
	        (0x00c1, &[0x83, 0x3e, 0x06, 0x00, 0x00, 0x00], 5, "cmp\t[0006], 0"),
	        (0x0070, &[0x83, 0x3e, 0x0c, 0x00, 0x00, 0x00], 5, "cmp\t[000c], 0"),
	        (0x0071, &[0x83, 0x3e, 0x0e, 0x00, 0x00, 0x00], 5, "cmp\t[000e], 0"),
	        (0x007e, &[0x83, 0x3e, 0x14, 0x00, 0x00, 0x00], 5, "cmp\t[0014], 0"),
	        (0x0b68, &[0x83, 0x3e, 0x12, 0x02, 0x00, 0x00], 5, "cmp\t[0212], 0"),
	        (0x0b5f, &[0x83, 0x3e, 0x14, 0x02, 0x00, 0x00], 5, "cmp\t[0214], 0"),
	        (0x0ad7, &[0x39, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], bx"),
	        (0x0aee, &[0x39, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], dx"),
	        (0x0ace, &[0x39, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], bx"),
	        (0x0ae5, &[0x39, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], dx"),
	        (0x0b76, &[0x83, 0x3e, 0x1a, 0x02, 0x00, 0x00], 5, "cmp\t[021a], 0"),
	        (0x0ae5, &[0x39, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], bx"),
	        (0x0afc, &[0x39, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], dx"),
	        (0x0b3f, &[0x83, 0x7e, 0x04, 0x00, 0x00, 0x00], 4, "cmp\t[bp+4], 0"),
	        (0x0dbd, &[0x39, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], dx"),
	        (0x003f, &[0x39, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], si"),
	        (0x0c36, &[0x83, 0x7e, 0x06, 0x00, 0x00, 0x00], 4, "cmp\t[bp+6], 0"),
	        (0x021d, &[0x83, 0x7e, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\t[bp+c], 0"),
	        (0x0aa6, &[0x83, 0x7e, 0x0c, 0x01, 0x00, 0x00], 4, "cmp\t[bp+c], 1"),
	        (0x013f, &[0x83, 0x7e, 0x0e, 0x00, 0x00, 0x00], 4, "cmp\t[bp+e], 0"),
	        (0x0655, &[0x83, 0x7e, 0xee, 0x00, 0x00, 0x00], 4, "cmp\t[bp-12], 0"),
	        (0x0308, &[0x83, 0x7e, 0xec, 0x00, 0x00, 0x00], 4, "cmp\t[bp-14], 0"),
	        (0x0378, &[0x39, 0x46, 0xea, 0x00, 0x00, 0x00], 3, "cmp\t[bp-16], ax"),
	        (0x01cd, &[0x83, 0x7e, 0xfe, 0x00, 0x00, 0x00], 4, "cmp\t[bp-2], 0"),
	        (0x103a, &[0x39, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bp-2], dx"),
	        (0x0a13, &[0x83, 0x7e, 0xfc, 0x00, 0x00, 0x00], 4, "cmp\t[bp-4], 0"),
	        (0x010e, &[0x83, 0x7e, 0xfc, 0x09, 0x00, 0x00], 4, "cmp\t[bp-4], 9"),
	        (0x07c6, &[0x83, 0x7e, 0xfa, 0x00, 0x00, 0x00], 4, "cmp\t[bp-6], 0"),
	        (0x0bd0, &[0x39, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], bx"),
	        (0x0bc4, &[0x39, 0x7e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], di"),
	        (0x0cb4, &[0x39, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], si"),
	        (0x02db, &[0x83, 0x7e, 0xf8, 0x25, 0x00, 0x00], 4, "cmp\t[bp-8], 25"),
	        (0x060b, &[0x83, 0x7e, 0xf8, 0x58, 0x00, 0x00], 4, "cmp\t[bp-8], 58"),
	        (0x04f2, &[0x83, 0x7e, 0xf8, 0x70, 0x00, 0x00], 4, "cmp\t[bp-8], 70"),
	        (0x0605, &[0x83, 0x7e, 0xf8, 0x78, 0x00, 0x00], 4, "cmp\t[bp-8], 78"),
	        (0x03b6, &[0x83, 0x7e, 0xf6, 0x00, 0x00, 0x00], 4, "cmp\t[bp-a], 0"),
	        (0x0298, &[0x39, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "cmp\t[bp-a], si"),
	        (0x03a6, &[0x83, 0x7e, 0xf4, 0x00, 0x00, 0x00], 4, "cmp\t[bp-c], 0"),
	        (0x0584, &[0x81, 0x7e, 0xf4, 0x01, 0x04, 0x00], 5, "cmp\t[bp-c], 0401"),
	        (0x0b4f, &[0x83, 0x7e, 0xf4, 0x02, 0x00, 0x00], 4, "cmp\t[bp-c], 2"),
	        (0x0f21, &[0x83, 0xbf, 0x34, 0x00, 0x00, 0x00], 5, "cmp\t[bx+34], 0"),
	        (0x0f18, &[0x83, 0xbf, 0x36, 0x00, 0x00, 0x00], 5, "cmp\t[bx+36], 0"),
	        (0x0f2f, &[0x83, 0xbf, 0x3c, 0x00, 0x00, 0x00], 5, "cmp\t[bx+3c], 0"),
	        (0x0d4b, &[0x39, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bx-2], si"),
	        (0x001e, &[0x81, 0x3f, 0x53, 0x53, 0x00, 0x00], 4, "cmp\t[bx], 5353"),
	        (0x0d64, &[0x39, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[di-2], dx"),
	        (0x014d, &[0x83, 0x7c, 0x02, 0x00, 0x00, 0x00], 4, "cmp\t[si+2], 0"),
	        (0x1199, &[0x39, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "cmp\t[si+6], dx"),
	        (0x08a3, &[0x83, 0x7c, 0x08, 0x00, 0x00, 0x00], 4, "cmp\t[si+8], 0"),
	        (0x0998, &[0x39, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "cmp\t[si], dx"),
	        (0x0964, &[0x3d, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "cmp\tax, 0001"),
	        (0x1146, &[0x3b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, [bx]"),
	        (0x110e, &[0x39, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, cx"),
	        (0x0b87, &[0x3d, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tax, ffff"),
	        (0x0013, &[0x81, 0xfb, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\tbx, 000c"),
	        (0x0013, &[0x81, 0xfb, 0x14, 0x00, 0x00, 0x00], 4, "cmp\tbx, 0014"),
	        (0x0013, &[0x81, 0xfb, 0x12, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0212"),
	        (0x0013, &[0x81, 0xfb, 0x14, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0214"),
	        (0x0013, &[0x81, 0xfb, 0x1a, 0x02, 0x00, 0x00], 4, "cmp\tbx, 021a"),
	        (0x1113, &[0x83, 0xf9, 0x10, 0x00, 0x00, 0x00], 3, "cmp\tcx, 10"),
	        (0x0f26, &[0x83, 0xff, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tdi, 14"),
	        (0x0ac3, &[0x83, 0xff, 0x09, 0x00, 0x00, 0x00], 3, "cmp\tdi, 9"),
	        (0x098e, &[0x83, 0xff, 0x0a, 0x00, 0x00, 0x00], 3, "cmp\tdi, a"),
	        (0x1193, &[0x39, 0xdf, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, bx"),
	        (0x0bc9, &[0x39, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, si"),
	        (0x0303, &[0x83, 0xfa, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tdx, -1"),
	        (0x1269, &[0x83, 0xfa, 0x15, 0x00, 0x00, 0x00], 3, "cmp\tdx, 15"),
	        (0x0d85, &[0x83, 0xfa, 0x1a, 0x00, 0x00, 0x00], 3, "cmp\tdx, 1a"),
	        (0x0b66, &[0x83, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "cmp\tdx, 4"),
	        (0x089e, &[0x81, 0xfe, 0x1c, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001c"),
	        (0x0895, &[0x81, 0xfe, 0x1e, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001e"),
	        (0x08ac, &[0x81, 0xfe, 0x24, 0x00, 0x00, 0x00], 4, "cmp\tsi, 0024"),
	        (0x1054, &[0x83, 0xfe, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tsi, 14"),
	        (0x0062, &[0x83, 0xfe, 0x05, 0x00, 0x00, 0x00], 3, "cmp\tsi, 5"),
	        (0x0834, &[0x39, 0xfe, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tsi, di"),
	        (0x00e5, &[0x18, 0x8b, 0x56, 0x04, 0x00, 0x00], 4, "sbb\t[bp+di+456], cl"),
	        (0x01dd, &[0x83, 0x5e, 0xfe, 0x00, 0x00, 0x00], 4, "sbb\t[bp-2], 0"),
	        (0x11a5, &[0x19, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "sbb\tbx, di"),
	        (0x06b4, &[0x83, 0x6e, 0xfc, 0x02, 0x00, 0x00], 4, "sub\t[bp-4], 2"),
	        (0x0d8d, &[0x2d, 0x20, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0020"),
	        (0x0106, &[0x2d, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0030"),
	        (0x0aca, &[0x2d, 0xa9, 0xff, 0x00, 0x00, 0x00], 3, "sub\tax, ffa9"),
	        (0x110c, &[0x29, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "sub\tax, si"),
	        (0x0d82, &[0x83, 0xea, 0x61, 0x00, 0x00, 0x00], 3, "sub\tdx, 61"),
	        (0x05f4, &[0x2b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-18]"),
	        (0x063b, &[0x2b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-4]"),
	        (0x0c5f, &[0x2b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-a]"),
	        (0x11a2, &[0x2b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+6]"),
	        (0x09fe, &[0x2b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+8]"),
	        (0x083a, &[0x29, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "sub\tdx, si"),
	        (0x02ba, &[0x81, 0xec, 0x1a, 0x04, 0x00, 0x00], 4, "sub\tsp, 041a"),
	        (0x0103, &[0x83, 0xec, 0x18, 0x00, 0x00, 0x00], 3, "sub\tsp, 18"),
	        (0x0e69, &[0x83, 0xec, 0x20, 0x00, 0x00, 0x00], 3, "sub\tsp, 20"),
	        (0x0d09, &[0x83, 0xec, 0x06, 0x00, 0x00, 0x00], 3, "sub\tsp, 6"),
	        (0x0f13, &[0x83, 0xec, 0x0a, 0x00, 0x00, 0x00], 3, "sub\tsp, a"),
	        (0x012e, &[0x83, 0xec, 0x0c, 0x00, 0x00, 0x00], 3, "sub\tsp, c"),
	        (0x0c1d, &[0x83, 0xec, 0x0e, 0x00, 0x00, 0x00], 3, "sub\tsp, e"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_arithmic_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_increase_decrease_instruction() {
        let testcases = [
	        (0x02cb, &[0xff, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "inc\t[bp+4]"),
	        (0x0635, &[0xff, 0x46, 0xee, 0x00, 0x00, 0x00], 3, "inc\t[bp-12]"),
	        (0x031c, &[0xff, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "inc\t[bp-14]"),
	        (0x0674, &[0xff, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "inc\t[bp-18]"),
	        (0x04dd, &[0xff, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "inc\t[bp-2]"),
	        (0x02ad, &[0xff, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "inc\t[bp-a]"),
	        (0x0c0f, &[0xff, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "inc\t[bp-c]"),
	        (0x02f0, &[0xff, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "inc\t[si+a]"),
	        (0x084e, &[0x40, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tax"),
	        (0x0e7e, &[0x43, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tbx"),
	        (0x0f4b, &[0x47, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdi"),
	        (0x0b5b, &[0x42, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdx"),
	        (0x007f, &[0x46, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tsi"),
	        (0x0664, &[0xff, 0x4e, 0xfc, 0x00, 0x00, 0x00], 3, "dec\t[bp-4]"),
	        (0x0771, &[0xff, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "dec\t[bp-6]"),
	        (0x04e0, &[0xff, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "dec\t[bp-c]"),
	        (0x1291, &[0x4b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tbx"),
	        (0x1143, &[0x49, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tcx"),
	        (0x1135, &[0x4f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdi"),
	        (0x02e3, &[0x4a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdx"),
	        (0x00a9, &[0x4e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tsi"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) =
                Instruction::decode_increase_decrease_instruction(testcase.1)
            {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_negation_instruction() {
        let testcases = [
	        (0x01d7, &[0xf7, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "neg\t[bp-2]"),
	        (0x01da, &[0xf7, 0x5e, 0xfc, 0x00, 0x00, 0x00], 3, "neg\t[bp-4]"),
	        (0x03bc, &[0xf7, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "neg\t[bp-a]"),
	        (0x0311, &[0xf7, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "neg\tax"),
	        (0x0156, &[0xf7, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "neg\tdx"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_negation_instruction(testcase.1) {
                assert_eq!(
                    l, testcase.2,
                    "#{}, result: {}, expected: {}",
                    i, l, testcase.2
                );
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                )
            }
        }
    }

    #[test]
    fn test_decode_multiply_divide_instruction() {
        let testcases = [
            (0x0117, &[0xf7, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "mul\tdi"),
            (0x1174, &[0xf7, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "div\tbx"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) =
                Instruction::decode_multiply_divide_instruction(testcase.1)
            {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    // #[test]
    // fn test_decode_not_instruction() {
    //     let testcases: [_; 0] = [];

    //     for (i, testcase) in testcases.into_iter().enumerate() {
    //         if let (l, Some(instruction)) = Instruction::decode_not_instruction(testcase.0) {
    //             assert_eq!(
    //                 l, testcase.1,
    //                 "#{}, result: {}, expected: {}",
    //                 i, l, testcase.1
    //             );
    //             assert_eq!(
    //                 format!("{}", instruction),
    //                 testcase.2,
    //                 "#{}, result: {}, expected: {}",
    //                 i,
    //                 instruction,
    //                 testcase.2
    //             )
    //         }
    //     }
    // }

    #[test]
    fn test_decode_shfit_instruction() {
        let testcases = [
	        (0x1292, &[0xd1, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, 1"),
	        (0x006c, &[0xd3, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, cl"),
	        (0x118d, &[0xd1, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "shl\tax, 1"),
	        (0x00ae, &[0xd1, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "shl\tbx, 1"),
	        (0x007d, &[0xd3, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdi, cl"),
	        (0x126e, &[0xd1, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdx, 1"),
	        (0x1120, &[0xd1, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "shr\tcx, 1"),
	        (0x1191, &[0xd1, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tbx, 1"),
	        (0x118f, &[0xd1, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tdx, 1"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_shift_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_logic_instruction() {
        let testcases = [
        	(0x00dd, &[0x21, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "and\t[bx+si], ax"),
	        (0x0fb9, &[0x81, 0x64, 0x04, 0x7f, 0xfe, 0x00], 5, "and\t[si+4], fe7f"),
	        (0x0fda, &[0x81, 0x64, 0x04, 0xff, 0xfe, 0x00], 5, "and\t[si+4], feff"),
	        (0x0890, &[0x81, 0x64, 0x04, 0x7f, 0xff, 0x00], 5, "and\t[si+4], ff7f"),
	        (0x03de, &[0x81, 0xe7, 0xef, 0xff, 0x00, 0x00], 4, "and\tdi, ffef"),
	        (0x03d4, &[0x81, 0xe7, 0xfb, 0xff, 0x00, 0x00], 4, "and\tdi, fffb"),
	        (0x006e, &[0x81, 0xe2, 0x07, 0x00, 0x00, 0x00], 4, "and\tdx, 0007"),
	        (0x01bc, &[0x23, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "and\tdx, [bp+6]"),
	        (0x0941, &[0x21, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "and\tdx, ax"),
	        (0x0af6, &[0x81, 0xe2, 0x00, 0xfc, 0x00, 0x00], 4, "and\tdx, fc00"),
	        (0x0b5c, &[0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00], 4, "and\tdx, fffe"),
			(0x08cd, &[0x81, 0x4c, 0x04, 0x04, 0x00, 0x00], 5, "or\t[si+4], 0004"),
			(0x08fa, &[0x81, 0x4c, 0x04, 0x08, 0x00, 0x00], 5, "or\t[si+4], 0008"),
			(0x0948, &[0x81, 0x4c, 0x04, 0x20, 0x00, 0x00], 5, "or\t[si+4], 0020"),
			(0x08d4, &[0x81, 0x4c, 0x04, 0x48, 0x00, 0x00], 5, "or\t[si+4], 0048"),
			(0x0895, &[0x81, 0x4c, 0x04, 0x00, 0x01, 0x00], 5, "or\t[si+4], 0100"),
			(0x02d4, &[0x09, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, ax"),
			(0x111a, &[0x09, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, di"),
			(0x0325, &[0x81, 0xcf, 0x01, 0x00, 0x00, 0x00], 4, "or\tdi, 0001"),
			(0x032b, &[0x81, 0xcf, 0x02, 0x00, 0x00, 0x00], 4, "or\tdi, 0002"),
			(0x0331, &[0x81, 0xcf, 0x04, 0x00, 0x00, 0x00], 4, "or\tdi, 0004"),
			(0x0337, &[0x81, 0xcf, 0x08, 0x00, 0x00, 0x00], 4, "or\tdi, 0008"),
			(0x033d, &[0x81, 0xcf, 0x10, 0x00, 0x00, 0x00], 4, "or\tdi, 0010"),
			(0x03ee, &[0x81, 0xcf, 0x20, 0x00, 0x00, 0x00], 4, "or\tdi, 0020"),
			(0x03f8, &[0x81, 0xcf, 0x40, 0x00, 0x00, 0x00], 4, "or\tdi, 0040"),
			(0x0402, &[0x81, 0xcf, 0x80, 0x00, 0x00, 0x00], 4, "or\tdi, 0080"),
			(0x037d, &[0x81, 0xcf, 0x00, 0x01, 0x00, 0x00], 4, "or\tdi, 0100"),
			(0x03ac, &[0x81, 0xcf, 0x00, 0x02, 0x00, 0x00], 4, "or\tdi, 0200"),
			(0x051b, &[0x81, 0xcf, 0x00, 0x04, 0x00, 0x00], 4, "or\tdi, 0400"),
			(0x0343, &[0x81, 0xcf, 0x00, 0x10, 0x00, 0x00], 4, "or\tdi, 1000"),
			(0x004f, &[0x09, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "or\tdi, di"),
			(0x0218, &[0x0b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "or\tdx, [bp-8]"),
			(0x0aa2, &[0x09, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, ax"),
			(0x04b4, &[0x09, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, dx"),
			(0x084a, &[0x09, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "or\tsi, si"),
			(0x086d, &[0x30, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "xor\tah, ah"),
			(0x00f4, &[0x31, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "xor\tax, ax"),
			(0x0000, &[0x31, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbp, bp"),
			(0x0500, &[0x31, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbx, bx"),
			(0x02eb, &[0x30, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdh, dh"),
			(0x0101, &[0x31, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdi, di"),
			(0x116c, &[0x31, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdx, dx"),
			(0x0060, &[0x31, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tsi, si"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_logic_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_test_instruction() {
        let testcases = [
	        (0x106c, &[0xf7, 0x47, 0x04, 0x00, 0x01, 0x00], 5, "test\t[bx+4], 0100"),
	        (0x0f60, &[0xf7, 0x44, 0x04, 0x00, 0x01, 0x00], 5, "test\t[si+4], 0100"),
	        (0x0929, &[0xf7, 0x44, 0x04, 0x00, 0x02, 0x00], 5, "test\t[si+4], 0200"),
	        (0x111c, &[0xa8, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "test\tal, 1"),
	        (0x0019, &[0xf6, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "test\tbl, 1"),
	        (0x114d, &[0x85, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "test\tbx, bx"),
	        (0x01e3, &[0xf6, 0x46, 0x06, 0x02, 0x00, 0x00], 4, "test byte\t[bp+6], 2"),
	        (0x01ef, &[0xf6, 0x46, 0x06, 0x04, 0x00, 0x00], 4, "test byte\t[bp+6], 4"),
	        (0x0205, &[0xf6, 0x46, 0x06, 0x08, 0x00, 0x00], 4, "test byte\t[bp+6], 8"),
	        (0x0fd4, &[0xf6, 0x44, 0x04, 0x01, 0x00, 0x00], 4, "test byte\t[si+4], 1"),
	        (0x0884, &[0xf6, 0x44, 0x04, 0x10, 0x00, 0x00], 4, "test byte\t[si+4], 10"),
	        (0x0872, &[0xf6, 0x44, 0x04, 0x02, 0x00, 0x00], 4, "test byte\t[si+4], 2"),
	        (0x089a, &[0xf6, 0x44, 0x04, 0x04, 0x00, 0x00], 4, "test byte\t[si+4], 4"),
	        (0x0904, &[0xf6, 0x44, 0x04, 0x40, 0x00, 0x00], 4, "test byte\t[si+4], 40"),
	        (0x087e, &[0xf6, 0x44, 0x04, 0x80, 0x00, 0x00], 4, "test byte\t[si+4], 80"),
	        (0x03d8, &[0xf7, 0xc7, 0x01, 0x00, 0x00, 0x00], 4, "test\tdi, 0001"),
	        (0x03ce, &[0xf7, 0xc7, 0x02, 0x00, 0x00, 0x00], 4, "test\tdi, 0002"),
	        (0x0611, &[0xf7, 0xc7, 0x08, 0x00, 0x00, 0x00], 4, "test\tdi, 0008"),
	        (0x05e6, &[0xf7, 0xc7, 0x10, 0x00, 0x00, 0x00], 4, "test\tdi, 0010"),
	        (0x0459, &[0xf7, 0xc7, 0x20, 0x00, 0x00, 0x00], 4, "test\tdi, 0020"),
	        (0x0473, &[0xf7, 0xc7, 0x40, 0x00, 0x00, 0x00], 4, "test\tdi, 0040"),
	        (0x03b0, &[0xf7, 0xc7, 0x00, 0x01, 0x00, 0x00], 4, "test\tdi, 0100"),
	        (0x04c9, &[0xf7, 0xc7, 0x00, 0x02, 0x00, 0x00], 4, "test\tdi, 0200"),
	        (0x061d, &[0xf7, 0xc7, 0x00, 0x04, 0x00, 0x00], 4, "test\tdi, 0400"),
	        (0x0358, &[0xf7, 0xc7, 0x00, 0x10, 0x00, 0x00], 4, "test\tdi, 1000"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_test_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_repeat_instruction() {
        let testcases = [
	        (0x1126, &[0xf2, 0xa4, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsb"),
	        (0x1122, &[0xf2, 0xa5, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsw"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_repeat_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_string_instruction() {
	    let testcases = [
		        (0x1126, &[0xa4, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "movsb"),
		        (0x1122, &[0xa5, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "movsw"),
	    ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_string_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_jump_instruction() {
        let testcases = [
	        (0x0031, &[0xe8, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "call\t0039"),
	        (0x0040, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0047"),
	        (0x0064, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0047"),
	        (0x006d, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0050"),
	        (0x006e, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0051"),
	        (0x007b, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t005e"),
	        (0x0035, &[0xe8, 0x29, 0x00, 0x00, 0x00, 0x00], 3, "call\t0061"),
	        (0x0d95, &[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0061"),
	        (0x0080, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0063"),
	        (0x0035, &[0xe8, 0x32, 0x00, 0x00, 0x00, 0x00], 3, "call\t006a"),
	        (0x0d9e, &[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t006a"),
	        (0x0035, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t006b"),
	        (0x0035, &[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0078"),
	        (0x0dac, &[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0078"),
	        (0x0035, &[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t007d"),
	        (0x0040, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t007e"),
	        (0x005c, &[0xe8, 0x26, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
	        (0x0076, &[0xe8, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
	        (0x0048, &[0xe8, 0x3c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0087"),
	        (0x0081, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0088"),
	        (0x0048, &[0xe8, 0x41, 0x00, 0x00, 0x00, 0x00], 3, "call\t008c"),
	        (0x0052, &[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0095"),
	        (0x0093, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t009a"),
	        (0x0077, &[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t009c"),
	        (0x11f7, &[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
	        (0x124d, &[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
	        (0x0056, &[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t009e"),
	        (0x00be, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t00a1"),
	        (0x0080, &[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00a5"),
	        (0x1200, &[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
	        (0x1256, &[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
	        (0x008e, &[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00b3"),
	        (0x120e, &[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
	        (0x1264, &[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
	        (0x0035, &[0xe8, 0x83, 0x00, 0x00, 0x00, 0x00], 3, "call\t00bb"),
	        (0x0358, &[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
	        (0x0386, &[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
	        (0x0361, &[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
	        (0x038f, &[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
	        (0x036f, &[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
	        (0x039d, &[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
	        (0x00d1, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t00d8"),
	        (0x0094, &[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dc"),
	        (0x00a7, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
	        (0x00d4, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
	        (0x00b9, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
	        (0x00e6, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
	        (0x04f8, &[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t0114"),
	        (0x052d, &[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t0114"),
	        (0x0501, &[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t011d"),
	        (0x0536, &[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t011d"),
	        (0x00ef, &[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0121"),
	        (0x050f, &[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t012b"),
	        (0x0544, &[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t012b"),
	        (0x00f7, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
	        (0x0124, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
	        (0x0101, &[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0133"),
	        (0x013f, &[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0171"),
	        (0x0093, &[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a0"),
	        (0x1082, &[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a0"),
	        (0x009c, &[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a9"),
	        (0x108b, &[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a9"),
	        (0x00aa, &[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02b7"),
	        (0x1099, &[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02b7"),
	        (0x09cc, &[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0802"),
	        (0x0a34, &[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0802"),
	        (0x09d5, &[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t080b"),
	        (0x0a3d, &[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t080b"),
	        (0x09e3, &[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0819"),
	        (0x0a4b, &[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0819"),
	        (0x02e5, &[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x041c, &[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x067a, &[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x06cc, &[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x06ff, &[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x073a, &[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x0791, &[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x07de, &[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x02ee, &[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0425, &[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0683, &[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x06d5, &[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0708, &[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0743, &[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x079a, &[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x07e7, &[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x02fc, &[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0433, &[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0691, &[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x06e3, &[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0716, &[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0751, &[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x07a8, &[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x07f5, &[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0273, &[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
	        (0x0aa4, &[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
	        (0x027c, &[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a66"),
	        (0x0aad, &[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a66"),
	        (0x028a, &[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a74"),
	        (0x0abb, &[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a74"),
	        (0x0bf0, &[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ac3"),
	        (0x0bf9, &[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0acc"),
	        (0x0c07, &[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ada"),
	        (0x08ab, &[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x08d1, &[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x0c18, &[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x0cc8, &[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x08b4, &[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x08da, &[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x0c21, &[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x0cd1, &[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x08c2, &[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x08e8, &[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x0c2f, &[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x0cdf, &[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x0b12, &[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0c28, &[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0cbc, &[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0ce6, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0b1b, &[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0c31, &[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0cc5, &[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0cef, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0b29, &[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x0c3f, &[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x0cd3, &[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x0cfd, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x028d, &[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d65"),
	        (0x0296, &[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d6e"),
	        (0x02a4, &[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d7c"),
	        (0x058d, &[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d81"),
	        (0x0596, &[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d8a"),
	        (0x05a4, &[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d98"),
	        (0x0af6, &[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
	        (0x0e03, &[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
	        (0x0aff, &[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0da5"),
	        (0x0e0c, &[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0da5"),
	        (0x0b0d, &[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0db3"),
	        (0x0e1a, &[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0db3"),
	        (0x0b6a, &[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dd7"),
	        (0x0b73, &[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0de0"),
	        (0x0b81, &[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dee"),
	        (0x00b7, &[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x0dbc, &[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x0e97, &[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x0ef0, &[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x10dc, &[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x00c0, &[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x0dc5, &[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x0ea0, &[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x0ef9, &[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x10e5, &[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x00ce, &[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x0dd3, &[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x0eae, &[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x0f07, &[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x10f3, &[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x089f, &[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e4f"),
	        (0x08a8, &[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e58"),
	        (0x08b6, &[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e66"),
	        (0x0924, &[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x09ab, &[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x0a14, &[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x0f84, &[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x0ff3, &[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x092d, &[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x09b4, &[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x0a1d, &[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x0f8d, &[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x0ffc, &[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x093b, &[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x09c2, &[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x0a2b, &[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x0f9b, &[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x100a, &[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x0e5c, &[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0eb6"),
	        (0x0e65, &[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ebf"),
	        (0x0811, &[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
	        (0x0947, &[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
	        (0x1013, &[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
	        (0x0e73, &[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ecd"),
	        (0x081a, &[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
	        (0x0950, &[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
	        (0x101c, &[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
	        (0x0828, &[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
	        (0x095e, &[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
	        (0x102a, &[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
	        (0x0f27, &[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
	        (0x1064, &[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
	        (0x0f30, &[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f02"),
	        (0x106d, &[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f02"),
	        (0x0f3e, &[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f10"),
	        (0x107b, &[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f10"),
	        (0x0d8c, &[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t106e"),
	        (0x0d95, &[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1077"),
	        (0x0da3, &[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1085"),
	        (0x0e27, &[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t1095"),
	        (0x0e30, &[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t109e"),
	        (0x0cdd, &[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10a7"),
	        (0x0e3e, &[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t10ac"),
	        (0x0ce6, &[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10b0"),
	        (0x0ec3, &[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10b8"),
	        (0x0cf4, &[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10be"),
	        (0x0ecc, &[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10c1"),
	        (0x0eda, &[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10cf"),
	        (0x0a82, &[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1147"),
	        (0x0a8b, &[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1150"),
	        (0x0a99, &[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t115e"),
	        (0x0a71, &[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11a5"),
	        (0x0a7a, &[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11ae"),
	        (0x0a88, &[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11bc"),
	        (0x1198, &[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t11f7"),
	        (0x11a1, &[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t1200"),
	        (0x11af, &[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t120e"),
	        (0x1195, &[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1250"),
	        (0x119e, &[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1259"),
	        (0x11ac, &[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1267"),
	        (0x124a, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1288"),
	        (0x1253, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1291"),
	        (0x1261, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t129f"),
	        (0x00b4, &[0xff, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "call\tbx"),
	        (0x0059, &[0xeb, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t003f"),
	        (0x005c, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t004f"),
	        (0x0065, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0058"),
	        (0x0066, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0059"),
	        (0x0056, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t005b"),
	        (0x0080, &[0xeb, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0062"),
	        (0x0073, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0066"),
	        (0x0078, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t006b"),
	        (0x00b6, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00a9"),
	        (0x0108, &[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00ec"),
	        (0x0111, &[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00f5"),
	        (0x011f, &[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0103"),
	        (0x00e8, &[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t010f"),
	        (0x010f, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0114"),
	        (0x00f1, &[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0118"),
	        (0x00ff, &[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x011a, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x011f, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x0124, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x0121, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x013b, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0135"),
	        (0x012c, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
	        (0x0131, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
	        (0x0136, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
	        (0x014d, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0147"),
	        (0x015f, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0164"),
	        (0x016a, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
	        (0x016f, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
	        (0x0174, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
	        (0x018b, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0185"),
	        (0x013c, &[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x014d, &[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x0166, &[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x0179, &[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x018f, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x01a0, &[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x0145, &[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0156, &[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x016f, &[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0182, &[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0198, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x01a9, &[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0153, &[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x0164, &[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x017d, &[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x0190, &[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x01a6, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x01b7, &[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x01ca, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
	        (0x01d6, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
	        (0x01d3, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
	        (0x01df, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
	        (0x01e1, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
	        (0x01ed, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
	        (0x0236, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t023b"),
	        (0x023f, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0244"),
	        (0x024d, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0252"),
	        (0x023e, &[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t025c"),
	        (0x0247, &[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0265"),
	        (0x0245, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x024c, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x0253, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x025a, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x024e, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x0255, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x025c, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x0263, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x0255, &[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0273"),
	        (0x025c, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x0263, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x026a, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x0271, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x0299, &[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0281"),
	        (0x02a2, &[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t028a"),
	        (0x02b0, &[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0298"),
	        (0x0308, &[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02b1"),
	        (0x0311, &[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02ba"),
	        (0x031f, &[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02c8"),
	        (0x02df, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02eb"),
	        (0x02e8, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02f4"),
	        (0x02f6, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0302"),
	        (0x030c, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0332"),
	        (0x0315, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033b"),
	        (0x0312, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x0318, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x031e, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x0324, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x032a, &[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x0330, &[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0341"),
	        (0x031b, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0321, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0327, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x032d, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0333, &[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0323, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0349"),
	        (0x0339, &[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t034a"),
	        (0x0329, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x032f, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x0335, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x033b, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x0341, &[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x0347, &[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0358"),
	        (0x03d5, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03f5"),
	        (0x03de, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03fe"),
	        (0x03ec, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t040c"),
	        (0x0416, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0422"),
	        (0x041f, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t042b"),
	        (0x042d, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0439"),
	        (0x04cc, &[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ac"),
	        (0x04d5, &[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04b5"),
	        (0x04e3, &[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04c3"),
	        (0x04d9, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04e5"),
	        (0x04e2, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ee"),
	        (0x04f0, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04fc"),
	        (0x0513, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0519"),
	        (0x051c, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0522"),
	        (0x052a, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0530"),
	        (0x0596, &[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05ca"),
	        (0x059f, &[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05d3"),
	        (0x05ad, &[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05e1"),
	        (0x066d, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0680"),
	        (0x0676, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0689"),
	        (0x0684, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0697"),
	        (0x06bf, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06d2"),
	        (0x06c8, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06db"),
	        (0x06d6, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06e9"),
	        (0x06f2, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0705"),
	        (0x06fb, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t070e"),
	        (0x0709, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t071c"),
	        (0x0734, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0740"),
	        (0x073d, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0749"),
	        (0x074b, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0757"),
	        (0x0784, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0797"),
	        (0x078d, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07a0"),
	        (0x079b, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ae"),
	        (0x07d8, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07e4"),
	        (0x07e1, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ed"),
	        (0x07ef, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07fb"),
	        (0x07a8, &[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07ad, &[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07f5, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07fa, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07b1, &[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x07b6, &[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x07fe, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x0803, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x082f, &[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t080a"),
	        (0x0838, &[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0813"),
	        (0x07bf, &[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x07c4, &[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x080c, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x0811, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x0846, &[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0821"),
	        (0x08bb, &[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08cb, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08e1, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08f7, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08c4, &[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x08d4, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x08ea, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x0900, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x08d2, &[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x08e2, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x08f8, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x090e, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x0a29, &[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
	        (0x0a4d, &[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
	        (0x0a32, &[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
	        (0x0a56, &[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
	        (0x0a40, &[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
	        (0x0a64, &[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
	        (0x0ab6, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0abb"),
	        (0x0abf, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ac4"),
	        (0x0acd, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ad2"),
	        (0x0af3, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
	        (0x0b00, &[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
	        (0x0afc, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
	        (0x0b09, &[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
	        (0x0b0a, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
	        (0x0b17, &[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
	        (0x0beb, &[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b9c"),
	        (0x0bf4, &[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ba5"),
	        (0x0c02, &[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bb3"),
	        (0x0bda, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0be2"),
	        (0x0be3, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0beb"),
	        (0x0bf1, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bf9"),
	        (0x0be4, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c00"),
	        (0x0bed, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c09"),
	        (0x0bfb, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c17"),
	        (0x0c93, &[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c57"),
	        (0x0c9c, &[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c60"),
	        (0x0caa, &[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c6e"),
	        (0x0c7b, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c83"),
	        (0x0c84, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c8c"),
	        (0x0c8c, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c95"),
	        (0x0c92, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9a"),
	        (0x0c95, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9e"),
	        (0x0ca3, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cac"),
	        (0x0cc3, &[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
	        (0x0cd4, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
	        (0x0ccc, &[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
	        (0x0cdd, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
	        (0x0cda, &[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
	        (0x0ceb, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
	        (0x0d14, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d07"),
	        (0x0d1d, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d10"),
	        (0x0d2b, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d1e"),
	        (0x0d24, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d2d"),
	        (0x0d2d, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d36"),
	        (0x0d3b, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d44"),
	        (0x0d79, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d7e"),
	        (0x0d82, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d87"),
	        (0x0d90, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d95"),
	        (0x0dc9, &[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0dd4"),
	        (0x0dd2, &[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ddd"),
	        (0x0de0, &[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0deb"),
	        (0x0e00, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
	        (0x0e0d, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
	        (0x0e09, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
	        (0x0e16, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
	        (0x0e17, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
	        (0x0e24, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
	        (0x0e47, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e4c"),
	        (0x0e50, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e55"),
	        (0x0e5e, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e63"),
	        (0x0ea9, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eb1"),
	        (0x0eb2, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eba"),
	        (0x0ec0, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ec8"),
	        (0x0f35, &[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f0f"),
	        (0x0f3e, &[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f18"),
	        (0x0f4c, &[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f26"),
	        (0x0fdf, &[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
	        (0x1008, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
	        (0x102a, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
	        (0x0fe8, &[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1011, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1033, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1069, &[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1072, &[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1046"),
	        (0x0ff6, &[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
	        (0x101f, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
	        (0x1041, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
	        (0x1080, &[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1054"),
	        (0x108e, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
	        (0x1093, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
	        (0x1098, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
	        (0x1097, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
	        (0x109c, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
	        (0x10a1, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
	        (0x10a5, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
	        (0x10aa, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
	        (0x10af, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
	        (0x1122, &[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1111"),
	        (0x112b, &[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t111a"),
	        (0x1139, &[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1128"),
	        (0x1145, &[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1136"),
	        (0x114e, &[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t113f"),
	        (0x115c, &[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t114d"),
	        (0x1189, &[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
	        (0x1193, &[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
	        (0x1192, &[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
	        (0x119c, &[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
	        (0x11a0, &[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
	        (0x11aa, &[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
	        (0x11a3, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t119d"),
	        (0x11ac, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11a6"),
	        (0x11ba, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11b4"),
	        (0x11eb, &[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
	        (0x11f5, &[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
	        (0x11f4, &[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
	        (0x11fe, &[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
	        (0x1202, &[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
	        (0x120c, &[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
	        (0x1200, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1208, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1210, &[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1218, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1220, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1228, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1230, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1286, &[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1209, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1211, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1219, &[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1221, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1229, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1231, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1239, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x128f, &[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1217, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x121f, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1227, &[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x122f, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1237, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x123f, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1247, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x129d, &[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1266, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1286"),
	        (0x126f, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t128f"),
	        (0x127d, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t129d"),
	        (0x0088, &[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0090"),
	        (0x009c, &[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a0"),
	        (0x009a, &[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a2"),
	        (0x00a5, &[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a9"),
	        (0x00b3, &[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00b7"),
	        (0x00d8, &[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00e0"),
	        (0x0114, &[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0133"),
	        (0x0068, &[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0134"),
	        (0x004e, &[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x0085, &[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x00ad, &[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x00da, &[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x0126, &[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0145"),
	        (0x007a, &[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0146"),
	        (0x0044, &[0xe9, 0x00, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x0060, &[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x0097, &[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x00bf, &[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x00ec, &[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x0082, &[0xe9, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
	        (0x0164, &[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
	        (0x00b8, &[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0184"),
	        (0x0044, &[0xe9, 0x3e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x009e, &[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x00d5, &[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x00fd, &[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x012a, &[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x0125, &[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01a2"),
	        (0x012e, &[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01ab"),
	        (0x013c, &[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01b9"),
	        (0x020e, &[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t029d"),
	        (0x0217, &[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02a6"),
	        (0x043f, &[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x0459, &[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x0477, &[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x048b, &[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x05b5, &[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x07c0, &[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x0225, &[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02b4"),
	        (0x0448, &[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0462, &[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0480, &[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0494, &[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x05be, &[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x07c9, &[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0456, &[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x0470, &[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x048e, &[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x04a2, &[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x05cc, &[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x07d7, &[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x03de, &[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
	        (0x03e8, &[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
	        (0x03f2, &[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
	        (0x03e7, &[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
	        (0x03f1, &[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
	        (0x03fb, &[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
	        (0x04b8, &[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x04c3, &[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x0501, &[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x0536, &[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x054e, &[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x03f5, &[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
	        (0x03ff, &[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
	        (0x0409, &[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
	        (0x04c1, &[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x04cc, &[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x050a, &[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x053f, &[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x0557, &[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x04cf, &[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x04da, &[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x0518, &[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x054d, &[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x0565, &[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x0644, &[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
	        (0x0686, &[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
	        (0x064d, &[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
	        (0x068f, &[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
	        (0x065b, &[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
	        (0x069d, &[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
	        (0x062c, &[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
	        (0x0635, &[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
	        (0x0635, &[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
	        (0x063e, &[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
	        (0x0643, &[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
	        (0x064c, &[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
	        (0x02c1, &[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07fc"),
	        (0x02fc, &[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0302, &[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0433, &[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0439, &[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0694, &[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x069a, &[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0716, &[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x071c, &[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0751, &[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0757, &[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x02ca, &[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0805"),
	        (0x0305, &[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x030b, &[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x043c, &[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x0442, &[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x069d, &[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x06a3, &[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x071f, &[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x0725, &[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x075a, &[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x0760, &[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x02d8, &[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0813"),
	        (0x0313, &[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0319, &[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x044a, &[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0450, &[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x06ab, &[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x06b1, &[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x072d, &[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0733, &[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0768, &[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x076e, &[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0889, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
	        (0x0892, &[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
	        (0x0892, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
	        (0x089b, &[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
	        (0x08a0, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
	        (0x08a9, &[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
	        (0x096a, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09e4"),
	        (0x0973, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09ed"),
	        (0x0981, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09fb"),
	        (0x0985, &[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
	        (0x09d6, &[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
	        (0x0858, &[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0864, &[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0876, &[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0939, &[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x095a, &[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0961, &[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x09c0, &[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x09e1, &[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x098e, &[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
	        (0x09df, &[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
	        (0x0861, &[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x086d, &[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x087f, &[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x0942, &[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x0963, &[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x096a, &[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x09c9, &[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x09ea, &[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x099c, &[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
	        (0x09ed, &[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
	        (0x086f, &[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x087b, &[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x088d, &[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0950, &[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0971, &[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0978, &[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x09d7, &[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x09f8, &[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0bfb, &[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b38"),
	        (0x0c04, &[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b41"),
	        (0x0c12, &[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b4f"),
	        (0x0b3e, &[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0bfe"),
	        (0x0b30, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
	        (0x0b5c, &[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
	        (0x0b77, &[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
	        (0x0b47, &[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c07"),
	        (0x0b39, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
	        (0x0b65, &[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
	        (0x0b80, &[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
	        (0x0b55, &[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c15"),
	        (0x0b47, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
	        (0x0b73, &[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
	        (0x0b8e, &[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
	        (0x0c1c, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
	        (0x0c2e, &[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
	        (0x0c25, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
	        (0x0c37, &[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
	        (0x0c33, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
	        (0x0c45, &[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
	        (0x0f3a, &[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0f52, &[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0f99, &[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0faf, &[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0fba, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0f43, &[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0f5b, &[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0fa2, &[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0fb8, &[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0fc3, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0f51, &[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0f69, &[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0fb0, &[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0fc6, &[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0fd1, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x10b5, &[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t10fb"),
	        (0x10be, &[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1104"),
	        (0x10cc, &[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1112"),
	        (0x01ad, &[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x0263, &[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x033b, &[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x03fe, &[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x05c7, &[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x01b6, &[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x026c, &[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x0344, &[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x0407, &[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x05d0, &[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x01c4, &[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x027a, &[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x0352, &[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x0415, &[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x05de, &[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x113e, &[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1195"),
	        (0x0111, &[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x029d, &[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x07ff, &[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0838, &[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0a5a, &[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0ac0, &[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0c00, &[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0cec, &[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0d62, &[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0e12, &[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0e4c, &[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x1034, &[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x005e, &[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
	        (0x0b1d, &[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
	        (0x106b, &[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
	        (0x0044, &[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x007b, &[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0099, &[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x00bd, &[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0d7e, &[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0d99, &[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0dd4, &[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0e6a, &[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0eb3, &[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0ec9, &[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0ef6, &[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x1088, &[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x10e2, &[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x1147, &[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119e"),
	        (0x011a, &[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x02a6, &[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0808, &[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0841, &[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0a63, &[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0ac9, &[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0c09, &[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0cf5, &[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0d6b, &[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0e1b, &[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0e55, &[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x103d, &[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0067, &[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
	        (0x0b26, &[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
	        (0x1074, &[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
	        (0x004d, &[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0084, &[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x00a2, &[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x00c6, &[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0d87, &[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0da2, &[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0ddd, &[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0e73, &[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0ebc, &[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0ed2, &[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0eff, &[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x1091, &[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x10eb, &[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x1155, &[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11ac"),
	        (0x0128, &[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x02b4, &[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0816, &[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x084f, &[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0a71, &[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0ad7, &[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0c17, &[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0d03, &[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0d79, &[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0e29, &[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0e63, &[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x104b, &[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x005b, &[0xe9, 0x55, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x0075, &[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x0b34, &[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x1082, &[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x0092, &[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x00b0, &[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x00d4, &[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0d95, &[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0db0, &[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0deb, &[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0e81, &[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0eca, &[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0ee0, &[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0f0d, &[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x109f, &[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x10f9, &[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x1158, &[0xff, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "jmp\tbx"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_jump_instruction(testcase.0, testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_return_instruction() {
        let testcases = [
        	(0x0182, &[0xc3, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "ret"),
         	(0x117d, &[0xc2, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "ret\t0008"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_return_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_conditional_jump_instruction() {
        let testcases = [
	        (0x0572, &[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0579"),
	        (0x057b, &[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0582"),
	        (0x0589, &[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0590"),
	        (0x0b3c, &[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b41"),
	        (0x0b45, &[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b4a"),
	        (0x0b53, &[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b58"),
	        (0x0bb0, &[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0be6"),
	        (0x0bb9, &[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bef"),
	        (0x0bc7, &[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bfd"),
	        (0x0c5e, &[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c95"),
	        (0x0c67, &[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c9e"),
	        (0x0c75, &[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cac"),
	        (0x0ca0, &[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cc5"),
	        (0x0ca9, &[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cce"),
	        (0x0cb7, &[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cdc"),
	        (0x0d0e, &[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d16"),
	        (0x0d17, &[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d1f"),
	        (0x0d25, &[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d2d"),
	        (0x0df1, &[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0dfd"),
	        (0x0dfa, &[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e06"),
	        (0x0e08, &[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e14"),
	        (0x10ff, &[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t110f"),
	        (0x1108, &[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
	        (0x10f9, &[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
	        (0x1102, &[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1121"),
	        (0x1116, &[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1126"),
	        (0x1110, &[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t112f"),
	        (0x1180, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t118b"),
	        (0x1189, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1194"),
	        (0x1197, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11a2"),
	        (0x11e2, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11ed"),
	        (0x11eb, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11f6"),
	        (0x11f9, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1204"),
	        (0x0ae9, &[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0af5"),
	        (0x0af2, &[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0afe"),
	        (0x0b00, &[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0b0c"),
	        (0x0bbc, &[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bcd"),
	        (0x0bc5, &[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bd6"),
	        (0x0bd3, &[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be4"),
	        (0x0bb4, &[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be6"),
	        (0x0bbd, &[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bef"),
	        (0x0bcb, &[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bfd"),
	        (0x0cad, &[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc0"),
	        (0x0cb6, &[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc9"),
	        (0x0cc4, &[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cd7"),
	        (0x0dfb, &[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e02"),
	        (0x0e04, &[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e0b"),
	        (0x0e12, &[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e19"),
	        (0x1185, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t118b"),
	        (0x118e, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1194"),
	        (0x119c, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11a2"),
	        (0x11e7, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11ed"),
	        (0x11f0, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11f6"),
	        (0x11fe, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1204"),
	        (0x006c, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0074"),
	        (0x0075, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007d"),
	        (0x0076, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007e"),
	        (0x0083, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t008b"),
	        (0x0088, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0090"),
	        (0x00c6, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t00ce"),
	        (0x00f8, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t00fd"),
	        (0x010a, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t010f"),
	        (0x012c, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t013e"),
	        (0x0135, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0147"),
	        (0x0148, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t014d"),
	        (0x0143, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0155"),
	        (0x0153, &[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0168"),
	        (0x015c, &[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0171"),
	        (0x016a, &[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t017f"),
	        (0x017f, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0191"),
	        (0x0188, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t019a"),
	        (0x0196, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t01a8"),
	        (0x01d0, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01d8"),
	        (0x01d9, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e1"),
	        (0x01dc, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e2"),
	        (0x01e5, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01eb"),
	        (0x01b4, &[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ee"),
	        (0x01e7, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ef"),
	        (0x01bd, &[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f7"),
	        (0x01f3, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f9"),
	        (0x01f2, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t01fe"),
	        (0x01cb, &[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t0205"),
	        (0x01fb, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0207"),
	        (0x0209, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0215"),
	        (0x0215, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0223"),
	        (0x021b, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
	        (0x0221, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
	        (0x021e, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t022c"),
	        (0x0224, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
	        (0x022a, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
	        (0x022c, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t023a"),
	        (0x0232, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
	        (0x0238, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
	        (0x0284, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t029b"),
	        (0x028d, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02a4"),
	        (0x029b, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02b2"),
	        (0x02f5, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t02ff"),
	        (0x02fe, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0308"),
	        (0x02c8, &[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t030a"),
	        (0x02d1, &[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0313"),
	        (0x030c, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0316"),
	        (0x02df, &[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0321"),
	        (0x0345, &[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0332"),
	        (0x034e, &[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t033b"),
	        (0x035c, &[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0349"),
	        (0x0364, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t036a"),
	        (0x036d, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0373"),
	        (0x037b, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0381"),
	        (0x039d, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ac"),
	        (0x03a6, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03b5"),
	        (0x03bb, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c1"),
	        (0x03b4, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c3"),
	        (0x03c4, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ca"),
	        (0x03c5, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03cb"),
	        (0x03ce, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d4"),
	        (0x03d2, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d8"),
	        (0x03dc, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03e2"),
	        (0x042c, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0436"),
	        (0x0435, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t043f"),
	        (0x0443, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t044d"),
	        (0x0446, &[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t045c"),
	        (0x044f, &[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0465"),
	        (0x045d, &[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0473"),
	        (0x0460, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t047a"),
	        (0x0469, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0483"),
	        (0x0477, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0491"),
	        (0x04b6, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04bb"),
	        (0x04bf, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04c4"),
	        (0x04cd, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04d2"),
	        (0x04df, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04e5"),
	        (0x04e8, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04ee"),
	        (0x04f6, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04fc"),
	        (0x0555, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0562"),
	        (0x055e, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t056b"),
	        (0x056c, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0579"),
	        (0x05d3, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05da"),
	        (0x05dc, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05e3"),
	        (0x05ea, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05f1"),
	        (0x05f2, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t05fa"),
	        (0x05fb, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0603"),
	        (0x0609, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0611"),
	        (0x0604, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
	        (0x0612, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
	        (0x0617, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
	        (0x05ec, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
	        (0x060a, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
	        (0x060d, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
	        (0x061b, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
	        (0x0620, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
	        (0x05f5, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
	        (0x0613, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
	        (0x061b, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
	        (0x0629, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
	        (0x062e, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
	        (0x0603, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
	        (0x0621, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
	        (0x0633, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
	        (0x063c, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0641"),
	        (0x064a, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t064f"),
	        (0x0684, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0689"),
	        (0x068d, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0692"),
	        (0x068d, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0697"),
	        (0x064b, &[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t069d"),
	        (0x069b, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
	        (0x0696, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
	        (0x0654, &[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a6"),
	        (0x06a4, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06ae"),
	        (0x0662, &[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06b4"),
	        (0x06d6, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t070b"),
	        (0x06df, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0714"),
	        (0x070f, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0719"),
	        (0x06ed, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
	        (0x0718, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
	        (0x0726, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0730"),
	        (0x074a, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0754"),
	        (0x0753, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t075d"),
	        (0x0761, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t076b"),
	        (0x07a1, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07aa"),
	        (0x07aa, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07b3"),
	        (0x07b8, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07c1"),
	        (0x07ee, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07f7"),
	        (0x07f7, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0800"),
	        (0x0805, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t080e"),
	        (0x086b, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0879"),
	        (0x0874, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0882"),
	        (0x0887, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t088c"),
	        (0x0882, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0890"),
	        (0x0890, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0895"),
	        (0x0899, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t089e"),
	        (0x089e, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08a3"),
	        (0x08a7, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08ac"),
	        (0x08a5, &[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08cd"),
	        (0x08ae, &[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08d6"),
	        (0x08bc, &[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08e4"),
	        (0x0917, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t093c"),
	        (0x0920, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0945"),
	        (0x092e, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0953"),
	        (0x0950, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t095d"),
	        (0x0907, &[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0964"),
	        (0x0959, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0966"),
	        (0x0910, &[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t096d"),
	        (0x0967, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0974"),
	        (0x091e, &[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t097b"),
	        (0x097a, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
	        (0x0983, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
	        (0x0983, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
	        (0x098c, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
	        (0x0991, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
	        (0x099a, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
	        (0x099e, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09c3"),
	        (0x09a7, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09cc"),
	        (0x09d4, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09d9"),
	        (0x09b5, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09da"),
	        (0x09dd, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09e2"),
	        (0x09eb, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09f0"),
	        (0x0a07, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a2b"),
	        (0x0a10, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a34"),
	        (0x0a1e, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a42"),
	        (0x0afc, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b02"),
	        (0x0b05, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b0b"),
	        (0x0b13, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b19"),
	        (0x0bd1, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bdc"),
	        (0x0bda, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0be5"),
	        (0x0b9e, &[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bed"),
	        (0x0be8, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf3"),
	        (0x0ba7, &[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf6"),
	        (0x0bf6, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bfe"),
	        (0x0bb5, &[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c04"),
	        (0x0bff, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c07"),
	        (0x0c0d, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c15"),
	        (0x0c72, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c7d"),
	        (0x0c7b, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c86"),
	        (0x0c89, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c94"),
	        (0x0c59, &[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c95"),
	        (0x0c62, &[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c9e"),
	        (0x0c70, &[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0cac"),
	        (0x0d09, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d16"),
	        (0x0d12, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d1f"),
	        (0x0d1d, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d26"),
	        (0x0d20, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2d"),
	        (0x0d26, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2f"),
	        (0x0d34, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d3d"),
	        (0x0d2f, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d46"),
	        (0x0d38, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d4f"),
	        (0x0d46, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d5d"),
	        (0x0cff, &[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
	        (0x0d48, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
	        (0x0d08, &[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
	        (0x0d51, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
	        (0x0d16, &[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
	        (0x0d5f, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
	        (0x0da9, &[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0dd2"),
	        (0x0db2, &[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0ddb"),
	        (0x0dc0, &[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0de9"),
	        (0x0e30, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e35"),
	        (0x0e39, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e3e"),
	        (0x0e47, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e4c"),
	        (0x0f1d, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
	        (0x0f2d, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
	        (0x0f26, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
	        (0x0f36, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
	        (0x0f34, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
	        (0x0f44, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
	        (0x0f41, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f50"),
	        (0x0f4a, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f59"),
	        (0x0f58, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f67"),
	        (0x0f64, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f73"),
	        (0x0f6d, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f7c"),
	        (0x0f7b, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f8a"),
	        (0x0fa0, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fa7"),
	        (0x0fa9, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb0"),
	        (0x0f59, &[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb2"),
	        (0x0f62, &[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbb"),
	        (0x0fb6, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbd"),
	        (0x0fb7, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbe"),
	        (0x0fbf, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc6"),
	        (0x0fc1, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc8"),
	        (0x0f70, &[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc9"),
	        (0x0fca, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd1"),
	        (0x0fcd, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd4"),
	        (0x0fd8, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fdf"),
	        (0x0fe6, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t100a"),
	        (0x0fef, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1013"),
	        (0x0ffd, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1021"),
	        (0x104b, &[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
	        (0x105a, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
	        (0x1054, &[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
	        (0x1063, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
	        (0x1062, &[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
	        (0x1071, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
	        (0x123a, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1241"),
	        (0x1243, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t124a"),
	        (0x1251, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1258"),
	        (0x1262, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1268"),
	        (0x126b, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1271"),
	        (0x1279, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t127f"),
	        (0x0050, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t005e"),
	        (0x0059, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0067"),
	        (0x005a, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0068"),
	        (0x0067, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0075"),
	        (0x006c, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t007a"),
	        (0x00aa, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t00b8"),
	        (0x00f5, &[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t010a"),
	        (0x00fe, &[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0113"),
	        (0x010c, &[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0121"),
	        (0x02cf, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02e1"),
	        (0x02d8, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02ea"),
	        (0x02e6, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02f8"),
	        (0x0393, &[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0399"),
	        (0x039c, &[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03a2"),
	        (0x03aa, &[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03b0"),
	        (0x0406, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0418"),
	        (0x040f, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0421"),
	        (0x041d, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t042f"),
	        (0x0658, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t066f"),
	        (0x0661, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0678"),
	        (0x066f, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0686"),
	        (0x06aa, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06c1"),
	        (0x06b3, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06ca"),
	        (0x06c1, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06d8"),
	        (0x06dd, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06f4"),
	        (0x06e6, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06fd"),
	        (0x06f4, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t070b"),
	        (0x0724, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0736"),
	        (0x072d, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t073f"),
	        (0x073b, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t074d"),
	        (0x076f, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0786"),
	        (0x0778, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t078f"),
	        (0x0786, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t079d"),
	        (0x0768, &[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07af"),
	        (0x0771, &[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07b8"),
	        (0x077f, &[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07c6"),
	        (0x07c8, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07da"),
	        (0x07d1, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07e3"),
	        (0x07df, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07f1"),
	        (0x112d, &[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t1143"),
	        (0x1136, &[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t114c"),
	        (0x1144, &[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t115a"),
	        (0x0042, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t005b"),
	        (0x07b3, &[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07bb"),
	        (0x07bc, &[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07c4"),
	        (0x07ca, &[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07d2"),
	        (0x081b, &[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0831"),
	        (0x0835, &[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0838"),
	        (0x0824, &[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t083a"),
	        (0x083e, &[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0841"),
	        (0x0832, &[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0848"),
	        (0x084c, &[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t084f"),
	        (0x0a00, &[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a4f"),
	        (0x0a09, &[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a58"),
	        (0x0a17, &[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a66"),
	        (0x0a93, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0aac"),
	        (0x0a9c, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab5"),
	        (0x0aaf, &[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab8"),
	        (0x0ab8, &[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac1"),
	        (0x0aaa, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac3"),
	        (0x0ac6, &[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0acf"),
	        (0x0ded, &[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0df3"),
	        (0x0df6, &[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0dfc"),
	        (0x0e04, &[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0e0a"),
	        (0x0017, &[0x73, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0028"),
	        (0x0b52, &[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b5f"),
	        (0x0b5b, &[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b68"),
	        (0x0b69, &[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b76"),
	        (0x0d71, &[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d7b"),
	        (0x0d7a, &[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d84"),
	        (0x0d88, &[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d92"),
	        (0x1255, &[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1268"),
	        (0x125e, &[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1271"),
	        (0x126c, &[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t127f"),
	        (0x0ad2, &[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0aeb"),
	        (0x0adb, &[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0af4"),
	        (0x0ae9, &[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0b02"),
	        (0x0ca5, &[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cc5"),
	        (0x0cae, &[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cce"),
	        (0x0cbc, &[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cdc"),
	        (0x117e, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1187"),
	        (0x1187, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1190"),
	        (0x1195, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t119e"),
	        (0x11e0, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11e9"),
	        (0x11e9, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11f2"),
	        (0x11f7, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1200"),
	        (0x001c, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
	        (0x0022, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
	        (0x00cd, &[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00ea"),
	        (0x00d6, &[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00f3"),
	        (0x00e4, &[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0101"),
	        (0x01f8, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t01fe"),
	        (0x0201, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0207"),
	        (0x0204, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0211"),
	        (0x020f, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0215"),
	        (0x020d, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t021a"),
	        (0x021b, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0228"),
	        (0x0231, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0238"),
	        (0x023a, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0241"),
	        (0x0248, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t024f"),
	        (0x020a, &[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
	        (0x0227, &[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
	        (0x0213, &[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
	        (0x0230, &[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
	        (0x0221, &[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
	        (0x023e, &[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
	        (0x027f, &[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t029b"),
	        (0x0288, &[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02a4"),
	        (0x0296, &[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02b2"),
	        (0x02bf, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02c4"),
	        (0x02c8, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02cd"),
	        (0x02d6, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02db"),
	        (0x02ef, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0305"),
	        (0x02f8, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t030e"),
	        (0x0306, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t031c"),
	        (0x0370, &[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0399"),
	        (0x0379, &[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03a2"),
	        (0x0387, &[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b0"),
	        (0x03b0, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b7"),
	        (0x03b9, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03c0"),
	        (0x03c7, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03ce"),
	        (0x0426, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t043c"),
	        (0x042f, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0445"),
	        (0x043d, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0453"),
	        (0x049f, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04a6"),
	        (0x04a8, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04af"),
	        (0x04b0, &[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bb"),
	        (0x04b6, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bd"),
	        (0x04b9, &[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c4"),
	        (0x04c1, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c6"),
	        (0x04ca, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04cf"),
	        (0x04c7, &[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04d2"),
	        (0x04d2, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04db"),
	        (0x04d8, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04dd"),
	        (0x04db, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04e4"),
	        (0x04e9, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04f2"),
	        (0x050c, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0515"),
	        (0x0515, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t051e"),
	        (0x0523, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t052c"),
	        (0x055b, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0562"),
	        (0x0564, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056b"),
	        (0x0566, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056d"),
	        (0x056f, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0576"),
	        (0x0572, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0579"),
	        (0x057d, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0584"),
	        (0x05f8, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0600"),
	        (0x0601, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0609"),
	        (0x060f, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0617"),
	        (0x05fe, &[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t061e"),
	        (0x061c, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0621"),
	        (0x0607, &[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0627"),
	        (0x0625, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t062a"),
	        (0x0615, &[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0635"),
	        (0x0633, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0638"),
	        (0x0642, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0647"),
	        (0x064b, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0650"),
	        (0x0659, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t065e"),
	        (0x0709, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
	        (0x075d, &[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
	        (0x0712, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
	        (0x0766, &[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
	        (0x0720, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
	        (0x0774, &[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
	        (0x0744, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t075a"),
	        (0x074d, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0763"),
	        (0x079b, &[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0765"),
	        (0x07a4, &[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t076e"),
	        (0x075b, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0771"),
	        (0x07b2, &[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t077c"),
	        (0x07e8, &[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07bb"),
	        (0x07f1, &[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07c4"),
	        (0x07ff, &[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07d2"),
	        (0x085f, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0867"),
	        (0x0868, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0870"),
	        (0x0871, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0879"),
	        (0x0876, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t087e"),
	        (0x087a, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0882"),
	        (0x0888, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0890"),
	        (0x08b4, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08bd"),
	        (0x08bd, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08c6"),
	        (0x0899, &[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08cd"),
	        (0x08cb, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d4"),
	        (0x08a2, &[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d6"),
	        (0x08da, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e3"),
	        (0x08b0, &[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e4"),
	        (0x08e3, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08ec"),
	        (0x08f1, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08f9"),
	        (0x08f1, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08fa"),
	        (0x08fa, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0902"),
	        (0x0908, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0910"),
	        (0x092f, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t093c"),
	        (0x0938, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0945"),
	        (0x0946, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0953"),
	        (0x0968, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t096d"),
	        (0x0971, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0976"),
	        (0x097f, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0984"),
	        (0x09b6, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09c3"),
	        (0x09bf, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09cc"),
	        (0x09cd, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09da"),
	        (0x0a1f, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a2b"),
	        (0x0a28, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a34"),
	        (0x0a36, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a42"),
	        (0x0a3c, &[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a4f"),
	        (0x0a45, &[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a58"),
	        (0x0a53, &[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a66"),
	        (0x0a8d, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a95"),
	        (0x0a96, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a9e"),
	        (0x0aa4, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0aac"),
	        (0x0b2c, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b33"),
	        (0x0b35, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b3c"),
	        (0x0b43, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b4a"),
	        (0x0b73, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b7a"),
	        (0x0b7c, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b83"),
	        (0x0b8a, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b91"),
	        (0x0b64, &[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b93"),
	        (0x0b6d, &[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b9c"),
	        (0x0b7b, &[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0baa"),
	        (0x0c13, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c1f"),
	        (0x0c1c, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c28"),
	        (0x0c23, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c31"),
	        (0x0c2a, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c36"),
	        (0x0c2c, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c3a"),
	        (0x0c3a, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c48"),
	        (0x0c63, &[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c8e"),
	        (0x0c6c, &[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c97"),
	        (0x0c7a, &[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ca5"),
	        (0x0cd0, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cd6"),
	        (0x0cd9, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cdf"),
	        (0x0ce7, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ced"),
	        (0x0d37, &[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d46"),
	        (0x0d40, &[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d4f"),
	        (0x0d4e, &[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d5d"),
	        (0x0d50, &[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d62"),
	        (0x0d59, &[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d6b"),
	        (0x0d67, &[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d79"),
	        (0x0e09, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e0f"),
	        (0x0e12, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e18"),
	        (0x0e20, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e26"),
	        (0x0e65, &[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e68"),
	        (0x0e6e, &[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e71"),
	        (0x0e7c, &[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e7f"),
	        (0x0f0b, &[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f3d"),
	        (0x0f14, &[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f46"),
	        (0x0f22, &[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f54"),
	        (0x0f47, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
	        (0x0f4e, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
	        (0x0f50, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
	        (0x0f57, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
	        (0x0f5e, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
	        (0x0f65, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
	        (0x0f6a, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f73"),
	        (0x0f73, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f7c"),
	        (0x0f81, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f8a"),
	        (0x0f8f, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f9c"),
	        (0x0f98, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fa5"),
	        (0x0fa6, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fb3"),
	        (0x0ffe, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t100a"),
	        (0x1007, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1013"),
	        (0x1015, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1021"),
	        (0x1026, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t102c"),
	        (0x102f, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1035"),
	        (0x103d, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1043"),
	        (0x1107, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t110f"),
	        (0x1110, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1118"),
	        (0x111e, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1126"),
	        (0x1131, &[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1129"),
	        (0x113a, &[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1132"),
	        (0x1148, &[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1140"),
	        (0x1138, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1141"),
	        (0x1141, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t114a"),
	        (0x114f, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1158"),
	        (0x1153, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1169"),
	        (0x115c, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1172"),
	        (0x116a, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1180"),
	        (0x11b1, &[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11cb"),
	        (0x11ba, &[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11d4"),
	        (0x11c8, &[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11e2"),
	        (0x0051, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0058"),
	        (0x0065, &[0x7d, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0082"),
	        (0x0101, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0111"),
	        (0x0113, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0123"),
	        (0x0151, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0161"),
	        (0x01ba, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01cc"),
	        (0x01c3, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01d5"),
	        (0x01d1, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01e3"),
	        (0x03a3, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03ac"),
	        (0x03ac, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03b5"),
	        (0x03ba, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03c3"),
	        (0x07be, &[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07c3"),
	        (0x07c7, &[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07cc"),
	        (0x07d5, &[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07da"),
	        (0x081f, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0831"),
	        (0x0828, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t083a"),
	        (0x0836, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0848"),
	        (0x0852, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t085b"),
	        (0x085b, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0864"),
	        (0x0869, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0872"),
	        (0x0dc4, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dcb"),
	        (0x0dcd, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dd4"),
	        (0x0ddb, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0de2"),
	        (0x0df7, &[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e02"),
	        (0x0e00, &[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e0b"),
	        (0x0e0e, &[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e19"),
	        (0x0e39, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e49"),
	        (0x0e42, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e52"),
	        (0x0e50, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e60"),
	        (0x0e9f, &[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eab"),
	        (0x0ea8, &[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eb4"),
	        (0x0eb6, &[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0ec2"),
	        (0x0f12, &[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f37"),
	        (0x0f1b, &[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f40"),
	        (0x0f29, &[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f4e"),
	        (0x1040, &[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t106b"),
	        (0x1049, &[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1074"),
	        (0x1057, &[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1082"),
	        (0x00fb, &[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t010a"),
	        (0x0104, &[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0113"),
	        (0x0112, &[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0121"),
	        (0x062a, &[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t062f"),
	        (0x0633, &[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0638"),
	        (0x0641, &[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0646"),
	        (0x0fdb, &[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fe1"),
	        (0x0fe4, &[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fea"),
	        (0x0ff2, &[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0ff8"),
	        (0x1187, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
	        (0x1191, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
	        (0x1190, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
	        (0x119a, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
	        (0x119e, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
	        (0x11a8, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
	        (0x11e9, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
	        (0x11f3, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
	        (0x11f2, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
	        (0x11fc, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
	        (0x1200, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
	        (0x120a, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
	        (0x1281, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1270"),
	        (0x128a, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1279"),
	        (0x1298, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1287"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) =
                Instruction::decode_conditional_jump_instruction(testcase.0, testcase.1)
            {

                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    #[test]
    fn test_decode_interrupt_instruction() {
        let testcases = [(0x017f, &[0xcd, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "int\t20"),];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode_interrupt_instruction(testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, result: {:?}, expected: {}",
                    i,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }

    // #[test]
    // fn test_decode_escape_instruction() {
    //     let testcases: [_; 0] = [];

    //     for (i, testcase) in testcases.into_iter().enumerate() {
    //         if let (l, Some(instruction)) = Instruction::decode_escape_instruction(testcase.0) {
    //             assert_eq!(
    //                 l, testcase.1,
    //                 "#{}, result: {}, expected: {}",
    //                 i, l, testcase.1
    //             );
    //             assert_eq!(
    //                 format!("{}", instruction),
    //                 testcase.2,
    //                 "#{}, result: {}, expected: {}",
    //                 i,
    //                 instruction,
    //                 testcase.2
    //             )
    //         }
    //     }
    // }

    #[test]
    fn test_decode() {
        let testcases = [
	       	(0x1124, &[0x11, 0xc9, 0x00, 0x00, 0x00, 0x00], 2, "adc\tcx, cx"),
	        (0x06b8, &[0x83, 0x46, 0xec, 0x02, 0x00, 0x00], 4, "add\t[bp-14], 2"),
	        (0x0652, &[0x01, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "add\t[bp-14], dx"),
	        (0x018d, &[0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "add\t[bx+si], al"),
	        (0x00df, &[0x00, 0x55, 0x89, 0x00, 0x00, 0x00], 3, "add\t[di-77], dl"),
	        (0x0147, &[0x83, 0x05, 0x02, 0x00, 0x00, 0x00], 3, "add\t[di], 2"),
	        (0x016c, &[0x83, 0x05, 0x04, 0x00, 0x00, 0x00], 3, "add\t[di], 4"),
	        (0x0119, &[0x03, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "add\tax, [bp-4]"),
	        (0x0a0d, &[0x83, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "add\tbx, 1"),
	        (0x0462, &[0x83, 0xc3, 0x02, 0x00, 0x00, 0x00], 3, "add\tbx, 2"),
	        (0x1140, &[0x83, 0xc3, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, 4"),
	        (0x0ae2, &[0x03, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+4]"),
	        (0x0048, &[0x03, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "add\tbx, [bp+6]"),
	        (0x1273, &[0x01, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "add\tbx, dx"),
	        (0x00db, &[0x00, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "add\tcl, ch"),
	        (0x00ed, &[0x83, 0xc1, 0x02, 0x00, 0x00, 0x00], 3, "add\tcx, 2"),
	        (0x000c, &[0x01, 0xc1, 0x00, 0x00, 0x00, 0x00], 2, "add\tcx, ax"),
	        (0x1133, &[0x01, 0xcf, 0x00, 0x00, 0x00, 0x00], 2, "add\tdi, cx"),
	        (0x0af2, &[0x81, 0xc2, 0xff, 0x03, 0x00, 0x00], 4, "add\tdx, 03ff"),
	        (0x05be, &[0x83, 0xc2, 0x02, 0x00, 0x00, 0x00], 3, "add\tdx, 2"),
	        (0x0072, &[0x83, 0xc2, 0x30, 0x00, 0x00, 0x00], 3, "add\tdx, 30"),
	        (0x128b, &[0x03, 0x16, 0x30, 0x00, 0x00, 0x00], 4, "add\tdx, [0030]"),
	        (0x0dec, &[0x03, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "add\tdx, [0126]"),
	        (0x0de3, &[0x03, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "add\tdx, [0128]"),
	        (0x0dfa, &[0x03, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "add\tdx, [012e]"),
	        (0x0ae0, &[0x03, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "add\tdx, [0214]"),
	        (0x0ad7, &[0x03, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "add\tdx, [0216]"),
	        (0x0aee, &[0x03, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "add\tdx, [021c]"),
	        (0x0840, &[0x03, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "add\tdx, [bp+6]"),
	        (0x0caf, &[0x03, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "add\tdx, [bp-a]"),
	        (0x0bc0, &[0x01, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "add\tdx, si"),
	        (0x0b9a, &[0x83, 0xc6, 0x02, 0x00, 0x00, 0x00], 3, "add\tsi, 2"),
	        (0x1130, &[0x01, 0xce, 0x00, 0x00, 0x00, 0x00], 2, "add\tsi, cx"),
	        (0x0097, &[0x83, 0xc4, 0x06, 0x00, 0x00, 0x00], 3, "add\tsp, 6"),
	        (0x093e, &[0x83, 0xc4, 0x08, 0x00, 0x00, 0x00], 3, "add\tsp, 8"),
	        (0x028d, &[0x83, 0xc4, 0x0a, 0x00, 0x00, 0x00], 3, "add\tsp, a"),
	        (0x0512, &[0x83, 0xc4, 0x0c, 0x00, 0x00, 0x00], 3, "add\tsp, c"),
	        (0x00dd, &[0x21, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "and\t[bx+si], ax"),
	        (0x0fb9, &[0x81, 0x64, 0x04, 0x7f, 0xfe, 0x00], 5, "and\t[si+4], fe7f"),
	        (0x0fda, &[0x81, 0x64, 0x04, 0xff, 0xfe, 0x00], 5, "and\t[si+4], feff"),
	        (0x0890, &[0x81, 0x64, 0x04, 0x7f, 0xff, 0x00], 5, "and\t[si+4], ff7f"),
	        (0x03de, &[0x81, 0xe7, 0xef, 0xff, 0x00, 0x00], 4, "and\tdi, ffef"),
	        (0x03d4, &[0x81, 0xe7, 0xfb, 0xff, 0x00, 0x00], 4, "and\tdi, fffb"),
	        (0x006e, &[0x81, 0xe2, 0x07, 0x00, 0x00, 0x00], 4, "and\tdx, 0007"),
	        (0x01bc, &[0x23, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "and\tdx, [bp+6]"),
	        (0x0941, &[0x21, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "and\tdx, ax"),
	        (0x0af6, &[0x81, 0xe2, 0x00, 0xfc, 0x00, 0x00], 4, "and\tdx, fc00"),
	        (0x0b5c, &[0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00], 4, "and\tdx, fffe"),
	        (0x0031, &[0xe8, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "call\t0039"),
	        (0x0040, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0047"),
	        (0x0064, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0047"),
	        (0x006d, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0050"),
	        (0x006e, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0051"),
	        (0x007b, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t005e"),
	        (0x0035, &[0xe8, 0x29, 0x00, 0x00, 0x00, 0x00], 3, "call\t0061"),
	        (0x0d95, &[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0061"),
	        (0x0080, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t0063"),
	        (0x0035, &[0xe8, 0x32, 0x00, 0x00, 0x00, 0x00], 3, "call\t006a"),
	        (0x0d9e, &[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t006a"),
	        (0x0035, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t006b"),
	        (0x0035, &[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0078"),
	        (0x0dac, &[0xe8, 0xc9, 0xf2, 0x00, 0x00, 0x00], 3, "call\t0078"),
	        (0x0035, &[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t007d"),
	        (0x0040, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t007e"),
	        (0x005c, &[0xe8, 0x26, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
	        (0x0076, &[0xe8, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0085"),
	        (0x0048, &[0xe8, 0x3c, 0x00, 0x00, 0x00, 0x00], 3, "call\t0087"),
	        (0x0081, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t0088"),
	        (0x0048, &[0xe8, 0x41, 0x00, 0x00, 0x00, 0x00], 3, "call\t008c"),
	        (0x0052, &[0xe8, 0x40, 0x00, 0x00, 0x00, 0x00], 3, "call\t0095"),
	        (0x0093, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t009a"),
	        (0x0077, &[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t009c"),
	        (0x11f7, &[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
	        (0x124d, &[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t009c"),
	        (0x0056, &[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t009e"),
	        (0x00be, &[0xe8, 0xe0, 0xff, 0x00, 0x00, 0x00], 3, "call\t00a1"),
	        (0x0080, &[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00a5"),
	        (0x1200, &[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
	        (0x1256, &[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00a5"),
	        (0x008e, &[0xe8, 0x22, 0x00, 0x00, 0x00, 0x00], 3, "call\t00b3"),
	        (0x120e, &[0xe8, 0xa2, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
	        (0x1264, &[0xe8, 0x4c, 0xee, 0x00, 0x00, 0x00], 3, "call\t00b3"),
	        (0x0035, &[0xe8, 0x83, 0x00, 0x00, 0x00, 0x00], 3, "call\t00bb"),
	        (0x0358, &[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
	        (0x0386, &[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c0"),
	        (0x0361, &[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
	        (0x038f, &[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00c9"),
	        (0x036f, &[0xe8, 0x65, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
	        (0x039d, &[0xe8, 0x37, 0xfd, 0x00, 0x00, 0x00], 3, "call\t00d7"),
	        (0x00d1, &[0xe8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "call\t00d8"),
	        (0x0094, &[0xe8, 0x45, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dc"),
	        (0x00a7, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
	        (0x00d4, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00dd"),
	        (0x00b9, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
	        (0x00e6, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t00ef"),
	        (0x04f8, &[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t0114"),
	        (0x052d, &[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t0114"),
	        (0x0501, &[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t011d"),
	        (0x0536, &[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t011d"),
	        (0x00ef, &[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0121"),
	        (0x050f, &[0xe8, 0x19, 0xfc, 0x00, 0x00, 0x00], 3, "call\t012b"),
	        (0x0544, &[0xe8, 0xe4, 0xfb, 0x00, 0x00, 0x00], 3, "call\t012b"),
	        (0x00f7, &[0xe8, 0x33, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
	        (0x0124, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t012d"),
	        (0x0101, &[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0133"),
	        (0x013f, &[0xe8, 0x2f, 0x00, 0x00, 0x00, 0x00], 3, "call\t0171"),
	        (0x0093, &[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a0"),
	        (0x1082, &[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a0"),
	        (0x009c, &[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02a9"),
	        (0x108b, &[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02a9"),
	        (0x00aa, &[0xe8, 0x0a, 0x02, 0x00, 0x00, 0x00], 3, "call\t02b7"),
	        (0x1099, &[0xe8, 0x1b, 0xf2, 0x00, 0x00, 0x00], 3, "call\t02b7"),
	        (0x09cc, &[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0802"),
	        (0x0a34, &[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0802"),
	        (0x09d5, &[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t080b"),
	        (0x0a3d, &[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t080b"),
	        (0x09e3, &[0xe8, 0x33, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0819"),
	        (0x0a4b, &[0xe8, 0xcb, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0819"),
	        (0x02e5, &[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x041c, &[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x067a, &[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x06cc, &[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x06ff, &[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x073a, &[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x0791, &[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x07de, &[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t083b"),
	        (0x02ee, &[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0425, &[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0683, &[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x06d5, &[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0708, &[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x0743, &[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x079a, &[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x07e7, &[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0844"),
	        (0x02fc, &[0xe8, 0x53, 0x05, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0433, &[0xe8, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0691, &[0xe8, 0xbe, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x06e3, &[0xe8, 0x6c, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0716, &[0xe8, 0x39, 0x01, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0751, &[0xe8, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x07a8, &[0xe8, 0xa7, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x07f5, &[0xe8, 0x5a, 0x00, 0x00, 0x00, 0x00], 3, "call\t0852"),
	        (0x0273, &[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
	        (0x0aa4, &[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a5d"),
	        (0x027c, &[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a66"),
	        (0x0aad, &[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a66"),
	        (0x028a, &[0xe8, 0xe7, 0x07, 0x00, 0x00, 0x00], 3, "call\t0a74"),
	        (0x0abb, &[0xe8, 0xb6, 0xff, 0x00, 0x00, 0x00], 3, "call\t0a74"),
	        (0x0bf0, &[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ac3"),
	        (0x0bf9, &[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0acc"),
	        (0x0c07, &[0xe8, 0xd0, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ada"),
	        (0x08ab, &[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x08d1, &[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x0c18, &[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x0cc8, &[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b20"),
	        (0x08b4, &[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x08da, &[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x0c21, &[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x0cd1, &[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b29"),
	        (0x08c2, &[0xe8, 0x72, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x08e8, &[0xe8, 0x4c, 0x02, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x0c2f, &[0xe8, 0x05, 0xff, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x0cdf, &[0xe8, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0b37"),
	        (0x0b12, &[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0c28, &[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0cbc, &[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0ce6, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cef"),
	        (0x0b1b, &[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0c31, &[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0cc5, &[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0cef, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0cf8"),
	        (0x0b29, &[0xe8, 0xda, 0x01, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x0c3f, &[0xe8, 0xc4, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x0cd3, &[0xe8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x0cfd, &[0xe8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "call\t0d06"),
	        (0x028d, &[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d65"),
	        (0x0296, &[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d6e"),
	        (0x02a4, &[0xe8, 0xd5, 0x0a, 0x00, 0x00, 0x00], 3, "call\t0d7c"),
	        (0x058d, &[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d81"),
	        (0x0596, &[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d8a"),
	        (0x05a4, &[0xe8, 0xf1, 0x07, 0x00, 0x00, 0x00], 3, "call\t0d98"),
	        (0x0af6, &[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
	        (0x0e03, &[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0d9c"),
	        (0x0aff, &[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0da5"),
	        (0x0e0c, &[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0da5"),
	        (0x0b0d, &[0xe8, 0xa3, 0x02, 0x00, 0x00, 0x00], 3, "call\t0db3"),
	        (0x0e1a, &[0xe8, 0x96, 0xff, 0x00, 0x00, 0x00], 3, "call\t0db3"),
	        (0x0b6a, &[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dd7"),
	        (0x0b73, &[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0de0"),
	        (0x0b81, &[0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00], 3, "call\t0dee"),
	        (0x00b7, &[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x0dbc, &[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x0e97, &[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x0ef0, &[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x10dc, &[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e15"),
	        (0x00c0, &[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x0dc5, &[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x0ea0, &[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x0ef9, &[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x10e5, &[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e1e"),
	        (0x00ce, &[0xe8, 0x5b, 0x0d, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x0dd3, &[0xe8, 0x56, 0x00, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x0eae, &[0xe8, 0x7b, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x0f07, &[0xe8, 0x22, 0xff, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x10f3, &[0xe8, 0x36, 0xfd, 0x00, 0x00, 0x00], 3, "call\t0e2c"),
	        (0x089f, &[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e4f"),
	        (0x08a8, &[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e58"),
	        (0x08b6, &[0xe8, 0xad, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e66"),
	        (0x0924, &[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x09ab, &[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x0a14, &[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x0f84, &[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x0ff3, &[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e6d"),
	        (0x092d, &[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x09b4, &[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x0a1d, &[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x0f8d, &[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x0ffc, &[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e76"),
	        (0x093b, &[0xe8, 0x46, 0x05, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x09c2, &[0xe8, 0xbf, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x0a2b, &[0xe8, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x0f9b, &[0xe8, 0xe6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x100a, &[0xe8, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0e84"),
	        (0x0e5c, &[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0eb6"),
	        (0x0e65, &[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ebf"),
	        (0x0811, &[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
	        (0x0947, &[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
	        (0x1013, &[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ecc"),
	        (0x0e73, &[0xe8, 0x57, 0x00, 0x00, 0x00, 0x00], 3, "call\t0ecd"),
	        (0x081a, &[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
	        (0x0950, &[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
	        (0x101c, &[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ed5"),
	        (0x0828, &[0xe8, 0xb8, 0x06, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
	        (0x095e, &[0xe8, 0x82, 0x05, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
	        (0x102a, &[0xe8, 0xb6, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ee3"),
	        (0x0f27, &[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
	        (0x1064, &[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0ef9"),
	        (0x0f30, &[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f02"),
	        (0x106d, &[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f02"),
	        (0x0f3e, &[0xe8, 0xcf, 0xff, 0x00, 0x00, 0x00], 3, "call\t0f10"),
	        (0x107b, &[0xe8, 0x92, 0xfe, 0x00, 0x00, 0x00], 3, "call\t0f10"),
	        (0x0d8c, &[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t106e"),
	        (0x0d95, &[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1077"),
	        (0x0da3, &[0xe8, 0xdf, 0x02, 0x00, 0x00, 0x00], 3, "call\t1085"),
	        (0x0e27, &[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t1095"),
	        (0x0e30, &[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t109e"),
	        (0x0cdd, &[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10a7"),
	        (0x0e3e, &[0xe8, 0x6b, 0x02, 0x00, 0x00, 0x00], 3, "call\t10ac"),
	        (0x0ce6, &[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10b0"),
	        (0x0ec3, &[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10b8"),
	        (0x0cf4, &[0xe8, 0xc7, 0x03, 0x00, 0x00, 0x00], 3, "call\t10be"),
	        (0x0ecc, &[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10c1"),
	        (0x0eda, &[0xe8, 0xf2, 0x01, 0x00, 0x00, 0x00], 3, "call\t10cf"),
	        (0x0a82, &[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1147"),
	        (0x0a8b, &[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t1150"),
	        (0x0a99, &[0xe8, 0xc2, 0x06, 0x00, 0x00, 0x00], 3, "call\t115e"),
	        (0x0a71, &[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11a5"),
	        (0x0a7a, &[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11ae"),
	        (0x0a88, &[0xe8, 0x31, 0x07, 0x00, 0x00, 0x00], 3, "call\t11bc"),
	        (0x1198, &[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t11f7"),
	        (0x11a1, &[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t1200"),
	        (0x11af, &[0xe8, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "call\t120e"),
	        (0x1195, &[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1250"),
	        (0x119e, &[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1259"),
	        (0x11ac, &[0xe8, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "call\t1267"),
	        (0x124a, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1288"),
	        (0x1253, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t1291"),
	        (0x1261, &[0xe8, 0x3b, 0x00, 0x00, 0x00, 0x00], 3, "call\t129f"),
	        (0x00b4, &[0xff, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "call\tbx"),
	        (0x009d, &[0x98, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "cbw"),
	        (0x1112, &[0xfc, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "cld"),
	        (0x00c1, &[0x83, 0x3e, 0x06, 0x00, 0x00, 0x00], 5, "cmp\t[0006], 0"),
	        (0x0070, &[0x83, 0x3e, 0x0c, 0x00, 0x00, 0x00], 5, "cmp\t[000c], 0"),
	        (0x0071, &[0x83, 0x3e, 0x0e, 0x00, 0x00, 0x00], 5, "cmp\t[000e], 0"),
	        (0x007e, &[0x83, 0x3e, 0x14, 0x00, 0x00, 0x00], 5, "cmp\t[0014], 0"),
	        (0x0b68, &[0x83, 0x3e, 0x12, 0x02, 0x00, 0x00], 5, "cmp\t[0212], 0"),
	        (0x0b5f, &[0x83, 0x3e, 0x14, 0x02, 0x00, 0x00], 5, "cmp\t[0214], 0"),
	        (0x0ad7, &[0x39, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], bx"),
	        (0x0aee, &[0x39, 0x16, 0x14, 0x02, 0x00, 0x00], 4, "cmp\t[0214], dx"),
	        (0x0ace, &[0x39, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], bx"),
	        (0x0ae5, &[0x39, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "cmp\t[0216], dx"),
	        (0x0b76, &[0x83, 0x3e, 0x1a, 0x02, 0x00, 0x00], 5, "cmp\t[021a], 0"),
	        (0x0ae5, &[0x39, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], bx"),
	        (0x0afc, &[0x39, 0x16, 0x1c, 0x02, 0x00, 0x00], 4, "cmp\t[021c], dx"),
	        (0x0b3f, &[0x83, 0x7e, 0x04, 0x00, 0x00, 0x00], 4, "cmp\t[bp+4], 0"),
	        (0x0dbd, &[0x39, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], dx"),
	        (0x003f, &[0x39, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "cmp\t[bp+4], si"),
	        (0x0c36, &[0x83, 0x7e, 0x06, 0x00, 0x00, 0x00], 4, "cmp\t[bp+6], 0"),
	        (0x021d, &[0x83, 0x7e, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\t[bp+c], 0"),
	        (0x0aa6, &[0x83, 0x7e, 0x0c, 0x01, 0x00, 0x00], 4, "cmp\t[bp+c], 1"),
	        (0x013f, &[0x83, 0x7e, 0x0e, 0x00, 0x00, 0x00], 4, "cmp\t[bp+e], 0"),
	        (0x0655, &[0x83, 0x7e, 0xee, 0x00, 0x00, 0x00], 4, "cmp\t[bp-12], 0"),
	        (0x0308, &[0x83, 0x7e, 0xec, 0x00, 0x00, 0x00], 4, "cmp\t[bp-14], 0"),
	        (0x0378, &[0x39, 0x46, 0xea, 0x00, 0x00, 0x00], 3, "cmp\t[bp-16], ax"),
	        (0x01cd, &[0x83, 0x7e, 0xfe, 0x00, 0x00, 0x00], 4, "cmp\t[bp-2], 0"),
	        (0x103a, &[0x39, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bp-2], dx"),
	        (0x0a13, &[0x83, 0x7e, 0xfc, 0x00, 0x00, 0x00], 4, "cmp\t[bp-4], 0"),
	        (0x010e, &[0x83, 0x7e, 0xfc, 0x09, 0x00, 0x00], 4, "cmp\t[bp-4], 9"),
	        (0x07c6, &[0x83, 0x7e, 0xfa, 0x00, 0x00, 0x00], 4, "cmp\t[bp-6], 0"),
	        (0x0bd0, &[0x39, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], bx"),
	        (0x0bc4, &[0x39, 0x7e, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], di"),
	        (0x0cb4, &[0x39, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "cmp\t[bp-6], si"),
	        (0x02db, &[0x83, 0x7e, 0xf8, 0x25, 0x00, 0x00], 4, "cmp\t[bp-8], 25"),
	        (0x060b, &[0x83, 0x7e, 0xf8, 0x58, 0x00, 0x00], 4, "cmp\t[bp-8], 58"),
	        (0x04f2, &[0x83, 0x7e, 0xf8, 0x70, 0x00, 0x00], 4, "cmp\t[bp-8], 70"),
	        (0x0605, &[0x83, 0x7e, 0xf8, 0x78, 0x00, 0x00], 4, "cmp\t[bp-8], 78"),
	        (0x03b6, &[0x83, 0x7e, 0xf6, 0x00, 0x00, 0x00], 4, "cmp\t[bp-a], 0"),
	        (0x0298, &[0x39, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "cmp\t[bp-a], si"),
	        (0x03a6, &[0x83, 0x7e, 0xf4, 0x00, 0x00, 0x00], 4, "cmp\t[bp-c], 0"),
	        (0x0584, &[0x81, 0x7e, 0xf4, 0x01, 0x04, 0x00], 5, "cmp\t[bp-c], 0401"),
	        (0x0b4f, &[0x83, 0x7e, 0xf4, 0x02, 0x00, 0x00], 4, "cmp\t[bp-c], 2"),
	        (0x0f21, &[0x83, 0xbf, 0x34, 0x00, 0x00, 0x00], 5, "cmp\t[bx+34], 0"),
	        (0x0f18, &[0x83, 0xbf, 0x36, 0x00, 0x00, 0x00], 5, "cmp\t[bx+36], 0"),
	        (0x0f2f, &[0x83, 0xbf, 0x3c, 0x00, 0x00, 0x00], 5, "cmp\t[bx+3c], 0"),
	        (0x0d4b, &[0x39, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[bx-2], si"),
	        (0x001e, &[0x81, 0x3f, 0x53, 0x53, 0x00, 0x00], 4, "cmp\t[bx], 5353"),
	        (0x0d64, &[0x39, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "cmp\t[di-2], dx"),
	        (0x014d, &[0x83, 0x7c, 0x02, 0x00, 0x00, 0x00], 4, "cmp\t[si+2], 0"),
	        (0x1199, &[0x39, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "cmp\t[si+6], dx"),
	        (0x08a3, &[0x83, 0x7c, 0x08, 0x00, 0x00, 0x00], 4, "cmp\t[si+8], 0"),
	        (0x0998, &[0x39, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "cmp\t[si], dx"),
	        (0x0964, &[0x3d, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "cmp\tax, 0001"),
	        (0x1146, &[0x3b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, [bx]"),
	        (0x110e, &[0x39, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tax, cx"),
	        (0x0b87, &[0x3d, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tax, ffff"),
	        (0x0013, &[0x81, 0xfb, 0x0c, 0x00, 0x00, 0x00], 4, "cmp\tbx, 000c"),
	        (0x0013, &[0x81, 0xfb, 0x14, 0x00, 0x00, 0x00], 4, "cmp\tbx, 0014"),
	        (0x0013, &[0x81, 0xfb, 0x12, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0212"),
	        (0x0013, &[0x81, 0xfb, 0x14, 0x02, 0x00, 0x00], 4, "cmp\tbx, 0214"),
	        (0x0013, &[0x81, 0xfb, 0x1a, 0x02, 0x00, 0x00], 4, "cmp\tbx, 021a"),
	        (0x0234, &[0x80, 0x7e, 0x0a, 0x58, 0x00, 0x00], 4, "cmp byte\t[bp+a], 58"),
	        (0x020b, &[0x80, 0x7e, 0x0a, 0x6f, 0x00, 0x00], 4, "cmp byte\t[bp+a], 6f"),
	        (0x023a, &[0x80, 0x7e, 0x0a, 0x70, 0x00, 0x00], 4, "cmp byte\t[bp+a], 70"),
	        (0x022e, &[0x80, 0x7e, 0x0a, 0x78, 0x00, 0x00], 4, "cmp byte\t[bp+a], 78"),
	        (0x04d5, &[0x80, 0x3f, 0x00, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 0"),
	        (0x0630, &[0x80, 0x3f, 0x20, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 20"),
	        (0x0626, &[0x80, 0x3f, 0x2b, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2b"),
	        (0x062b, &[0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2d"),
	        (0x0384, &[0x80, 0x3f, 0x2e, 0x00, 0x00, 0x00], 3, "cmp byte\t[bx], 2e"),
	        (0x00e1, &[0x80, 0x3c, 0x2a, 0x00, 0x00, 0x00], 3, "cmp byte\t[si], 2a"),
	        (0x1113, &[0x83, 0xf9, 0x10, 0x00, 0x00, 0x00], 3, "cmp\tcx, 10"),
	        (0x0f26, &[0x83, 0xff, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tdi, 14"),
	        (0x0ac3, &[0x83, 0xff, 0x09, 0x00, 0x00, 0x00], 3, "cmp\tdi, 9"),
	        (0x098e, &[0x83, 0xff, 0x0a, 0x00, 0x00, 0x00], 3, "cmp\tdi, a"),
	        (0x1193, &[0x39, 0xdf, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, bx"),
	        (0x0bc9, &[0x39, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tdi, si"),
	        (0x0303, &[0x83, 0xfa, 0xff, 0x00, 0x00, 0x00], 3, "cmp\tdx, -1"),
	        (0x1269, &[0x83, 0xfa, 0x15, 0x00, 0x00, 0x00], 3, "cmp\tdx, 15"),
	        (0x0d85, &[0x83, 0xfa, 0x1a, 0x00, 0x00, 0x00], 3, "cmp\tdx, 1a"),
	        (0x0b66, &[0x83, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "cmp\tdx, 4"),
	        (0x089e, &[0x81, 0xfe, 0x1c, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001c"),
	        (0x0895, &[0x81, 0xfe, 0x1e, 0x00, 0x00, 0x00], 4, "cmp\tsi, 001e"),
	        (0x08ac, &[0x81, 0xfe, 0x24, 0x00, 0x00, 0x00], 4, "cmp\tsi, 0024"),
	        (0x1054, &[0x83, 0xfe, 0x14, 0x00, 0x00, 0x00], 3, "cmp\tsi, 14"),
	        (0x0062, &[0x83, 0xfe, 0x05, 0x00, 0x00, 0x00], 3, "cmp\tsi, 5"),
	        (0x0834, &[0x39, 0xfe, 0x00, 0x00, 0x00, 0x00], 2, "cmp\tsi, di"),
	        (0x014c, &[0x99, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "cwd"),
	        (0x0664, &[0xff, 0x4e, 0xfc, 0x00, 0x00, 0x00], 3, "dec\t[bp-4]"),
	        (0x0771, &[0xff, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "dec\t[bp-6]"),
	        (0x04e0, &[0xff, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "dec\t[bp-c]"),
	        (0x1291, &[0x4b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tbx"),
	        (0x1143, &[0x49, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tcx"),
	        (0x1135, &[0x4f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdi"),
	        (0x02e3, &[0x4a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tdx"),
	        (0x00a9, &[0x4e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "dec\tsi"),
	        (0x1174, &[0xf7, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "div\tbx"),
	        (0x0038, &[0xf4, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "hlt"),
	        (0x00e4, &[0xec, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "in\tal, dx"),
	        (0x00e2, &[0xe5, 0x83, 0x00, 0x00, 0x00, 0x00], 2, "in\tax, 83"),
	        (0x02cb, &[0xff, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "inc\t[bp+4]"),
	        (0x0635, &[0xff, 0x46, 0xee, 0x00, 0x00, 0x00], 3, "inc\t[bp-12]"),
	        (0x031c, &[0xff, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "inc\t[bp-14]"),
	        (0x0674, &[0xff, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "inc\t[bp-18]"),
	        (0x04dd, &[0xff, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "inc\t[bp-2]"),
	        (0x02ad, &[0xff, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "inc\t[bp-a]"),
	        (0x0c0f, &[0xff, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "inc\t[bp-c]"),
	        (0x02f0, &[0xff, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "inc\t[si+a]"),
	        (0x084e, &[0x40, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tax"),
	        (0x0e7e, &[0x43, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tbx"),
	        (0x0f4b, &[0x47, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdi"),
	        (0x0b5b, &[0x42, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tdx"),
	        (0x007f, &[0x46, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "inc\tsi"),
	        (0x017f, &[0xcd, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "int\t20"),
	        (0x0572, &[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0579"),
	        (0x057b, &[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0582"),
	        (0x0589, &[0x72, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0590"),
	        (0x0b3c, &[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b41"),
	        (0x0b45, &[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b4a"),
	        (0x0b53, &[0x72, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0b58"),
	        (0x0bb0, &[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0be6"),
	        (0x0bb9, &[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bef"),
	        (0x0bc7, &[0x72, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0bfd"),
	        (0x0c5e, &[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c95"),
	        (0x0c67, &[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0c9e"),
	        (0x0c75, &[0x72, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cac"),
	        (0x0ca0, &[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cc5"),
	        (0x0ca9, &[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cce"),
	        (0x0cb7, &[0x72, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0cdc"),
	        (0x0d0e, &[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d16"),
	        (0x0d17, &[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d1f"),
	        (0x0d25, &[0x72, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0d2d"),
	        (0x0df1, &[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0dfd"),
	        (0x0dfa, &[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e06"),
	        (0x0e08, &[0x72, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jb\t0e14"),
	        (0x10ff, &[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t110f"),
	        (0x1108, &[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
	        (0x10f9, &[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1118"),
	        (0x1102, &[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1121"),
	        (0x1116, &[0x72, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1126"),
	        (0x1110, &[0x72, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "jb\t112f"),
	        (0x1180, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t118b"),
	        (0x1189, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1194"),
	        (0x1197, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11a2"),
	        (0x11e2, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11ed"),
	        (0x11eb, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t11f6"),
	        (0x11f9, &[0x72, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jb\t1204"),
	        (0x0ae9, &[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0af5"),
	        (0x0af2, &[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0afe"),
	        (0x0b00, &[0x76, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0b0c"),
	        (0x0bbc, &[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bcd"),
	        (0x0bc5, &[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bd6"),
	        (0x0bd3, &[0x76, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be4"),
	        (0x0bb4, &[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0be6"),
	        (0x0bbd, &[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bef"),
	        (0x0bcb, &[0x76, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0bfd"),
	        (0x0cad, &[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc0"),
	        (0x0cb6, &[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cc9"),
	        (0x0cc4, &[0x76, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0cd7"),
	        (0x0dfb, &[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e02"),
	        (0x0e04, &[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e0b"),
	        (0x0e12, &[0x76, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t0e19"),
	        (0x1185, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t118b"),
	        (0x118e, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1194"),
	        (0x119c, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11a2"),
	        (0x11e7, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11ed"),
	        (0x11f0, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t11f6"),
	        (0x11fe, &[0x76, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jbe\t1204"),
	        (0x006c, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0074"),
	        (0x0075, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007d"),
	        (0x0076, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t007e"),
	        (0x0083, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t008b"),
	        (0x0088, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0090"),
	        (0x00c6, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t00ce"),
	        (0x00f8, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t00fd"),
	        (0x010a, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t010f"),
	        (0x012c, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t013e"),
	        (0x0135, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0147"),
	        (0x0148, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t014d"),
	        (0x0143, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0155"),
	        (0x0153, &[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0168"),
	        (0x015c, &[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t0171"),
	        (0x016a, &[0x74, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "je\t017f"),
	        (0x017f, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t0191"),
	        (0x0188, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t019a"),
	        (0x0196, &[0x74, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "je\t01a8"),
	        (0x01d0, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01d8"),
	        (0x01d9, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e1"),
	        (0x01dc, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01e2"),
	        (0x01e5, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01eb"),
	        (0x01b4, &[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ee"),
	        (0x01e7, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t01ef"),
	        (0x01bd, &[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f7"),
	        (0x01f3, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t01f9"),
	        (0x01f2, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t01fe"),
	        (0x01cb, &[0x74, 0x38, 0x00, 0x00, 0x00, 0x00], 2, "je\t0205"),
	        (0x01fb, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0207"),
	        (0x0209, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0215"),
	        (0x0215, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0223"),
	        (0x021b, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
	        (0x0221, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0229"),
	        (0x021e, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t022c"),
	        (0x0224, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
	        (0x022a, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0232"),
	        (0x022c, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t023a"),
	        (0x0232, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
	        (0x0238, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0240"),
	        (0x0284, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t029b"),
	        (0x028d, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02a4"),
	        (0x029b, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t02b2"),
	        (0x02f5, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t02ff"),
	        (0x02fe, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0308"),
	        (0x02c8, &[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t030a"),
	        (0x02d1, &[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0313"),
	        (0x030c, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0316"),
	        (0x02df, &[0x74, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "je\t0321"),
	        (0x0345, &[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0332"),
	        (0x034e, &[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t033b"),
	        (0x035c, &[0x74, 0xeb, 0x00, 0x00, 0x00, 0x00], 2, "je\t0349"),
	        (0x0364, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t036a"),
	        (0x036d, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0373"),
	        (0x037b, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0381"),
	        (0x039d, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ac"),
	        (0x03a6, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03b5"),
	        (0x03bb, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c1"),
	        (0x03b4, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t03c3"),
	        (0x03c4, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03ca"),
	        (0x03c5, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03cb"),
	        (0x03ce, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d4"),
	        (0x03d2, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03d8"),
	        (0x03dc, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t03e2"),
	        (0x042c, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0436"),
	        (0x0435, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t043f"),
	        (0x0443, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t044d"),
	        (0x0446, &[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t045c"),
	        (0x044f, &[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0465"),
	        (0x045d, &[0x74, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "je\t0473"),
	        (0x0460, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t047a"),
	        (0x0469, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0483"),
	        (0x0477, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0491"),
	        (0x04b6, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04bb"),
	        (0x04bf, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04c4"),
	        (0x04cd, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t04d2"),
	        (0x04df, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04e5"),
	        (0x04e8, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04ee"),
	        (0x04f6, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t04fc"),
	        (0x0555, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0562"),
	        (0x055e, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t056b"),
	        (0x056c, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0579"),
	        (0x05d3, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05da"),
	        (0x05dc, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05e3"),
	        (0x05ea, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t05f1"),
	        (0x05f2, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t05fa"),
	        (0x05fb, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0603"),
	        (0x0609, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0611"),
	        (0x0604, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
	        (0x0612, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
	        (0x0617, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t061e"),
	        (0x05ec, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
	        (0x060a, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0621"),
	        (0x060d, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
	        (0x061b, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
	        (0x0620, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0627"),
	        (0x05f5, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
	        (0x0613, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t062a"),
	        (0x061b, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
	        (0x0629, &[0x74, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
	        (0x062e, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0635"),
	        (0x0603, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
	        (0x0621, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
	        (0x0633, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0638"),
	        (0x063c, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0641"),
	        (0x064a, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t064f"),
	        (0x0684, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0689"),
	        (0x068d, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0692"),
	        (0x068d, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0697"),
	        (0x064b, &[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t069d"),
	        (0x069b, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
	        (0x0696, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a0"),
	        (0x0654, &[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06a6"),
	        (0x06a4, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t06ae"),
	        (0x0662, &[0x74, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "je\t06b4"),
	        (0x06d6, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t070b"),
	        (0x06df, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0714"),
	        (0x070f, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0719"),
	        (0x06ed, &[0x74, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
	        (0x0718, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0722"),
	        (0x0726, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0730"),
	        (0x074a, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t0754"),
	        (0x0753, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t075d"),
	        (0x0761, &[0x74, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "je\t076b"),
	        (0x07a1, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07aa"),
	        (0x07aa, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07b3"),
	        (0x07b8, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07c1"),
	        (0x07ee, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t07f7"),
	        (0x07f7, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0800"),
	        (0x0805, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t080e"),
	        (0x086b, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0879"),
	        (0x0874, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0882"),
	        (0x0887, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t088c"),
	        (0x0882, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0890"),
	        (0x0890, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0895"),
	        (0x0899, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t089e"),
	        (0x089e, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08a3"),
	        (0x08a7, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t08ac"),
	        (0x08a5, &[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08cd"),
	        (0x08ae, &[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08d6"),
	        (0x08bc, &[0x74, 0x26, 0x00, 0x00, 0x00, 0x00], 2, "je\t08e4"),
	        (0x0917, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t093c"),
	        (0x0920, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0945"),
	        (0x092e, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t0953"),
	        (0x0950, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t095d"),
	        (0x0907, &[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0964"),
	        (0x0959, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0966"),
	        (0x0910, &[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t096d"),
	        (0x0967, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0974"),
	        (0x091e, &[0x74, 0x5b, 0x00, 0x00, 0x00, 0x00], 2, "je\t097b"),
	        (0x097a, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
	        (0x0983, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0988"),
	        (0x0983, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
	        (0x098c, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0991"),
	        (0x0991, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
	        (0x099a, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t099f"),
	        (0x099e, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09c3"),
	        (0x09a7, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09cc"),
	        (0x09d4, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09d9"),
	        (0x09b5, &[0x74, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "je\t09da"),
	        (0x09dd, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09e2"),
	        (0x09eb, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t09f0"),
	        (0x0a07, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a2b"),
	        (0x0a10, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a34"),
	        (0x0a1e, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t0a42"),
	        (0x0afc, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b02"),
	        (0x0b05, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b0b"),
	        (0x0b13, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t0b19"),
	        (0x0bd1, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bdc"),
	        (0x0bda, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0be5"),
	        (0x0b9e, &[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bed"),
	        (0x0be8, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf3"),
	        (0x0ba7, &[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bf6"),
	        (0x0bf6, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0bfe"),
	        (0x0bb5, &[0x74, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c04"),
	        (0x0bff, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c07"),
	        (0x0c0d, &[0x74, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c15"),
	        (0x0c72, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c7d"),
	        (0x0c7b, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c86"),
	        (0x0c89, &[0x74, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c94"),
	        (0x0c59, &[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c95"),
	        (0x0c62, &[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0c9e"),
	        (0x0c70, &[0x74, 0x3a, 0x00, 0x00, 0x00, 0x00], 2, "je\t0cac"),
	        (0x0d09, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d16"),
	        (0x0d12, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d1f"),
	        (0x0d1d, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d26"),
	        (0x0d20, &[0x74, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2d"),
	        (0x0d26, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d2f"),
	        (0x0d34, &[0x74, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d3d"),
	        (0x0d2f, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d46"),
	        (0x0d38, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d4f"),
	        (0x0d46, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d5d"),
	        (0x0cff, &[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
	        (0x0d48, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d62"),
	        (0x0d08, &[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
	        (0x0d51, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d6b"),
	        (0x0d16, &[0x74, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
	        (0x0d5f, &[0x74, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "je\t0d79"),
	        (0x0da9, &[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0dd2"),
	        (0x0db2, &[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0ddb"),
	        (0x0dc0, &[0x74, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "je\t0de9"),
	        (0x0e30, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e35"),
	        (0x0e39, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e3e"),
	        (0x0e47, &[0x74, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "je\t0e4c"),
	        (0x0f1d, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
	        (0x0f2d, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f34"),
	        (0x0f26, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
	        (0x0f36, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f3d"),
	        (0x0f34, &[0x74, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
	        (0x0f44, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f4b"),
	        (0x0f41, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f50"),
	        (0x0f4a, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f59"),
	        (0x0f58, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f67"),
	        (0x0f64, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f73"),
	        (0x0f6d, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f7c"),
	        (0x0f7b, &[0x74, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "je\t0f8a"),
	        (0x0fa0, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fa7"),
	        (0x0fa9, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb0"),
	        (0x0f59, &[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fb2"),
	        (0x0f62, &[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbb"),
	        (0x0fb6, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbd"),
	        (0x0fb7, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fbe"),
	        (0x0fbf, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc6"),
	        (0x0fc1, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc8"),
	        (0x0f70, &[0x74, 0x57, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fc9"),
	        (0x0fca, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd1"),
	        (0x0fcd, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fd4"),
	        (0x0fd8, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t0fdf"),
	        (0x0fe6, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t100a"),
	        (0x0fef, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1013"),
	        (0x0ffd, &[0x74, 0x22, 0x00, 0x00, 0x00, 0x00], 2, "je\t1021"),
	        (0x104b, &[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
	        (0x105a, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1068"),
	        (0x1054, &[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
	        (0x1063, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t1071"),
	        (0x1062, &[0x74, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
	        (0x1071, &[0x74, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "je\t107f"),
	        (0x123a, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1241"),
	        (0x1243, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t124a"),
	        (0x1251, &[0x74, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "je\t1258"),
	        (0x1262, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1268"),
	        (0x126b, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t1271"),
	        (0x1279, &[0x74, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "je\t127f"),
	        (0x0050, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t005e"),
	        (0x0059, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0067"),
	        (0x005a, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0068"),
	        (0x0067, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0075"),
	        (0x006c, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t007a"),
	        (0x00aa, &[0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jl\t00b8"),
	        (0x00f5, &[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t010a"),
	        (0x00fe, &[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0113"),
	        (0x010c, &[0x7c, 0x13, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0121"),
	        (0x02cf, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02e1"),
	        (0x02d8, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02ea"),
	        (0x02e6, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t02f8"),
	        (0x0393, &[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0399"),
	        (0x039c, &[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03a2"),
	        (0x03aa, &[0x7c, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jl\t03b0"),
	        (0x0406, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0418"),
	        (0x040f, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0421"),
	        (0x041d, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t042f"),
	        (0x0658, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t066f"),
	        (0x0661, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0678"),
	        (0x066f, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0686"),
	        (0x06aa, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06c1"),
	        (0x06b3, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06ca"),
	        (0x06c1, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06d8"),
	        (0x06dd, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06f4"),
	        (0x06e6, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t06fd"),
	        (0x06f4, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t070b"),
	        (0x0724, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0736"),
	        (0x072d, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t073f"),
	        (0x073b, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t074d"),
	        (0x076f, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t0786"),
	        (0x0778, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t078f"),
	        (0x0786, &[0x7c, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "jl\t079d"),
	        (0x0768, &[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07af"),
	        (0x0771, &[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07b8"),
	        (0x077f, &[0x7c, 0x45, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07c6"),
	        (0x07c8, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07da"),
	        (0x07d1, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07e3"),
	        (0x07df, &[0x7c, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jl\t07f1"),
	        (0x112d, &[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t1143"),
	        (0x1136, &[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t114c"),
	        (0x1144, &[0x7c, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jl\t115a"),
	        (0x0042, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t005b"),
	        (0x07b3, &[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07bb"),
	        (0x07bc, &[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07c4"),
	        (0x07ca, &[0x7e, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jle\t07d2"),
	        (0x081b, &[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0831"),
	        (0x0835, &[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0838"),
	        (0x0824, &[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t083a"),
	        (0x083e, &[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0841"),
	        (0x0832, &[0x7e, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0848"),
	        (0x084c, &[0x7e, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jle\t084f"),
	        (0x0a00, &[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a4f"),
	        (0x0a09, &[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a58"),
	        (0x0a17, &[0x7e, 0x4d, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0a66"),
	        (0x0a93, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0aac"),
	        (0x0a9c, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab5"),
	        (0x0aaf, &[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ab8"),
	        (0x0ab8, &[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac1"),
	        (0x0aaa, &[0x7e, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0ac3"),
	        (0x0ac6, &[0x7e, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0acf"),
	        (0x0ded, &[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0df3"),
	        (0x0df6, &[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0dfc"),
	        (0x0e04, &[0x7e, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jle\t0e0a"),
	        (0x0088, &[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0090"),
	        (0x009c, &[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a0"),
	        (0x009a, &[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a2"),
	        (0x00a5, &[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00a9"),
	        (0x00b3, &[0xe9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00b7"),
	        (0x00d8, &[0xe9, 0x05, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t00e0"),
	        (0x0114, &[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0133"),
	        (0x0068, &[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0134"),
	        (0x004e, &[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x0085, &[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x00ad, &[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x00da, &[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0135"),
	        (0x0126, &[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0145"),
	        (0x007a, &[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0146"),
	        (0x0044, &[0xe9, 0x00, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x0060, &[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x0097, &[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x00bf, &[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x00ec, &[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0147"),
	        (0x0082, &[0xe9, 0xfe, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
	        (0x0164, &[0xe9, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0183"),
	        (0x00b8, &[0xe9, 0xc9, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0184"),
	        (0x0044, &[0xe9, 0x3e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x009e, &[0xe9, 0xe4, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x00d5, &[0xe9, 0xad, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x00fd, &[0xe9, 0x85, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x012a, &[0xe9, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0185"),
	        (0x0125, &[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01a2"),
	        (0x012e, &[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01ab"),
	        (0x013c, &[0xe9, 0x7a, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t01b9"),
	        (0x020e, &[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t029d"),
	        (0x0217, &[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02a6"),
	        (0x043f, &[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x0459, &[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x0477, &[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x048b, &[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x05b5, &[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x07c0, &[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02b1"),
	        (0x0225, &[0xe9, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t02b4"),
	        (0x0448, &[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0462, &[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0480, &[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0494, &[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x05be, &[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x07c9, &[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02ba"),
	        (0x0456, &[0xe9, 0x6f, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x0470, &[0xe9, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x048e, &[0xe9, 0x37, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x04a2, &[0xe9, 0x23, 0xfe, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x05cc, &[0xe9, 0xf9, 0xfc, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x07d7, &[0xe9, 0xee, 0xfa, 0x00, 0x00, 0x00], 3, "jmp\t02c8"),
	        (0x03de, &[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
	        (0x03e8, &[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
	        (0x03f2, &[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05b8"),
	        (0x03e7, &[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
	        (0x03f1, &[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
	        (0x03fb, &[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05c1"),
	        (0x04b8, &[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x04c3, &[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x0501, &[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x0536, &[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x054e, &[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05ca"),
	        (0x03f5, &[0xe9, 0xd7, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
	        (0x03ff, &[0xe9, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
	        (0x0409, &[0xe9, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05cf"),
	        (0x04c1, &[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x04cc, &[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x050a, &[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x053f, &[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x0557, &[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05d3"),
	        (0x04cf, &[0xe9, 0x0f, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x04da, &[0xe9, 0x04, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x0518, &[0xe9, 0xc6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x054d, &[0xe9, 0x91, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x0565, &[0xe9, 0x79, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t05e1"),
	        (0x0644, &[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
	        (0x0686, &[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t071f"),
	        (0x064d, &[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
	        (0x068f, &[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0728"),
	        (0x065b, &[0xe9, 0xd8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
	        (0x069d, &[0xe9, 0x96, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0736"),
	        (0x062c, &[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
	        (0x0635, &[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t075f"),
	        (0x0635, &[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
	        (0x063e, &[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0768"),
	        (0x0643, &[0xe9, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
	        (0x064c, &[0xe9, 0x27, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0776"),
	        (0x02c1, &[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07fc"),
	        (0x02fc, &[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0302, &[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0433, &[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0439, &[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0694, &[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x069a, &[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0716, &[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x071c, &[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0751, &[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x0757, &[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t07ff"),
	        (0x02ca, &[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0805"),
	        (0x0305, &[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x030b, &[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x043c, &[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x0442, &[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x069d, &[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x06a3, &[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x071f, &[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x0725, &[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x075a, &[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x0760, &[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0808"),
	        (0x02d8, &[0xe9, 0x38, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0813"),
	        (0x0313, &[0xe9, 0x00, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0319, &[0xe9, 0xfa, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x044a, &[0xe9, 0xc9, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0450, &[0xe9, 0xc3, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x06ab, &[0xe9, 0x68, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x06b1, &[0xe9, 0x62, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x072d, &[0xe9, 0xe6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0733, &[0xe9, 0xe0, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0768, &[0xe9, 0xab, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x076e, &[0xe9, 0xa5, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0816"),
	        (0x0889, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
	        (0x0892, &[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0903"),
	        (0x0892, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
	        (0x089b, &[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t090c"),
	        (0x08a0, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
	        (0x08a9, &[0xe9, 0x6e, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t091a"),
	        (0x096a, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09e4"),
	        (0x0973, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09ed"),
	        (0x0981, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t09fb"),
	        (0x0985, &[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
	        (0x09d6, &[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a56"),
	        (0x0858, &[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0864, &[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0876, &[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0939, &[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x095a, &[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x0961, &[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x09c0, &[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x09e1, &[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5a"),
	        (0x098e, &[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
	        (0x09df, &[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a5f"),
	        (0x0861, &[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x086d, &[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x087f, &[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x0942, &[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x0963, &[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x096a, &[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x09c9, &[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x09ea, &[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a63"),
	        (0x099c, &[0xe9, 0xce, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
	        (0x09ed, &[0xe9, 0x7d, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a6d"),
	        (0x086f, &[0xe9, 0xff, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x087b, &[0xe9, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x088d, &[0xe9, 0xe1, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0950, &[0xe9, 0x1e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0971, &[0xe9, 0xfd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0978, &[0xe9, 0xf6, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x09d7, &[0xe9, 0x97, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x09f8, &[0xe9, 0x76, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0a71"),
	        (0x0bfb, &[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b38"),
	        (0x0c04, &[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b41"),
	        (0x0c12, &[0xe9, 0x3a, 0xff, 0x00, 0x00, 0x00], 3, "jmp\t0b4f"),
	        (0x0b3e, &[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0bfe"),
	        (0x0b30, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
	        (0x0b5c, &[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
	        (0x0b77, &[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c00"),
	        (0x0b47, &[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c07"),
	        (0x0b39, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
	        (0x0b65, &[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
	        (0x0b80, &[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c09"),
	        (0x0b55, &[0xe9, 0xbd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c15"),
	        (0x0b47, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
	        (0x0b73, &[0xe9, 0xa1, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
	        (0x0b8e, &[0xe9, 0x86, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0c17"),
	        (0x0c1c, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
	        (0x0c2e, &[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cec"),
	        (0x0c25, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
	        (0x0c37, &[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0cf5"),
	        (0x0c33, &[0xe9, 0xcd, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
	        (0x0c45, &[0xe9, 0xbb, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t0d03"),
	        (0x0f3a, &[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0f52, &[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0f99, &[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0faf, &[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0fba, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1034"),
	        (0x0f43, &[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0f5b, &[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0fa2, &[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0fb8, &[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0fc3, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t103d"),
	        (0x0f51, &[0xe9, 0xf7, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0f69, &[0xe9, 0xdf, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0fb0, &[0xe9, 0x98, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0fc6, &[0xe9, 0x82, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x0fd1, &[0xe9, 0x77, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t104b"),
	        (0x10b5, &[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t10fb"),
	        (0x10be, &[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1104"),
	        (0x10cc, &[0xe9, 0x43, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1112"),
	        (0x01ad, &[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x0263, &[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x033b, &[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x03fe, &[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x05c7, &[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t1124"),
	        (0x01b6, &[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x026c, &[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x0344, &[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x0407, &[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x05d0, &[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t112d"),
	        (0x01c4, &[0xe9, 0x74, 0x0f, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x027a, &[0xe9, 0xbe, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x0352, &[0xe9, 0xe6, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x0415, &[0xe9, 0x23, 0x0d, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x05de, &[0xe9, 0x5a, 0x0b, 0x00, 0x00, 0x00], 3, "jmp\t113b"),
	        (0x113e, &[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t1195"),
	        (0x0111, &[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x029d, &[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x07ff, &[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0838, &[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0a5a, &[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0ac0, &[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0c00, &[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0cec, &[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0d62, &[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0e12, &[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x0e4c, &[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x1034, &[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119b"),
	        (0x005e, &[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
	        (0x0b1d, &[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
	        (0x106b, &[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119c"),
	        (0x0044, &[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x007b, &[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0099, &[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x00bd, &[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0d7e, &[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0d99, &[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0dd4, &[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0e6a, &[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0eb3, &[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0ec9, &[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x0ef6, &[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x1088, &[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x10e2, &[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119d"),
	        (0x1147, &[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t119e"),
	        (0x011a, &[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x02a6, &[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0808, &[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0841, &[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0a63, &[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0ac9, &[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0c09, &[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0cf5, &[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0d6b, &[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0e1b, &[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0e55, &[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x103d, &[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a4"),
	        (0x0067, &[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
	        (0x0b26, &[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
	        (0x1074, &[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a5"),
	        (0x004d, &[0xe9, 0x56, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0084, &[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x00a2, &[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x00c6, &[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0d87, &[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0da2, &[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0ddd, &[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0e73, &[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0ebc, &[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0ed2, &[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x0eff, &[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x1091, &[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x10eb, &[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11a6"),
	        (0x1155, &[0xe9, 0x54, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11ac"),
	        (0x0128, &[0xe9, 0x87, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x02b4, &[0xe9, 0xfb, 0x0e, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0816, &[0xe9, 0x99, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x084f, &[0xe9, 0x60, 0x09, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0a71, &[0xe9, 0x3e, 0x07, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0ad7, &[0xe9, 0xd8, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0c17, &[0xe9, 0x98, 0x05, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0d03, &[0xe9, 0xac, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0d79, &[0xe9, 0x36, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0e29, &[0xe9, 0x86, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x0e63, &[0xe9, 0x4c, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x104b, &[0xe9, 0x64, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b2"),
	        (0x005b, &[0xe9, 0x55, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x0075, &[0xe9, 0x3b, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x0b34, &[0xe9, 0x7c, 0x06, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x1082, &[0xe9, 0x2e, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b3"),
	        (0x0092, &[0xe9, 0x1f, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x00b0, &[0xe9, 0x01, 0x11, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x00d4, &[0xe9, 0xdd, 0x10, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0d95, &[0xe9, 0x1c, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0db0, &[0xe9, 0x01, 0x04, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0deb, &[0xe9, 0xc6, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0e81, &[0xe9, 0x30, 0x03, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0eca, &[0xe9, 0xe7, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0ee0, &[0xe9, 0xd1, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x0f0d, &[0xe9, 0xa4, 0x02, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x109f, &[0xe9, 0x12, 0x01, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x10f9, &[0xe9, 0xb8, 0x00, 0x00, 0x00, 0x00], 3, "jmp\t11b4"),
	        (0x1158, &[0xff, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "jmp\tbx"),
	        (0x0059, &[0xeb, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t003f"),
	        (0x005c, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t004f"),
	        (0x0065, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0058"),
	        (0x0066, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0059"),
	        (0x0056, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t005b"),
	        (0x0080, &[0xeb, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0062"),
	        (0x0073, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0066"),
	        (0x0078, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t006b"),
	        (0x00b6, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00a9"),
	        (0x0108, &[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00ec"),
	        (0x0111, &[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t00f5"),
	        (0x011f, &[0xeb, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0103"),
	        (0x00e8, &[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t010f"),
	        (0x010f, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0114"),
	        (0x00f1, &[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0118"),
	        (0x00ff, &[0xeb, 0x25, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x011a, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x011f, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x0124, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x0121, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0126"),
	        (0x013b, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0135"),
	        (0x012c, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
	        (0x0131, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
	        (0x0136, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0138"),
	        (0x014d, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0147"),
	        (0x015f, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0164"),
	        (0x016a, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
	        (0x016f, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
	        (0x0174, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0176"),
	        (0x018b, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0185"),
	        (0x013c, &[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x014d, &[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x0166, &[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x0179, &[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x018f, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x01a0, &[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b0"),
	        (0x0145, &[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0156, &[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x016f, &[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0182, &[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0198, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x01a9, &[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01b9"),
	        (0x0153, &[0xeb, 0x72, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x0164, &[0xeb, 0x61, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x017d, &[0xeb, 0x48, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x0190, &[0xeb, 0x35, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x01a6, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x01b7, &[0xeb, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01c7"),
	        (0x01ca, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
	        (0x01d6, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01e2"),
	        (0x01d3, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
	        (0x01df, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01eb"),
	        (0x01e1, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
	        (0x01ed, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t01f9"),
	        (0x0236, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t023b"),
	        (0x023f, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0244"),
	        (0x024d, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0252"),
	        (0x023e, &[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t025c"),
	        (0x0247, &[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0265"),
	        (0x0245, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x024c, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x0253, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x025a, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0266"),
	        (0x024e, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x0255, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x025c, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x0263, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t026f"),
	        (0x0255, &[0xeb, 0x1c, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0273"),
	        (0x025c, &[0xeb, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x0263, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x026a, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x0271, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t027d"),
	        (0x0299, &[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0281"),
	        (0x02a2, &[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t028a"),
	        (0x02b0, &[0xeb, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0298"),
	        (0x0308, &[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02b1"),
	        (0x0311, &[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02ba"),
	        (0x031f, &[0xeb, 0xa7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02c8"),
	        (0x02df, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02eb"),
	        (0x02e8, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t02f4"),
	        (0x02f6, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0302"),
	        (0x030c, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0332"),
	        (0x0315, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033b"),
	        (0x0312, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x0318, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x031e, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x0324, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x032a, &[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t033e"),
	        (0x0330, &[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0341"),
	        (0x031b, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0321, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0327, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x032d, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0333, &[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0347"),
	        (0x0323, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0349"),
	        (0x0339, &[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t034a"),
	        (0x0329, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x032f, &[0xeb, 0x24, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x0335, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x033b, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x0341, &[0xeb, 0x12, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0355"),
	        (0x0347, &[0xeb, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0358"),
	        (0x03d5, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03f5"),
	        (0x03de, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t03fe"),
	        (0x03ec, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t040c"),
	        (0x0416, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0422"),
	        (0x041f, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t042b"),
	        (0x042d, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0439"),
	        (0x04cc, &[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ac"),
	        (0x04d5, &[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04b5"),
	        (0x04e3, &[0xeb, 0xde, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04c3"),
	        (0x04d9, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04e5"),
	        (0x04e2, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04ee"),
	        (0x04f0, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t04fc"),
	        (0x0513, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0519"),
	        (0x051c, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0522"),
	        (0x052a, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0530"),
	        (0x0596, &[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05ca"),
	        (0x059f, &[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05d3"),
	        (0x05ad, &[0xeb, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t05e1"),
	        (0x066d, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0680"),
	        (0x0676, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0689"),
	        (0x0684, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0697"),
	        (0x06bf, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06d2"),
	        (0x06c8, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06db"),
	        (0x06d6, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t06e9"),
	        (0x06f2, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0705"),
	        (0x06fb, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t070e"),
	        (0x0709, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t071c"),
	        (0x0734, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0740"),
	        (0x073d, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0749"),
	        (0x074b, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0757"),
	        (0x0784, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0797"),
	        (0x078d, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07a0"),
	        (0x079b, &[0xeb, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ae"),
	        (0x07d8, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07e4"),
	        (0x07e1, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ed"),
	        (0x07ef, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07fb"),
	        (0x07a8, &[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07ad, &[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07f5, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07fa, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t07ff"),
	        (0x07b1, &[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x07b6, &[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x07fe, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x0803, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0808"),
	        (0x082f, &[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t080a"),
	        (0x0838, &[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0813"),
	        (0x07bf, &[0xeb, 0x55, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x07c4, &[0xeb, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x080c, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x0811, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0816"),
	        (0x0846, &[0xeb, 0xd9, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0821"),
	        (0x08bb, &[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08cb, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08e1, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08f7, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t08fd"),
	        (0x08c4, &[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x08d4, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x08ea, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x0900, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0906"),
	        (0x08d2, &[0xeb, 0x40, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x08e2, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x08f8, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x090e, &[0xeb, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0914"),
	        (0x0a29, &[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
	        (0x0a4d, &[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a5a"),
	        (0x0a32, &[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
	        (0x0a56, &[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a63"),
	        (0x0a40, &[0xeb, 0x2f, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
	        (0x0a64, &[0xeb, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0a71"),
	        (0x0ab6, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0abb"),
	        (0x0abf, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ac4"),
	        (0x0acd, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ad2"),
	        (0x0af3, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
	        (0x0b00, &[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b1d"),
	        (0x0afc, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
	        (0x0b09, &[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b26"),
	        (0x0b0a, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
	        (0x0b17, &[0xeb, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b34"),
	        (0x0beb, &[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0b9c"),
	        (0x0bf4, &[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ba5"),
	        (0x0c02, &[0xeb, 0xaf, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bb3"),
	        (0x0bda, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0be2"),
	        (0x0be3, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0beb"),
	        (0x0bf1, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0bf9"),
	        (0x0be4, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c00"),
	        (0x0bed, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c09"),
	        (0x0bfb, &[0xeb, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c17"),
	        (0x0c93, &[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c57"),
	        (0x0c9c, &[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c60"),
	        (0x0caa, &[0xeb, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c6e"),
	        (0x0c7b, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c83"),
	        (0x0c84, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c8c"),
	        (0x0c8c, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c95"),
	        (0x0c92, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9a"),
	        (0x0c95, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0c9e"),
	        (0x0ca3, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cac"),
	        (0x0cc3, &[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
	        (0x0cd4, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cec"),
	        (0x0ccc, &[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
	        (0x0cdd, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0cf5"),
	        (0x0cda, &[0xeb, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
	        (0x0ceb, &[0xeb, 0x16, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d03"),
	        (0x0d14, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d07"),
	        (0x0d1d, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d10"),
	        (0x0d2b, &[0xeb, 0xf1, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d1e"),
	        (0x0d24, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d2d"),
	        (0x0d2d, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d36"),
	        (0x0d3b, &[0xeb, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d44"),
	        (0x0d79, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d7e"),
	        (0x0d82, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d87"),
	        (0x0d90, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0d95"),
	        (0x0dc9, &[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0dd4"),
	        (0x0dd2, &[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ddd"),
	        (0x0de0, &[0xeb, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0deb"),
	        (0x0e00, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
	        (0x0e0d, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e12"),
	        (0x0e09, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
	        (0x0e16, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e1b"),
	        (0x0e17, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
	        (0x0e24, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e29"),
	        (0x0e47, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e4c"),
	        (0x0e50, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e55"),
	        (0x0e5e, &[0xeb, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0e63"),
	        (0x0ea9, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eb1"),
	        (0x0eb2, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0eba"),
	        (0x0ec0, &[0xeb, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0ec8"),
	        (0x0f35, &[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f0f"),
	        (0x0f3e, &[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f18"),
	        (0x0f4c, &[0xeb, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t0f26"),
	        (0x0fdf, &[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
	        (0x1008, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
	        (0x102a, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1034"),
	        (0x0fe8, &[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1011, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1033, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1069, &[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t103d"),
	        (0x1072, &[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1046"),
	        (0x0ff6, &[0xeb, 0x53, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
	        (0x101f, &[0xeb, 0x2a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
	        (0x1041, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t104b"),
	        (0x1080, &[0xeb, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1054"),
	        (0x108e, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
	        (0x1093, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
	        (0x1098, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t109a"),
	        (0x1097, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
	        (0x109c, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
	        (0x10a1, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10a3"),
	        (0x10a5, &[0xeb, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
	        (0x10aa, &[0xeb, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
	        (0x10af, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t10b1"),
	        (0x1122, &[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1111"),
	        (0x112b, &[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t111a"),
	        (0x1139, &[0xeb, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1128"),
	        (0x1145, &[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1136"),
	        (0x114e, &[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t113f"),
	        (0x115c, &[0xeb, 0xef, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t114d"),
	        (0x1189, &[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
	        (0x1193, &[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1162"),
	        (0x1192, &[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
	        (0x119c, &[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t116b"),
	        (0x11a0, &[0xeb, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
	        (0x11aa, &[0xeb, 0xcd, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1179"),
	        (0x11a3, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t119d"),
	        (0x11ac, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11a6"),
	        (0x11ba, &[0xeb, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11b4"),
	        (0x11eb, &[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
	        (0x11f5, &[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11c2"),
	        (0x11f4, &[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
	        (0x11fe, &[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11cb"),
	        (0x1202, &[0xeb, 0xd5, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
	        (0x120c, &[0xeb, 0xcb, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t11d9"),
	        (0x1200, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1208, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1210, &[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1218, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1220, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1228, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1230, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1286, &[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1232"),
	        (0x1209, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1211, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1219, &[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1221, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1229, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1231, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1239, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x128f, &[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t123b"),
	        (0x1217, &[0xeb, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x121f, &[0xeb, 0x28, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1227, &[0xeb, 0x20, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x122f, &[0xeb, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1237, &[0xeb, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x123f, &[0xeb, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1247, &[0xeb, 0x00, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x129d, &[0xeb, 0xaa, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1249"),
	        (0x1266, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t1286"),
	        (0x126f, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t128f"),
	        (0x127d, &[0xeb, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jmp short\t129d"),
	        (0x0017, &[0x73, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0028"),
	        (0x0b52, &[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b5f"),
	        (0x0b5b, &[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b68"),
	        (0x0b69, &[0x73, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0b76"),
	        (0x0d71, &[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d7b"),
	        (0x0d7a, &[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d84"),
	        (0x0d88, &[0x73, 0x08, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t0d92"),
	        (0x1255, &[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1268"),
	        (0x125e, &[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t1271"),
	        (0x126c, &[0x73, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jnb\t127f"),
	        (0x0ad2, &[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0aeb"),
	        (0x0adb, &[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0af4"),
	        (0x0ae9, &[0x77, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0b02"),
	        (0x0ca5, &[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cc5"),
	        (0x0cae, &[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cce"),
	        (0x0cbc, &[0x77, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t0cdc"),
	        (0x117e, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1187"),
	        (0x1187, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1190"),
	        (0x1195, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t119e"),
	        (0x11e0, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11e9"),
	        (0x11e9, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t11f2"),
	        (0x11f7, &[0x77, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnbe\t1200"),
	        (0x001c, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
	        (0x0022, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0028"),
	        (0x00cd, &[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00ea"),
	        (0x00d6, &[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t00f3"),
	        (0x00e4, &[0x75, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0101"),
	        (0x01f8, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t01fe"),
	        (0x0201, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0207"),
	        (0x0204, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0211"),
	        (0x020f, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0215"),
	        (0x020d, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t021a"),
	        (0x021b, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0228"),
	        (0x0231, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0238"),
	        (0x023a, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0241"),
	        (0x0248, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t024f"),
	        (0x020a, &[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
	        (0x0227, &[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t025c"),
	        (0x0213, &[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
	        (0x0230, &[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0265"),
	        (0x0221, &[0x75, 0x50, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
	        (0x023e, &[0x75, 0x33, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0273"),
	        (0x027f, &[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t029b"),
	        (0x0288, &[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02a4"),
	        (0x0296, &[0x75, 0x1a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02b2"),
	        (0x02bf, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02c4"),
	        (0x02c8, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02cd"),
	        (0x02d6, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t02db"),
	        (0x02ef, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0305"),
	        (0x02f8, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t030e"),
	        (0x0306, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t031c"),
	        (0x0370, &[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0399"),
	        (0x0379, &[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03a2"),
	        (0x0387, &[0x75, 0x27, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b0"),
	        (0x03b0, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03b7"),
	        (0x03b9, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03c0"),
	        (0x03c7, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t03ce"),
	        (0x0426, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t043c"),
	        (0x042f, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0445"),
	        (0x043d, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0453"),
	        (0x049f, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04a6"),
	        (0x04a8, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04af"),
	        (0x04b0, &[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bb"),
	        (0x04b6, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04bd"),
	        (0x04b9, &[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c4"),
	        (0x04c1, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04c6"),
	        (0x04ca, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04cf"),
	        (0x04c7, &[0x75, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04d2"),
	        (0x04d2, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04db"),
	        (0x04d8, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04dd"),
	        (0x04db, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04e4"),
	        (0x04e9, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t04f2"),
	        (0x050c, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0515"),
	        (0x0515, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t051e"),
	        (0x0523, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t052c"),
	        (0x055b, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0562"),
	        (0x0564, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056b"),
	        (0x0566, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t056d"),
	        (0x056f, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0576"),
	        (0x0572, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0579"),
	        (0x057d, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0584"),
	        (0x05f8, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0600"),
	        (0x0601, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0609"),
	        (0x060f, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0617"),
	        (0x05fe, &[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t061e"),
	        (0x061c, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0621"),
	        (0x0607, &[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0627"),
	        (0x0625, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t062a"),
	        (0x0615, &[0x75, 0x1e, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0635"),
	        (0x0633, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0638"),
	        (0x0642, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0647"),
	        (0x064b, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0650"),
	        (0x0659, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t065e"),
	        (0x0709, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
	        (0x075d, &[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t071f"),
	        (0x0712, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
	        (0x0766, &[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0728"),
	        (0x0720, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
	        (0x0774, &[0x75, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0736"),
	        (0x0744, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t075a"),
	        (0x074d, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0763"),
	        (0x079b, &[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0765"),
	        (0x07a4, &[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t076e"),
	        (0x075b, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0771"),
	        (0x07b2, &[0x75, 0xc8, 0x00, 0x00, 0x00, 0x00], 2, "jne\t077c"),
	        (0x07e8, &[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07bb"),
	        (0x07f1, &[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07c4"),
	        (0x07ff, &[0x75, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "jne\t07d2"),
	        (0x085f, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0867"),
	        (0x0868, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0870"),
	        (0x0871, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0879"),
	        (0x0876, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t087e"),
	        (0x087a, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0882"),
	        (0x0888, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0890"),
	        (0x08b4, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08bd"),
	        (0x08bd, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08c6"),
	        (0x0899, &[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08cd"),
	        (0x08cb, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d4"),
	        (0x08a2, &[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08d6"),
	        (0x08da, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e3"),
	        (0x08b0, &[0x75, 0x32, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08e4"),
	        (0x08e3, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08ec"),
	        (0x08f1, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08f9"),
	        (0x08f1, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t08fa"),
	        (0x08fa, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0902"),
	        (0x0908, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0910"),
	        (0x092f, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t093c"),
	        (0x0938, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0945"),
	        (0x0946, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0953"),
	        (0x0968, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t096d"),
	        (0x0971, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0976"),
	        (0x097f, &[0x75, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0984"),
	        (0x09b6, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09c3"),
	        (0x09bf, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09cc"),
	        (0x09cd, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t09da"),
	        (0x0a1f, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a2b"),
	        (0x0a28, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a34"),
	        (0x0a36, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a42"),
	        (0x0a3c, &[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a4f"),
	        (0x0a45, &[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a58"),
	        (0x0a53, &[0x75, 0x11, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a66"),
	        (0x0a8d, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a95"),
	        (0x0a96, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0a9e"),
	        (0x0aa4, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0aac"),
	        (0x0b2c, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b33"),
	        (0x0b35, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b3c"),
	        (0x0b43, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b4a"),
	        (0x0b73, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b7a"),
	        (0x0b7c, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b83"),
	        (0x0b8a, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b91"),
	        (0x0b64, &[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b93"),
	        (0x0b6d, &[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0b9c"),
	        (0x0b7b, &[0x75, 0x2d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0baa"),
	        (0x0c13, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c1f"),
	        (0x0c1c, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c28"),
	        (0x0c23, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c31"),
	        (0x0c2a, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c36"),
	        (0x0c2c, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c3a"),
	        (0x0c3a, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c48"),
	        (0x0c63, &[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c8e"),
	        (0x0c6c, &[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0c97"),
	        (0x0c7a, &[0x75, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ca5"),
	        (0x0cd0, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cd6"),
	        (0x0cd9, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0cdf"),
	        (0x0ce7, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0ced"),
	        (0x0d37, &[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d46"),
	        (0x0d40, &[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d4f"),
	        (0x0d4e, &[0x75, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d5d"),
	        (0x0d50, &[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d62"),
	        (0x0d59, &[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d6b"),
	        (0x0d67, &[0x75, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0d79"),
	        (0x0e09, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e0f"),
	        (0x0e12, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e18"),
	        (0x0e20, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e26"),
	        (0x0e65, &[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e68"),
	        (0x0e6e, &[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e71"),
	        (0x0e7c, &[0x75, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0e7f"),
	        (0x0f0b, &[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f3d"),
	        (0x0f14, &[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f46"),
	        (0x0f22, &[0x75, 0x30, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f54"),
	        (0x0f47, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
	        (0x0f4e, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f55"),
	        (0x0f50, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
	        (0x0f57, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f5e"),
	        (0x0f5e, &[0x75, 0x0c, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
	        (0x0f65, &[0x75, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f6c"),
	        (0x0f6a, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f73"),
	        (0x0f73, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f7c"),
	        (0x0f81, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f8a"),
	        (0x0f8f, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0f9c"),
	        (0x0f98, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fa5"),
	        (0x0fa6, &[0x75, 0x0b, 0x00, 0x00, 0x00, 0x00], 2, "jne\t0fb3"),
	        (0x0ffe, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t100a"),
	        (0x1007, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1013"),
	        (0x1015, &[0x75, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1021"),
	        (0x1026, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t102c"),
	        (0x102f, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1035"),
	        (0x103d, &[0x75, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1043"),
	        (0x1107, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t110f"),
	        (0x1110, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1118"),
	        (0x111e, &[0x75, 0x06, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1126"),
	        (0x1131, &[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1129"),
	        (0x113a, &[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1132"),
	        (0x1148, &[0x75, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1140"),
	        (0x1138, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1141"),
	        (0x1141, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t114a"),
	        (0x114f, &[0x75, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1158"),
	        (0x1153, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1169"),
	        (0x115c, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1172"),
	        (0x116a, &[0x75, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "jne\t1180"),
	        (0x11b1, &[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11cb"),
	        (0x11ba, &[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11d4"),
	        (0x11c8, &[0x75, 0x18, 0x00, 0x00, 0x00, 0x00], 2, "jne\t11e2"),
	        (0x0051, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0058"),
	        (0x0065, &[0x7d, 0x1b, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0082"),
	        (0x0101, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0111"),
	        (0x0113, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0123"),
	        (0x0151, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0161"),
	        (0x01ba, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01cc"),
	        (0x01c3, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01d5"),
	        (0x01d1, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t01e3"),
	        (0x03a3, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03ac"),
	        (0x03ac, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03b5"),
	        (0x03ba, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t03c3"),
	        (0x07be, &[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07c3"),
	        (0x07c7, &[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07cc"),
	        (0x07d5, &[0x7d, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t07da"),
	        (0x081f, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0831"),
	        (0x0828, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t083a"),
	        (0x0836, &[0x7d, 0x10, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0848"),
	        (0x0852, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t085b"),
	        (0x085b, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0864"),
	        (0x0869, &[0x7d, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0872"),
	        (0x0dc4, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dcb"),
	        (0x0dcd, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0dd4"),
	        (0x0ddb, &[0x7d, 0x05, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0de2"),
	        (0x0df7, &[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e02"),
	        (0x0e00, &[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e0b"),
	        (0x0e0e, &[0x7d, 0x09, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e19"),
	        (0x0e39, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e49"),
	        (0x0e42, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e52"),
	        (0x0e50, &[0x7d, 0x0e, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0e60"),
	        (0x0e9f, &[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eab"),
	        (0x0ea8, &[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0eb4"),
	        (0x0eb6, &[0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0ec2"),
	        (0x0f12, &[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f37"),
	        (0x0f1b, &[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f40"),
	        (0x0f29, &[0x7d, 0x23, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t0f4e"),
	        (0x1040, &[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t106b"),
	        (0x1049, &[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1074"),
	        (0x1057, &[0x7d, 0x29, 0x00, 0x00, 0x00, 0x00], 2, "jnl\t1082"),
	        (0x00fb, &[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t010a"),
	        (0x0104, &[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0113"),
	        (0x0112, &[0x7f, 0x0d, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0121"),
	        (0x062a, &[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t062f"),
	        (0x0633, &[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0638"),
	        (0x0641, &[0x7f, 0x03, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0646"),
	        (0x0fdb, &[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fe1"),
	        (0x0fe4, &[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0fea"),
	        (0x0ff2, &[0x7f, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "jnle\t0ff8"),
	        (0x008c, &[0x8d, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+4]"),
	        (0x0364, &[0x8d, 0x46, 0x06, 0x00, 0x00, 0x00], 3, "lea\tax, [bp+6]"),
	        (0x00ec, &[0x8d, 0x46, 0xe8, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-18]"),
	        (0x0957, &[0x8d, 0x46, 0xff, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-1]"),
	        (0x0e6c, &[0x8d, 0x46, 0xe0, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-20]"),
	        (0x0368, &[0x8d, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-a]"),
	        (0x0396, &[0x8d, 0x46, 0xf4, 0x00, 0x00, 0x00], 3, "lea\tax, [bp-c]"),
	        (0x0acf, &[0x8d, 0x45, 0x30, 0x00, 0x00, 0x00], 3, "lea\tax, [di+30]"),
	        (0x0ad4, &[0x8d, 0x44, 0x01, 0x00, 0x00, 0x00], 3, "lea\tax, [si+1]"),
	        (0x009a, &[0x8d, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+6]"),
	        (0x108a, &[0x8d, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "lea\tbx, [bp+8]"),
	        (0x03e2, &[0x8d, 0x9e, 0xe7, 0xfb, 0x00, 0x00], 4, "lea\tbx, [bp-419]"),
	        (0x0bcd, &[0x8d, 0x5d, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [di+2]"),
	        (0x0cbe, &[0x8d, 0x5c, 0x02, 0x00, 0x00, 0x00], 3, "lea\tbx, [si+2]"),
	        (0x0009, &[0x8d, 0x4f, 0x04, 0x00, 0x00, 0x00], 3, "lea\tcx, [bx+4]"),
	        (0x0006, &[0x8d, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "lea\tdx, [bx+2]"),
	        (0x1187, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
	        (0x1191, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1176"),
	        (0x1190, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
	        (0x119a, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t117f"),
	        (0x119e, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
	        (0x11a8, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t118d"),
	        (0x11e9, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
	        (0x11f3, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11d8"),
	        (0x11f2, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
	        (0x11fc, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11e1"),
	        (0x1200, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
	        (0x120a, &[0xe2, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "loop\t11ef"),
	        (0x1281, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1270"),
	        (0x128a, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1279"),
	        (0x1298, &[0xe2, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "loop\t1287"),
	        (0x0024, &[0x89, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\t[0002], bx"),
	        (0x0158, &[0x89, 0x16, 0x0a, 0x00, 0x00, 0x00], 4, "mov\t[000a], dx"),
	        (0x0851, &[0xc7, 0x06, 0x0c, 0x00, 0x40, 0x10], 6, "mov\t[000c], 1040"),
	        (0x0848, &[0xc7, 0x06, 0x0e, 0x00, 0x37, 0x10], 6, "mov\t[000e], 1037"),
	        (0x0108, &[0x89, 0x16, 0x12, 0x00, 0x00, 0x00], 4, "mov\t[0012], dx"),
	        (0x085f, &[0xc7, 0x06, 0x14, 0x00, 0x4e, 0x10], 6, "mov\t[0014], 104e"),
	        (0x0af4, &[0xc7, 0x06, 0x24, 0x01, 0x0c, 0x00], 6, "mov\t[0124], 000c"),
	        (0x0e49, &[0x89, 0x16, 0x24, 0x01, 0x00, 0x00], 4, "mov\t[0124], dx"),
	        (0x0aeb, &[0xc7, 0x06, 0x26, 0x01, 0x0c, 0x00], 6, "mov\t[0126], 000c"),
	        (0x0dd7, &[0x89, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\t[0126], dx"),
	        (0x0dce, &[0x89, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\t[0128], dx"),
	        (0x0b02, &[0xc7, 0x06, 0x2c, 0x01, 0x0c, 0x00], 6, "mov\t[012c], 000c"),
	        (0x0e57, &[0x89, 0x16, 0x2c, 0x01, 0x00, 0x00], 4, "mov\t[012c], dx"),
	        (0x0de5, &[0x89, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\t[012e], dx"),
	        (0x0b8f, &[0x89, 0x36, 0x12, 0x02, 0x00, 0x00], 4, "mov\t[0212], si"),
	        (0x0b1f, &[0x89, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "mov\t[0214], si"),
	        (0x0be7, &[0x89, 0x16, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], dx"),
	        (0x0b16, &[0x89, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\t[0216], si"),
	        (0x0bde, &[0x89, 0x16, 0x18, 0x02, 0x00, 0x00], 4, "mov\t[0218], dx"),
	        (0x1294, &[0xc7, 0x06, 0x1a, 0x02, 0x04, 0x00], 6, "mov\t[021a], 0004"),
	        (0x0b9d, &[0x89, 0x36, 0x1a, 0x02, 0x00, 0x00], 4, "mov\t[021a], si"),
	        (0x128b, &[0xc7, 0x06, 0x1c, 0x02, 0x04, 0x00], 6, "mov\t[021c], 0004"),
	        (0x129d, &[0x89, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], bx"),
	        (0x0b2d, &[0x89, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "mov\t[021c], si"),
	        (0x12a4, &[0x89, 0x1e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], bx"),
	        (0x0bf5, &[0x89, 0x16, 0x1e, 0x02, 0x00, 0x00], 4, "mov\t[021e], dx"),
	        (0x129b, &[0x89, 0x1e, 0x20, 0x02, 0x00, 0x00], 4, "mov\t[0220], bx"),
	        (0x12a2, &[0xc7, 0x06, 0x22, 0x02, 0x04, 0x00], 6, "mov\t[0222], 0004"),
	        (0x12ab, &[0x89, 0x1e, 0x22, 0x02, 0x00, 0x00], 4, "mov\t[0222], bx"),
	        (0x12ab, &[0x89, 0x1e, 0x24, 0x02, 0x00, 0x00], 4, "mov\t[0224], bx"),
	        (0x12b2, &[0x89, 0x1e, 0x26, 0x02, 0x00, 0x00], 4, "mov\t[0226], bx"),
	        (0x12b9, &[0x89, 0x1e, 0x2a, 0x02, 0x00, 0x00], 4, "mov\t[022a], bx"),
	        (0x0375, &[0x89, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], ax"),
	        (0x05c9, &[0x89, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\t[bp+4], dx"),
	        (0x0465, &[0x89, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], bx"),
	        (0x05bb, &[0x89, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\t[bp+6], dx"),
	        (0x10de, &[0x89, 0x56, 0xf0, 0x00, 0x00, 0x00], 3, "mov\t[bp-10], dx"),
	        (0x05fa, &[0xc7, 0x46, 0xee, 0x00, 0x00, 0x00], 5, "mov\t[bp-12], 0000"),
	        (0x010f, &[0x89, 0x56, 0xee, 0x00, 0x00, 0x00], 3, "mov\t[bp-12], dx"),
	        (0x02c3, &[0xc7, 0x46, 0xec, 0x00, 0x00, 0x00], 5, "mov\t[bp-14], 0000"),
	        (0x00e9, &[0x89, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\t[bp-14], dx"),
	        (0x0361, &[0x89, 0x56, 0xea, 0x00, 0x00, 0x00], 3, "mov\t[bp-16], dx"),
	        (0x04aa, &[0xc7, 0x46, 0xe8, 0xfc, 0x00, 0x00], 5, "mov\t[bp-18], 00fc"),
	        (0x04a1, &[0xc7, 0x46, 0xe8, 0xfe, 0x00, 0x00], 5, "mov\t[bp-18], 00fe"),
	        (0x04b8, &[0xc7, 0x46, 0xe8, 0x04, 0x01, 0x00], 5, "mov\t[bp-18], 0104"),
	        (0x03e6, &[0x89, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], bx"),
	        (0x04b1, &[0x89, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\t[bp-18], dx"),
	        (0x0922, &[0x88, 0x56, 0xff, 0x00, 0x00, 0x00], 3, "mov\t[bp-1], dl"),
	        (0x0baa, &[0xc7, 0x46, 0xfe, 0x00, 0x00, 0x00], 5, "mov\t[bp-2], 0000"),
	        (0x0515, &[0x89, 0x46, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], ax"),
	        (0x009d, &[0x89, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], bx"),
	        (0x017a, &[0x89, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], cx"),
	        (0x0ca5, &[0x89, 0x7e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], di"),
	        (0x0150, &[0x89, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], dx"),
	        (0x0bfd, &[0x89, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bp-2], si"),
	        (0x0109, &[0x89, 0x46, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], ax"),
	        (0x0177, &[0x89, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\t[bp-4], dx"),
	        (0x015f, &[0xc7, 0x46, 0xfa, 0x00, 0x00, 0x00], 5, "mov\t[bp-6], 0000"),
	        (0x018d, &[0x89, 0x4e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], cx"),
	        (0x063e, &[0x89, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\t[bp-6], dx"),
	        (0x0f1b, &[0xc7, 0x46, 0xf8, 0x00, 0x00, 0x00], 5, "mov\t[bp-8], 0000"),
	        (0x02d1, &[0x89, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], ax"),
	        (0x015c, &[0x89, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\t[bp-8], dx"),
	        (0x0f46, &[0xc7, 0x46, 0xf8, 0xff, 0xff, 0x00], 5, "mov\t[bp-8], ffff"),
	        (0x03c9, &[0xc7, 0x46, 0xf6, 0x00, 0x00, 0x00], 5, "mov\t[bp-a], 0000"),
	        (0x0b63, &[0x89, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], dx"),
	        (0x0139, &[0x89, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "mov\t[bp-a], si"),
	        (0x0b4a, &[0xc7, 0x46, 0xf4, 0x00, 0x00, 0x00], 5, "mov\t[bp-c], 0000"),
	        (0x04eb, &[0xc7, 0x46, 0xf4, 0x01, 0x00, 0x00], 5, "mov\t[bp-c], 0001"),
	        (0x0257, &[0xc7, 0x46, 0xf4, 0x02, 0x00, 0x00], 5, "mov\t[bp-c], 0002"),
	        (0x057f, &[0xc7, 0x46, 0xf4, 0x06, 0x00, 0x00], 5, "mov\t[bp-c], 0006"),
	        (0x025e, &[0xc7, 0x46, 0xf4, 0x08, 0x00, 0x00], 5, "mov\t[bp-c], 0008"),
	        (0x0265, &[0xc7, 0x46, 0xf4, 0x0a, 0x00, 0x00], 5, "mov\t[bp-c], 000a"),
	        (0x026c, &[0xc7, 0x46, 0xf4, 0x10, 0x00, 0x00], 5, "mov\t[bp-c], 0010"),
	        (0x058b, &[0xc7, 0x46, 0xf4, 0x00, 0x04, 0x00], 5, "mov\t[bp-c], 0400"),
	        (0x0e99, &[0x89, 0x4e, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], cx"),
	        (0x0c53, &[0x89, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\t[bp-c], dx"),
	        (0x05e1, &[0xc7, 0x46, 0xf2, 0x20, 0x00, 0x00], 5, "mov\t[bp-e], 0020"),
	        (0x05ec, &[0xc7, 0x46, 0xf2, 0x30, 0x00, 0x00], 5, "mov\t[bp-e], 0030"),
	        (0x0115, &[0x89, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\t[bp-e], dx"),
	        (0x048b, &[0x89, 0x57, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[bx+2], dx"),
	        (0x0c82, &[0x89, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], dx"),
	        (0x0b1d, &[0x89, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[bx-2], si"),
	        (0x02ab, &[0x88, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], al"),
	        (0x0489, &[0x89, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], ax"),
	        (0x002c, &[0x89, 0x0f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], cx"),
	        (0x0124, &[0x89, 0x3f, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], di"),
	        (0x02f3, &[0x88, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dl"),
	        (0x00fc, &[0x89, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], dx"),
	        (0x0d30, &[0x89, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[bx], si"),
	        (0x0bd8, &[0x89, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[di-2], dx"),
	        (0x0be0, &[0x89, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[di], dx"),
	        (0x014a, &[0x89, 0x7c, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], di"),
	        (0x0138, &[0x89, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\t[si+2], dx"),
	        (0x08d9, &[0xc7, 0x44, 0x06, 0x00, 0x04, 0x00], 5, "mov\t[si+6], 0400"),
	        (0x08c6, &[0x89, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\t[si+8], ax"),
	        (0x0a10, &[0x89, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], bx"),
	        (0x0917, &[0x89, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\t[si+a], dx"),
	        (0x0b20, &[0xc7, 0x44, 0xfe, 0x00, 0x00, 0x00], 5, "mov\t[si-2], 0000"),
	        (0x0bdb, &[0x89, 0x7c, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], di"),
	        (0x0cc9, &[0x89, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\t[si-2], dx"),
	        (0x0925, &[0xc7, 0x04, 0x00, 0x00, 0x00, 0x00], 4, "mov\t[si], 0000"),
	        (0x090a, &[0xc7, 0x04, 0xff, 0x03, 0x00, 0x00], 4, "mov\t[si], 03ff"),
	        (0x0252, &[0x88, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], al"),
	        (0x0be2, &[0x89, 0x3c, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], di"),
	        (0x02e4, &[0x89, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\t[si], dx"),
	        (0x08de, &[0xc7, 0x04, 0xff, 0xff, 0x00, 0x00], 4, "mov\t[si], ffff"),
	        (0x009a, &[0x8a, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+4]"),
	        (0x0273, &[0x8a, 0x46, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tal, [bp+a]"),
	        (0x02a0, &[0x8a, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [bx]"),
	        (0x0103, &[0x8a, 0x04, 0x00, 0x00, 0x00, 0x00], 2, "mov\tal, [si]"),
	        (0x0088, &[0xb8, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0001"),
	        (0x1231, &[0xb8, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0002"),
	        (0x011c, &[0xb8, 0x04, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0004"),
	        (0x1211, &[0xb8, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0006"),
	        (0x0114, &[0xb8, 0x0a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 000a"),
	        (0x0dcc, &[0xb8, 0x11, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0011"),
	        (0x1219, &[0xb8, 0x12, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0012"),
	        (0x0ea6, &[0xb8, 0x13, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0013"),
	        (0x1151, &[0xb8, 0x14, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0014"),
	        (0x0092, &[0xb8, 0x1c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001c"),
	        (0x0089, &[0xb8, 0x1e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 001e"),
	        (0x00a0, &[0xb8, 0x24, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0024"),
	        (0x0d91, &[0xb8, 0x28, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0028"),
	        (0x0d88, &[0xb8, 0x2a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 002a"),
	        (0x0058, &[0xb8, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0030"),
	        (0x0053, &[0xb8, 0x31, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0031"),
	        (0x10eb, &[0xb8, 0x36, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0036"),
	        (0x024a, &[0xb8, 0x58, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0058"),
	        (0x003c, &[0xb8, 0x61, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0061"),
	        (0x024f, &[0xb8, 0x78, 0x00, 0x00, 0x00, 0x00], 3, "mov\tax, 0078"),
	        (0x0d8d, &[0xb8, 0x06, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0106"),
	        (0x0d84, &[0xb8, 0x08, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 0108"),
	        (0x0d9b, &[0xb8, 0x0e, 0x01, 0x00, 0x00, 0x00], 3, "mov\tax, 010e"),
	        (0x12af, &[0xb8, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0218"),
	        (0x12a6, &[0xb8, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 021a"),
	        (0x12bd, &[0xb8, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, 0220"),
	        (0x08be, &[0xb8, 0x00, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, 0400"),
	        (0x003c, &[0xb8, 0xe5, 0x14, 0x00, 0x00, 0x00], 3, "mov\tax, 14e5"),
	        (0x0ed3, &[0xb8, 0x08, 0x54, 0x00, 0x00, 0x00], 3, "mov\tax, 5408"),
	        (0x0179, &[0x8b, 0x46, 0x04, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+4]"),
	        (0x0a7c, &[0x8b, 0x46, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [bp+8]"),
	        (0x030e, &[0x8b, 0x46, 0xec, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-14]"),
	        (0x04fc, &[0x8b, 0x46, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-8]"),
	        (0x0cd7, &[0x8b, 0x46, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tax, [bp-a]"),
	        (0x0004, &[0x8b, 0x07, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, [bx]"),
	        (0x0161, &[0x8b, 0x44, 0x02, 0x00, 0x00, 0x00], 3, "mov\tax, [si+2]"),
	        (0x1165, &[0x8b, 0x44, 0x08, 0x00, 0x00, 0x00], 3, "mov\tax, [si+8]"),
	        (0x1184, &[0x8b, 0x44, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tax, [si+a]"),
	        (0x1171, &[0x8b, 0x44, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tax, [si+c]"),
	        (0x0e7f, &[0x89, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, bx"),
	        (0x086b, &[0x89, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, di"),
	        (0x01c2, &[0x89, 0xd0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, dx"),
	        (0x015c, &[0xb8, 0xff, 0xff, 0x00, 0x00, 0x00], 3, "mov\tax, ffff"),
	        (0x0126, &[0x89, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "mov\tax, si"),
	        (0x003a, &[0x89, 0xe5, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbp, sp"),
	        (0x0534, &[0xbb, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0001"),
	        (0x0932, &[0xbb, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0002"),
	        (0x0010, &[0xbb, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0008"),
	        (0x0010, &[0xbb, 0x0e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 000e"),
	        (0x0010, &[0xbb, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0010"),
	        (0x0010, &[0xbb, 0x16, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0016"),
	        (0x01b1, &[0xbb, 0x5c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005c"),
	        (0x01a8, &[0xbb, 0x5e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 005e"),
	        (0x01bf, &[0xbb, 0x64, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0064"),
	        (0x0269, &[0xbb, 0x68, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0068"),
	        (0x0260, &[0xbb, 0x6a, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 006a"),
	        (0x0277, &[0xbb, 0x70, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0070"),
	        (0x0341, &[0xbb, 0x8c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008c"),
	        (0x0338, &[0xbb, 0x8e, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 008e"),
	        (0x034f, &[0xbb, 0x94, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 0094"),
	        (0x0404, &[0xbb, 0xa4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a4"),
	        (0x03fb, &[0xbb, 0xa6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00a6"),
	        (0x0412, &[0xbb, 0xac, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00ac"),
	        (0x05cd, &[0xbb, 0xb4, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b4"),
	        (0x05c4, &[0xbb, 0xb6, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00b6"),
	        (0x05db, &[0xbb, 0xbc, 0x00, 0x00, 0x00, 0x00], 3, "mov\tbx, 00bc"),
	        (0x1262, &[0xbb, 0x28, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0128"),
	        (0x1259, &[0xbb, 0x2a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 012a"),
	        (0x1270, &[0xbb, 0x30, 0x01, 0x00, 0x00, 0x00], 3, "mov\tbx, 0130"),
	        (0x1271, &[0xbb, 0x01, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0201"),
	        (0x1268, &[0xbb, 0x03, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0203"),
	        (0x127f, &[0xbb, 0x09, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0209"),
	        (0x12ba, &[0xbb, 0x18, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0218"),
	        (0x12b1, &[0xbb, 0x1a, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 021a"),
	        (0x12c8, &[0xbb, 0x20, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, 0220"),
	        (0x0028, &[0x8b, 0x1e, 0x02, 0x00, 0x00, 0x00], 4, "mov\tbx, [0002]"),
	        (0x00c8, &[0x8b, 0x1e, 0x06, 0x00, 0x00, 0x00], 4, "mov\tbx, [0006]"),
	        (0x0077, &[0x8b, 0x1e, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tbx, [000c]"),
	        (0x0078, &[0x8b, 0x1e, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [000e]"),
	        (0x0085, &[0x8b, 0x1e, 0x14, 0x00, 0x00, 0x00], 4, "mov\tbx, [0014]"),
	        (0x0ad0, &[0x8b, 0x1e, 0x14, 0x02, 0x00, 0x00], 4, "mov\tbx, [0214]"),
	        (0x0ac7, &[0x8b, 0x1e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tbx, [0216]"),
	        (0x0ade, &[0x8b, 0x1e, 0x1c, 0x02, 0x00, 0x00], 4, "mov\tbx, [021c]"),
	        (0x02c8, &[0x8b, 0x5e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+4]"),
	        (0x017c, &[0x8b, 0x5e, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+6]"),
	        (0x00e6, &[0x8b, 0x5e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp+8]"),
	        (0x0623, &[0x8b, 0x5e, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-18]"),
	        (0x04d2, &[0x8b, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-2]"),
	        (0x0d2d, &[0x8b, 0x5e, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-6]"),
	        (0x029d, &[0x8b, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tbx, [bp-a]"),
	        (0x0060, &[0x8b, 0x9f, 0x16, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+16]"),
	        (0x005f, &[0x8b, 0x9f, 0x32, 0x02, 0x00, 0x00], 4, "mov\tbx, [bx+232]"),
	        (0x0056, &[0x8b, 0x9f, 0x34, 0x02, 0x00, 0x00], 4, "mov\tbx, [bx+234]"),
	        (0x006d, &[0x8b, 0x9f, 0x3a, 0x02, 0x00, 0x00], 4, "mov\tbx, [bx+23a]"),
	        (0x114a, &[0x8b, 0x5f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx+2]"),
	        (0x105a, &[0x8b, 0x9f, 0x34, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+34]"),
	        (0x1051, &[0x8b, 0x9f, 0x36, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+36]"),
	        (0x1068, &[0x8b, 0x9f, 0x3c, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+3c]"),
	        (0x00b0, &[0x8b, 0x9f, 0x0e, 0x00, 0x00, 0x00], 4, "mov\tbx, [bx+e]"),
	        (0x0468, &[0x8b, 0x5f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tbx, [bx-2]"),
	        (0x1275, &[0x8b, 0x1f, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [bx]"),
	        (0x0145, &[0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, [di]"),
	        (0x1162, &[0x8b, 0x5c, 0x06, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+6]"),
	        (0x0a0a, &[0x8b, 0x5c, 0x08, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+8]"),
	        (0x02ed, &[0x8b, 0x5c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tbx, [si+a]"),
	        (0x0f2b, &[0x89, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, di"),
	        (0x00f5, &[0x89, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, dx"),
	        (0x00ac, &[0x89, 0xf3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, si"),
	        (0x0002, &[0x89, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "mov\tbx, sp"),
	        (0x01f5, &[0xc6, 0x04, 0x20, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 20"),
	        (0x01e9, &[0xc6, 0x04, 0x2b, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 2b"),
	        (0x01d3, &[0xc6, 0x04, 0x2d, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 2d"),
	        (0x0211, &[0xc6, 0x04, 0x30, 0x00, 0x00, 0x00], 3, "mov byte\t[si], 30"),
	        (0x0167, &[0xb9, 0x01, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0001"),
	        (0x016c, &[0xb9, 0x02, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0002"),
	        (0x007a, &[0xb9, 0x03, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0003"),
	        (0x1282, &[0xb9, 0x06, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0006"),
	        (0x0067, &[0xb9, 0x0c, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 000c"),
	        (0x118a, &[0xb9, 0x10, 0x00, 0x00, 0x00, 0x00], 3, "mov\tcx, 0010"),
	        (0x0e93, &[0x8b, 0x4e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp+8]"),
	        (0x01fc, &[0x8b, 0x4e, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bp-2]"),
	        (0x113d, &[0x8b, 0x4f, 0x02, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx+2]"),
	        (0x0174, &[0x8b, 0x4f, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tcx, [bx-2]"),
	        (0x116e, &[0x8b, 0x4c, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tcx, [si+a]"),
	        (0x00eb, &[0x89, 0xd1, 0x00, 0x00, 0x00, 0x00], 2, "mov\tcx, dx"),
	        (0x0c5c, &[0x8b, 0x3e, 0x16, 0x02, 0x00, 0x00], 4, "mov\tdi, [0216]"),
	        (0x0c53, &[0x8b, 0x3e, 0x18, 0x02, 0x00, 0x00], 4, "mov\tdi, [0218]"),
	        (0x0c6a, &[0x8b, 0x3e, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tdi, [021e]"),
	        (0x004c, &[0x8b, 0x7e, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+4]"),
	        (0x081e, &[0x8b, 0x7e, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdi, [bp+8]"),
	        (0x0ca8, &[0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, [di]"),
	        (0x0144, &[0x89, 0xc7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, ax"),
	        (0x083c, &[0x89, 0xd7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, dx"),
	        (0x0d27, &[0x89, 0xf7, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdi, si"),
	        (0x0677, &[0x8a, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdl, [bx]"),
	        (0x01b9, &[0xba, 0x60, 0x00, 0x00, 0x00, 0x00], 3, "mov\tdx, 0060"),
	        (0x1206, &[0xba, 0x52, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0152"),
	        (0x11fd, &[0xba, 0x54, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0154"),
	        (0x1214, &[0xba, 0x5a, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 015a"),
	        (0x120e, &[0xba, 0x69, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0169"),
	        (0x1205, &[0xba, 0x6b, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 016b"),
	        (0x121c, &[0xba, 0x71, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0171"),
	        (0x1216, &[0xba, 0x80, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0180"),
	        (0x120d, &[0xba, 0x82, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0182"),
	        (0x1224, &[0xba, 0x88, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0188"),
	        (0x121e, &[0xba, 0x97, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0197"),
	        (0x1215, &[0xba, 0x99, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 0199"),
	        (0x122c, &[0xba, 0x9f, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 019f"),
	        (0x1226, &[0xba, 0xae, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01ae"),
	        (0x121d, &[0xba, 0xb0, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b0"),
	        (0x1234, &[0xba, 0xb6, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01b6"),
	        (0x122e, &[0xba, 0xc5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c5"),
	        (0x1225, &[0xba, 0xc7, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01c7"),
	        (0x123c, &[0xba, 0xcd, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01cd"),
	        (0x1236, &[0xba, 0xdc, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01dc"),
	        (0x122d, &[0xba, 0xde, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01de"),
	        (0x1244, &[0xba, 0xe4, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01e4"),
	        (0x128c, &[0xba, 0xf3, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f3"),
	        (0x1283, &[0xba, 0xf5, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01f5"),
	        (0x129a, &[0xba, 0xfb, 0x01, 0x00, 0x00, 0x00], 3, "mov\tdx, 01fb"),
	        (0x003d, &[0xba, 0xd2, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, 04d2"),
	        (0x0dab, &[0x8b, 0x16, 0x26, 0x01, 0x00, 0x00], 4, "mov\tdx, [0126]"),
	        (0x0da2, &[0x8b, 0x16, 0x28, 0x01, 0x00, 0x00], 4, "mov\tdx, [0128]"),
	        (0x0db9, &[0x8b, 0x16, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tdx, [012e]"),
	        (0x0106, &[0x8b, 0x56, 0x04, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+4]"),
	        (0x0112, &[0x8b, 0x56, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+6]"),
	        (0x010c, &[0x8b, 0x56, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+8]"),
	        (0x0e9c, &[0x8b, 0x56, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+a]"),
	        (0x0aac, &[0x8b, 0x56, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp+c]"),
	        (0x046b, &[0x8b, 0x56, 0xec, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-14]"),
	        (0x04bd, &[0x8b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-18]"),
	        (0x05f1, &[0x8b, 0x56, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-2]"),
	        (0x01f9, &[0x8b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-4]"),
	        (0x0215, &[0x8b, 0x56, 0xfa, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-6]"),
	        (0x02e8, &[0x8b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-8]"),
	        (0x0638, &[0x8b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-a]"),
	        (0x0cac, &[0x8b, 0x56, 0xf4, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-c]"),
	        (0x073d, &[0x8b, 0x56, 0xf2, 0x00, 0x00, 0x00], 3, "mov\tdx, [bp-e]"),
	        (0x04ae, &[0x8b, 0x57, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-2]"),
	        (0x0171, &[0x8b, 0x57, 0xfc, 0x00, 0x00, 0x00], 3, "mov\tdx, [bx-4]"),
	        (0x00e9, &[0x8b, 0x17, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [bx]"),
	        (0x0c7f, &[0x8b, 0x55, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [di-2]"),
	        (0x0c8b, &[0x8b, 0x15, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [di]"),
	        (0x0153, &[0x8b, 0x54, 0x02, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+2]"),
	        (0x0993, &[0x8b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+6]"),
	        (0x0914, &[0x8b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+8]"),
	        (0x09fb, &[0x8b, 0x54, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+a]"),
	        (0x1187, &[0x8b, 0x54, 0x0c, 0x00, 0x00, 0x00], 3, "mov\tdx, [si+c]"),
	        (0x0bb7, &[0x8b, 0x54, 0xfe, 0x00, 0x00, 0x00], 3, "mov\tdx, [si-2]"),
	        (0x02e1, &[0x8b, 0x14, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, [si]"),
	        (0x1267, &[0x89, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, ax"),
	        (0x11db, &[0x89, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, bx"),
	        (0x1179, &[0x89, 0xca, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, cx"),
	        (0x006a, &[0x89, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, di"),
	        (0x083e, &[0x89, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "mov\tdx, si"),
	        (0x00a5, &[0x8b, 0x36, 0x04, 0x00, 0x00, 0x00], 4, "mov\tsi, [0004]"),
	        (0x0054, &[0x8b, 0x36, 0x0a, 0x00, 0x00, 0x00], 4, "mov\tsi, [000a]"),
	        (0x0055, &[0x8b, 0x36, 0x0c, 0x00, 0x00, 0x00], 4, "mov\tsi, [000c]"),
	        (0x0062, &[0x8b, 0x36, 0x12, 0x00, 0x00, 0x00], 4, "mov\tsi, [0012]"),
	        (0x0de5, &[0x8b, 0x36, 0x26, 0x01, 0x00, 0x00], 4, "mov\tsi, [0126]"),
	        (0x0ddc, &[0x8b, 0x36, 0x28, 0x01, 0x00, 0x00], 4, "mov\tsi, [0128]"),
	        (0x0df3, &[0x8b, 0x36, 0x2e, 0x01, 0x00, 0x00], 4, "mov\tsi, [012e]"),
	        (0x0ba1, &[0x8b, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "mov\tsi, [0216]"),
	        (0x0b98, &[0x8b, 0x36, 0x18, 0x02, 0x00, 0x00], 4, "mov\tsi, [0218]"),
	        (0x0baf, &[0x8b, 0x36, 0x1e, 0x02, 0x00, 0x00], 4, "mov\tsi, [021e]"),
	        (0x00de, &[0x8b, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+4]"),
	        (0x085c, &[0x8b, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+6]"),
	        (0x0132, &[0x8b, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+8]"),
	        (0x0a79, &[0x8b, 0x76, 0x0a, 0x00, 0x00, 0x00], 3, "mov\tsi, [bp+a]"),
	        (0x0c00, &[0x8b, 0x34, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, [si]"),
	        (0x0290, &[0x89, 0xc6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, ax"),
	        (0x0afa, &[0x89, 0xd6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, dx"),
	        (0x1160, &[0x89, 0xe6, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsi, sp"),
	        (0x0185, &[0x89, 0xec, 0x00, 0x00, 0x00, 0x00], 2, "mov\tsp, bp"),
	        (0x0117, &[0xf7, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "mul\tdi"),
	        (0x01d7, &[0xf7, 0x5e, 0xfe, 0x00, 0x00, 0x00], 3, "neg\t[bp-2]"),
	        (0x01da, &[0xf7, 0x5e, 0xfc, 0x00, 0x00, 0x00], 3, "neg\t[bp-4]"),
	        (0x03bc, &[0xf7, 0x5e, 0xf6, 0x00, 0x00, 0x00], 3, "neg\t[bp-a]"),
	        (0x0311, &[0xf7, 0xd8, 0x00, 0x00, 0x00, 0x00], 2, "neg\tax"),
	        (0x0156, &[0xf7, 0xda, 0x00, 0x00, 0x00, 0x00], 2, "neg\tdx"),
	        (0x08cd, &[0x81, 0x4c, 0x04, 0x04, 0x00, 0x00], 5, "or\t[si+4], 0004"),
	        (0x08fa, &[0x81, 0x4c, 0x04, 0x08, 0x00, 0x00], 5, "or\t[si+4], 0008"),
	        (0x0948, &[0x81, 0x4c, 0x04, 0x20, 0x00, 0x00], 5, "or\t[si+4], 0020"),
	        (0x08d4, &[0x81, 0x4c, 0x04, 0x48, 0x00, 0x00], 5, "or\t[si+4], 0048"),
	        (0x0895, &[0x81, 0x4c, 0x04, 0x00, 0x01, 0x00], 5, "or\t[si+4], 0100"),
	        (0x02d4, &[0x09, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, ax"),
	        (0x111a, &[0x09, 0xf8, 0x00, 0x00, 0x00, 0x00], 2, "or\tax, di"),
	        (0x0325, &[0x81, 0xcf, 0x01, 0x00, 0x00, 0x00], 4, "or\tdi, 0001"),
	        (0x032b, &[0x81, 0xcf, 0x02, 0x00, 0x00, 0x00], 4, "or\tdi, 0002"),
	        (0x0331, &[0x81, 0xcf, 0x04, 0x00, 0x00, 0x00], 4, "or\tdi, 0004"),
	        (0x0337, &[0x81, 0xcf, 0x08, 0x00, 0x00, 0x00], 4, "or\tdi, 0008"),
	        (0x033d, &[0x81, 0xcf, 0x10, 0x00, 0x00, 0x00], 4, "or\tdi, 0010"),
	        (0x03ee, &[0x81, 0xcf, 0x20, 0x00, 0x00, 0x00], 4, "or\tdi, 0020"),
	        (0x03f8, &[0x81, 0xcf, 0x40, 0x00, 0x00, 0x00], 4, "or\tdi, 0040"),
	        (0x0402, &[0x81, 0xcf, 0x80, 0x00, 0x00, 0x00], 4, "or\tdi, 0080"),
	        (0x037d, &[0x81, 0xcf, 0x00, 0x01, 0x00, 0x00], 4, "or\tdi, 0100"),
	        (0x03ac, &[0x81, 0xcf, 0x00, 0x02, 0x00, 0x00], 4, "or\tdi, 0200"),
	        (0x051b, &[0x81, 0xcf, 0x00, 0x04, 0x00, 0x00], 4, "or\tdi, 0400"),
	        (0x0343, &[0x81, 0xcf, 0x00, 0x10, 0x00, 0x00], 4, "or\tdi, 1000"),
	        (0x004f, &[0x09, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "or\tdi, di"),
	        (0x0218, &[0x0b, 0x56, 0xf8, 0x00, 0x00, 0x00], 3, "or\tdx, [bp-8]"),
	        (0x0aa2, &[0x09, 0xc2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, ax"),
	        (0x04b4, &[0x09, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "or\tdx, dx"),
	        (0x084a, &[0x09, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "or\tsi, si"),
	        (0x0ec8, &[0x58, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tax"),
	        (0x0181, &[0x5d, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbp"),
	        (0x0043, &[0x5b, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tbx"),
	        (0x0183, &[0x5f, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdi"),
	        (0x0302, &[0x5a, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tdx"),
	        (0x0184, &[0x5e, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "pop\tsi"),
	        (0x08a4, &[0xff, 0x36, 0x1e, 0x00, 0x00, 0x00], 4, "push\t[001e]"),
	        (0x089b, &[0xff, 0x36, 0x20, 0x00, 0x00, 0x00], 4, "push\t[0020]"),
	        (0x08b2, &[0xff, 0x36, 0x26, 0x00, 0x00, 0x00], 4, "push\t[0026]"),
	        (0x0b17, &[0xff, 0x36, 0x14, 0x02, 0x00, 0x00], 4, "push\t[0214]"),
	        (0x0b0e, &[0xff, 0x36, 0x16, 0x02, 0x00, 0x00], 4, "push\t[0216]"),
	        (0x0b25, &[0xff, 0x36, 0x1c, 0x02, 0x00, 0x00], 4, "push\t[021c]"),
	        (0x00ce, &[0xff, 0x76, 0x04, 0x00, 0x00, 0x00], 3, "push\t[bp+4]"),
	        (0x0822, &[0xff, 0x76, 0x06, 0x00, 0x00, 0x00], 3, "push\t[bp+6]"),
	        (0x0ab2, &[0xff, 0x76, 0x08, 0x00, 0x00, 0x00], 3, "push\t[bp+8]"),
	        (0x027d, &[0xff, 0x76, 0x0c, 0x00, 0x00, 0x00], 3, "push\t[bp+c]"),
	        (0x00a4, &[0xff, 0x76, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bp-2]"),
	        (0x09da, &[0xff, 0x76, 0xfc, 0x00, 0x00, 0x00], 3, "push\t[bp-4]"),
	        (0x0284, &[0xff, 0x76, 0xfa, 0x00, 0x00, 0x00], 3, "push\t[bp-6]"),
	        (0x0287, &[0xff, 0x76, 0xf8, 0x00, 0x00, 0x00], 3, "push\t[bp-8]"),
	        (0x0c04, &[0xff, 0x76, 0xf6, 0x00, 0x00, 0x00], 3, "push\t[bp-a]"),
	        (0x0281, &[0xff, 0x76, 0xf4, 0x00, 0x00, 0x00], 3, "push\t[bp-c]"),
	        (0x074e, &[0xff, 0x76, 0xf2, 0x00, 0x00, 0x00], 3, "push\t[bp-e]"),
	        (0x0f2c, &[0xff, 0xb7, 0x34, 0x00, 0x00, 0x00], 4, "push\t[bx+34]"),
	        (0x0f23, &[0xff, 0xb7, 0x36, 0x00, 0x00, 0x00], 4, "push\t[bx+36]"),
	        (0x0f3a, &[0xff, 0xb7, 0x3c, 0x00, 0x00, 0x00], 4, "push\t[bx+3c]"),
	        (0x0559, &[0xff, 0x77, 0xfe, 0x00, 0x00, 0x00], 3, "push\t[bx-2]"),
	        (0x004b, &[0xff, 0x37, 0x00, 0x00, 0x00, 0x00], 2, "push\t[bx]"),
	        (0x0938, &[0xff, 0x74, 0x02, 0x00, 0x00, 0x00], 3, "push\t[si+2]"),
	        (0x09dd, &[0xff, 0x74, 0x08, 0x00, 0x00, 0x00], 3, "push\t[si+8]"),
	        (0x0030, &[0x50, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tax"),
	        (0x0039, &[0x55, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbp"),
	        (0x0502, &[0x53, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tbx"),
	        (0x002e, &[0x51, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tcx"),
	        (0x004b, &[0x57, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdi"),
	        (0x002f, &[0x52, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tdx"),
	        (0x004a, &[0x56, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "push\tsi"),
	        (0x1191, &[0xd1, 0xd3, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tbx, 1"),
	        (0x118f, &[0xd1, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "rcl\tdx, 1"),
	        (0x1126, &[0xf2, 0xa4, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsb"),
	        (0x1122, &[0xf2, 0xa5, 0x00, 0x00, 0x00, 0x00], 2, "rep\tmovsw"),
	        (0x0182, &[0xc3, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "ret"),
	        (0x117d, &[0xc2, 0x08, 0x00, 0x00, 0x00, 0x00], 3, "ret\t0008"),
	        (0x1292, &[0xd1, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, 1"),
	        (0x006c, &[0xd3, 0xfa, 0x00, 0x00, 0x00, 0x00], 2, "sar\tdx, cl"),
	        (0x00e5, &[0x18, 0x8b, 0x56, 0x04, 0x00, 0x00], 4, "sbb\t[bp+di+456], cl"),
	        (0x01dd, &[0x83, 0x5e, 0xfe, 0x00, 0x00, 0x00], 4, "sbb\t[bp-2], 0"),
	        (0x11a5, &[0x19, 0xfb, 0x00, 0x00, 0x00, 0x00], 2, "sbb\tbx, di"),
	        (0x118d, &[0xd1, 0xe0, 0x00, 0x00, 0x00, 0x00], 2, "shl\tax, 1"),
	        (0x00ae, &[0xd1, 0xe3, 0x00, 0x00, 0x00, 0x00], 2, "shl\tbx, 1"),
	        (0x007d, &[0xd3, 0xe7, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdi, cl"),
	        (0x126e, &[0xd1, 0xe2, 0x00, 0x00, 0x00, 0x00], 2, "shl\tdx, 1"),
	        (0x1120, &[0xd1, 0xe9, 0x00, 0x00, 0x00, 0x00], 2, "shr\tcx, 1"),
	        (0x112f, &[0xfd, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "std"),
	        (0x06b4, &[0x83, 0x6e, 0xfc, 0x02, 0x00, 0x00], 4, "sub\t[bp-4], 2"),
	        (0x0d8d, &[0x2d, 0x20, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0020"),
	        (0x0106, &[0x2d, 0x30, 0x00, 0x00, 0x00, 0x00], 3, "sub\tax, 0030"),
	        (0x0aca, &[0x2d, 0xa9, 0xff, 0x00, 0x00, 0x00], 3, "sub\tax, ffa9"),
	        (0x110c, &[0x29, 0xf0, 0x00, 0x00, 0x00, 0x00], 2, "sub\tax, si"),
	        (0x0d82, &[0x83, 0xea, 0x61, 0x00, 0x00, 0x00], 3, "sub\tdx, 61"),
	        (0x05f4, &[0x2b, 0x56, 0xe8, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-18]"),
	        (0x063b, &[0x2b, 0x56, 0xfc, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-4]"),
	        (0x0c5f, &[0x2b, 0x56, 0xf6, 0x00, 0x00, 0x00], 3, "sub\tdx, [bp-a]"),
	        (0x11a2, &[0x2b, 0x54, 0x06, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+6]"),
	        (0x09fe, &[0x2b, 0x54, 0x08, 0x00, 0x00, 0x00], 3, "sub\tdx, [si+8]"),
	        (0x083a, &[0x29, 0xf2, 0x00, 0x00, 0x00, 0x00], 2, "sub\tdx, si"),
	        (0x02ba, &[0x81, 0xec, 0x1a, 0x04, 0x00, 0x00], 4, "sub\tsp, 041a"),
	        (0x0103, &[0x83, 0xec, 0x18, 0x00, 0x00, 0x00], 3, "sub\tsp, 18"),
	        (0x0e69, &[0x83, 0xec, 0x20, 0x00, 0x00, 0x00], 3, "sub\tsp, 20"),
	        (0x0d09, &[0x83, 0xec, 0x06, 0x00, 0x00, 0x00], 3, "sub\tsp, 6"),
	        (0x0f13, &[0x83, 0xec, 0x0a, 0x00, 0x00, 0x00], 3, "sub\tsp, a"),
	        (0x012e, &[0x83, 0xec, 0x0c, 0x00, 0x00, 0x00], 3, "sub\tsp, c"),
	        (0x0c1d, &[0x83, 0xec, 0x0e, 0x00, 0x00, 0x00], 3, "sub\tsp, e"),
	        (0x106c, &[0xf7, 0x47, 0x04, 0x00, 0x01, 0x00], 5, "test\t[bx+4], 0100"),
	        (0x0f60, &[0xf7, 0x44, 0x04, 0x00, 0x01, 0x00], 5, "test\t[si+4], 0100"),
	        (0x0929, &[0xf7, 0x44, 0x04, 0x00, 0x02, 0x00], 5, "test\t[si+4], 0200"),
	        (0x111c, &[0xa8, 0x01, 0x00, 0x00, 0x00, 0x00], 2, "test\tal, 1"),
	        (0x0019, &[0xf6, 0xc3, 0x01, 0x00, 0x00, 0x00], 3, "test\tbl, 1"),
	        (0x114d, &[0x85, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "test\tbx, bx"),
	        (0x01e3, &[0xf6, 0x46, 0x06, 0x02, 0x00, 0x00], 4, "test byte\t[bp+6], 2"),
	        (0x01ef, &[0xf6, 0x46, 0x06, 0x04, 0x00, 0x00], 4, "test byte\t[bp+6], 4"),
	        (0x0205, &[0xf6, 0x46, 0x06, 0x08, 0x00, 0x00], 4, "test byte\t[bp+6], 8"),
	        (0x0fd4, &[0xf6, 0x44, 0x04, 0x01, 0x00, 0x00], 4, "test byte\t[si+4], 1"),
	        (0x0884, &[0xf6, 0x44, 0x04, 0x10, 0x00, 0x00], 4, "test byte\t[si+4], 10"),
	        (0x0872, &[0xf6, 0x44, 0x04, 0x02, 0x00, 0x00], 4, "test byte\t[si+4], 2"),
	        (0x089a, &[0xf6, 0x44, 0x04, 0x04, 0x00, 0x00], 4, "test byte\t[si+4], 4"),
	        (0x0904, &[0xf6, 0x44, 0x04, 0x40, 0x00, 0x00], 4, "test byte\t[si+4], 40"),
	        (0x087e, &[0xf6, 0x44, 0x04, 0x80, 0x00, 0x00], 4, "test byte\t[si+4], 80"),
	        (0x03d8, &[0xf7, 0xc7, 0x01, 0x00, 0x00, 0x00], 4, "test\tdi, 0001"),
	        (0x03ce, &[0xf7, 0xc7, 0x02, 0x00, 0x00, 0x00], 4, "test\tdi, 0002"),
	        (0x0611, &[0xf7, 0xc7, 0x08, 0x00, 0x00, 0x00], 4, "test\tdi, 0008"),
	        (0x05e6, &[0xf7, 0xc7, 0x10, 0x00, 0x00, 0x00], 4, "test\tdi, 0010"),
	        (0x0459, &[0xf7, 0xc7, 0x20, 0x00, 0x00, 0x00], 4, "test\tdi, 0020"),
	        (0x0473, &[0xf7, 0xc7, 0x40, 0x00, 0x00, 0x00], 4, "test\tdi, 0040"),
	        (0x03b0, &[0xf7, 0xc7, 0x00, 0x01, 0x00, 0x00], 4, "test\tdi, 0100"),
	        (0x04c9, &[0xf7, 0xc7, 0x00, 0x02, 0x00, 0x00], 4, "test\tdi, 0200"),
	        (0x061d, &[0xf7, 0xc7, 0x00, 0x04, 0x00, 0x00], 4, "test\tdi, 0400"),
	        (0x0358, &[0xf7, 0xc7, 0x00, 0x10, 0x00, 0x00], 4, "test\tdi, 1000"),
	        (0x123d, &[0x87, 0x1e, 0x10, 0x02, 0x00, 0x00], 4, "xchg\t[0210], bx"),
	        (0x1234, &[0x87, 0x1e, 0x12, 0x02, 0x00, 0x00], 4, "xchg\t[0212], bx"),
	        (0x124b, &[0x87, 0x1e, 0x18, 0x02, 0x00, 0x00], 4, "xchg\t[0218], bx"),
	        (0x1176, &[0x91, 0x00, 0x00, 0x00, 0x00, 0x00], 1, "xchg\tcx, ax"),
	        (0x086d, &[0x30, 0xe4, 0x00, 0x00, 0x00, 0x00], 2, "xor\tah, ah"),
	        (0x00f4, &[0x31, 0xc0, 0x00, 0x00, 0x00, 0x00], 2, "xor\tax, ax"),
	        (0x0000, &[0x31, 0xed, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbp, bp"),
	        (0x0500, &[0x31, 0xdb, 0x00, 0x00, 0x00, 0x00], 2, "xor\tbx, bx"),
	        (0x02eb, &[0x30, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdh, dh"),
	        (0x0101, &[0x31, 0xff, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdi, di"),
	        (0x116c, &[0x31, 0xd2, 0x00, 0x00, 0x00, 0x00], 2, "xor\tdx, dx"),
	        (0x0060, &[0x31, 0xf6, 0x00, 0x00, 0x00, 0x00], 2, "xor\tsi, si"),
        ];

        for (i, testcase) in testcases.into_iter().enumerate() {
            if let (l, Some(instruction)) = Instruction::decode(testcase.0, testcase.1) {
                assert_eq!(
                    format!("{}", instruction),
                    testcase.3,
                    "#{}, {:04x}, {:?}, result: {:?}, expected: {}",
                    i,
                    testcase.0,
                    testcase.1,
                    instruction,
                    testcase.3
                );
                assert_eq!(
                    l, testcase.2,
                    "#{}, {}, result: {:?}, expected: {}",
                    i, instruction, l, testcase.2
                );
            }
        }
    }
}
